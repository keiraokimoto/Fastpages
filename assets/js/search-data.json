{
  
    
        "post0": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # - Only one of each number is printed (there is only one 1, only one 2, etc.) # - It is printed in order, from least to greatest # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # - Sets are also a sort of array, which Hashmaps/Hashtables are # - The two are very similar, except sets don&#39;t have as many features as Hashmaps or Hashtables do . {1, 2, 3} . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) # Again, could be printed in a better way . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . import pprint # Adding a 19th song to an album 4 years later lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # Printing the dictionary print(lover_album) # can use pprint pprnt = pprint.PrettyPrinter(width=41, compact=True) pprnt.pprint(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} {&#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;], &#39;title&#39;: &#39;Lover&#39;, &#39;tracks&#39;: {1: &#39;I Forgot That You &#39; &#39;Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The &#39; &#39;Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand &#39; &#39;Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better &#34; &#39;(feat. Dixie Chicks)&#39;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon &#39; &#39;Urie of Panic! At The &#39; &#39;Disco)&#39;, 17: &#34;It&#39;s Nice To Have A &#34; &#39;Friend&#39;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You &#39; &#39;Loved Before&#39;}, &#39;year&#39;: 2019} . import pprint # Print lover_album in more readable format for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) print(&#39;--&#39;) print(&quot;Tracks:&quot;) # Write your own code to print tracks in readable format for track in lover_album[&quot;tracks&quot;].values(): print(track) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] -- Tracks: I Forgot That You Existed Cruel Summer Lover The Man The Archer I Think He Knows Miss Americana &amp; The Heartbreak Prince Paper Rings Cornelia Street Death By A Thousand Cuts London Boy Soon You&#39;ll Get Better (feat. Dixie Chicks) False God You Need To Calm Down Afterglow Me! (feat. Brendon Urie of Panic! At The Disco) It&#39;s Nice To Have A Friend Daylight All Of The Girls You Loved Before . import random def search(): tracks = lover_album[&quot;tracks&quot;] # dictTracks = lover_album.tracks # andomTrackNum = random.choice(list(dictTracks)) # randomTrackName = dictTracks[randomTrackNum] search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) if lover_album.get(search.lower()) == &quot;tracks&quot;: print(lover_album.tracks) # if lover_album.get(search.lower()) == &quot;random tracks&quot;: # print(randomTrackName) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # - You could have the search also pull up tracks (added above) # - You could also create a random list of tracks, much like making a randomized playlist . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . . import pprint insert_name_here_album = { &quot;title&quot;: &quot;cheetos&quot;, &quot;artist&quot;: &quot;snail&quot;, &quot;year&quot;: 2004, &quot;genre&quot;: [&quot;hlep&quot;, &quot;pelase&quot;], &quot;tracks&quot;: { 1: &quot;asdjoasipko[fpl[as]]&quot;, 2: &quot;asdihajoipkof&quot;, 3: &quot;adsugyhu9i09-o-&quot;, 4: &quot;adsyaihsuoijdkoa&quot;, 5: &quot;7ety8quwi9opf&quot;, 6: &quot;adshijaosdipko&quot;, 7: &quot;iadsuasjoifko&quot;, 8: &quot;asdihuasijdkop&quot;, 9: &quot;adyiuop&quot;, 10: &quot;asdugyihuijko&quot;, 11: &quot;adshiasuoji&quot;, 12: &quot;asdsiashudjio&quot;, 13: &quot;asdksfopla[f]&quot;, 14: &quot;Yoasdjokpf&quot;, 15: &quot;sdjoakf&quot;, 16: &quot;iasdkolpf&quot;, 17: &quot;iasdsjaoidpko&quot;, 18: &quot;fytgyhujis&quot; } } pprnt = pprint.PrettyPrinter(width=41, compact=True) pprnt.pprint(insert_name_here_album) print(&#39;&#39;) pprnt.pprint(insert_name_here_album[&#39;tracks&#39;][4]) . {&#39;artist&#39;: &#39;snail&#39;, &#39;genre&#39;: [&#39;hlep&#39;, &#39;pelase&#39;], &#39;title&#39;: &#39;cheetos&#39;, &#39;tracks&#39;: {1: &#39;asdjoasipko[fpl[as]]&#39;, 2: &#39;asdihajoipkof&#39;, 3: &#39;adsugyhu9i09-o-&#39;, 4: &#39;adsyaihsuoijdkoa&#39;, 5: &#39;7ety8quwi9opf&#39;, 6: &#39;adshijaosdipko&#39;, 7: &#39;iadsuasjoifko&#39;, 8: &#39;asdihuasijdkop&#39;, 9: &#39;adyiuop&#39;, 10: &#39;asdugyihuijko&#39;, 11: &#39;adshiasuoji&#39;, 12: &#39;asdsiashudjio&#39;, 13: &#39;asdksfopla[f]&#39;, 14: &#39;Yoasdjokpf&#39;, 15: &#39;sdjoakf&#39;, 16: &#39;iasdkolpf&#39;, 17: &#39;iasdsjaoidpko&#39;, 18: &#39;fytgyhujis&#39;}, &#39;year&#39;: 2004} &#39;adsyaihsuoijdkoa&#39; .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # # . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # # # Printing the dictionary print(lover_album) . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . import pprint insert_name_here_album = { &quot;title&quot;: &quot;cheetos&quot;, &quot;artist&quot;: &quot;snail&quot;, &quot;year&quot;: 2004, &quot;genre&quot;: [&quot;hlep&quot;, &quot;pelase&quot;], &quot;tracks&quot;: { 1: &quot;asdjoasipko[fpl[as]]&quot;, 2: &quot;asdihajoipkof&quot;, 3: &quot;adsugyhu9i09-o-&quot;, 4: &quot;adsyaihsuoijdkoa&quot;, 5: &quot;7ety8quwi9opf&quot;, 6: &quot;adshijaosdipko&quot;, 7: &quot;iadsuasjoifko&quot;, 8: &quot;asdihuasijdkop&quot;, 9: &quot;adyiuop&quot;, 10: &quot;asdugyihuijko&quot;, 11: &quot;adshiasuoji&quot;, 12: &quot;asdsiashudjio&quot;, 13: &quot;asdksfopla[f]&quot;, 14: &quot;Yoasdjokpf&quot;, 15: &quot;sdjoakf&quot;, 16: &quot;iasdkolpf&quot;, 17: &quot;iasdsjaoidpko&quot;, 18: &quot;fytgyhujis&quot; } } pprnt = pprint.PrettyPrinter(width=41, compact=True) pprnt.pprint(insert_name_here_album) print(&#39;&#39;) pprnt.pprint(insert_name_here_album[&#39;tracks&#39;][4]) . {&#39;artist&#39;: &#39;snail&#39;, &#39;genre&#39;: [&#39;hlep&#39;, &#39;pelase&#39;], &#39;title&#39;: &#39;cheetos&#39;, &#39;tracks&#39;: {1: &#39;asdjoasipko[fpl[as]]&#39;, 2: &#39;asdihajoipkof&#39;, 3: &#39;adsugyhu9i09-o-&#39;, 4: &#39;adsyaihsuoijdkoa&#39;, 5: &#39;7ety8quwi9opf&#39;, 6: &#39;adshijaosdipko&#39;, 7: &#39;iadsuasjoifko&#39;, 8: &#39;asdihuasijdkop&#39;, 9: &#39;adyiuop&#39;, 10: &#39;asdugyihuijko&#39;, 11: &#39;adshiasuoji&#39;, 12: &#39;asdsiashudjio&#39;, 13: &#39;asdksfopla[f]&#39;, 14: &#39;Yoasdjokpf&#39;, 15: &#39;sdjoakf&#39;, 16: &#39;iasdkolpf&#39;, 17: &#39;iasdsjaoidpko&#39;, 18: &#39;fytgyhujis&#39;}, &#39;year&#39;: 2004} &#39;adsyaihsuoijdkoa&#39; .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/29/DS-hashmaps-copy.html",
            "relUrl": "/2023/03/29/DS-hashmaps-copy.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . The more complex a program is, and the more memory and time it takes for a program to run, the more energy it uses. If the program runs too slowly, or uses too much space, the user is put at a disadvantage, because they have less energy or space for other programs. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 #baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (625, 468) pixels: 292,500 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . It&#39;s a problem for both, because the image takes up a lot of space, as well as needing a lot of time to complete the processing. | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(300)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299] [299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . 0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 126 0 127 0 128 0 129 0 130 0 131 0 132 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 141 0 142 0 143 0 144 0 145 0 146 0 147 0 148 0 149 0 150 0 151 0 152 0 153 0 154 0 155 0 156 0 157 0 158 0 159 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 169 0 170 0 171 0 172 0 173 0 174 0 175 0 176 0 177 0 178 0 179 0 180 0 181 0 182 0 183 0 184 0 185 0 186 0 187 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 197 0 198 0 199 0 200 0 201 0 202 0 203 0 204 0 205 0 206 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 216 0 217 0 218 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 228 0 229 0 230 0 231 0 232 0 233 0 234 0 235 0 236 0 237 0 238 0 239 0 240 0 241 0 242 0 243 0 244 0 245 0 246 0 247 0 248 0 249 0 250 0 251 0 252 0 253 0 254 0 255 0 256 0 257 0 258 0 259 0 260 0 261 0 262 0 263 0 264 0 265 0 266 0 267 0 268 0 269 0 270 0 271 0 272 0 273 0 274 0 275 0 276 0 277 0 278 0 279 0 280 0 281 0 282 0 283 0 284 0 285 0 286 0 287 0 288 0 289 0 290 0 291 0 292 0 293 0 294 0 295 0 296 0 297 0 298 0 299 1 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 1 18 1 19 1 20 1 21 1 22 1 23 1 24 1 25 1 26 1 27 1 28 1 29 1 30 1 31 1 32 1 33 1 34 1 35 1 36 1 37 1 38 1 39 1 40 1 41 1 42 1 43 1 44 1 45 1 46 1 47 1 48 1 49 1 50 1 51 1 52 1 53 1 54 1 55 1 56 1 57 1 58 1 59 1 60 1 61 1 62 1 63 1 64 1 65 1 66 1 67 1 68 1 69 1 70 1 71 1 72 1 73 1 74 1 75 1 76 1 77 1 78 1 79 1 80 1 81 1 82 1 83 1 84 1 85 1 86 1 87 1 88 1 89 1 90 1 91 1 92 1 93 1 94 1 95 1 96 1 97 1 98 1 99 1 100 1 101 1 102 1 103 1 104 1 105 1 106 1 107 1 108 1 109 1 110 1 111 1 112 1 113 1 114 1 115 1 116 1 117 1 118 1 119 1 120 1 121 1 122 1 123 1 124 1 125 1 126 1 127 1 128 1 129 1 130 1 131 1 132 1 133 1 134 1 135 1 136 1 137 1 138 1 139 1 140 1 141 1 142 1 143 1 144 1 145 1 146 1 147 1 148 1 149 1 150 1 151 1 152 1 153 1 154 1 155 1 156 1 157 1 158 1 159 1 160 1 161 1 162 1 163 1 164 1 165 1 166 1 167 1 168 1 169 1 170 1 171 1 172 1 173 1 174 1 175 1 176 1 177 1 178 1 179 1 180 1 181 1 182 1 183 1 184 1 185 1 186 1 187 1 188 1 189 1 190 1 191 1 192 1 193 1 194 1 195 1 196 1 197 1 198 1 199 1 200 1 201 1 202 1 203 1 204 1 205 1 206 1 207 1 208 1 209 1 210 1 211 1 212 1 213 1 214 1 215 1 216 1 217 1 218 1 219 1 220 1 221 1 222 1 223 1 224 1 225 1 226 1 227 1 228 1 229 1 230 1 231 1 232 1 233 1 234 1 235 1 236 1 237 1 238 1 239 1 240 1 241 1 242 1 243 1 244 1 245 1 246 1 247 1 248 1 249 1 250 1 251 1 252 1 253 1 254 1 255 1 256 1 257 1 258 1 259 1 260 1 261 1 262 1 263 1 264 1 265 1 266 1 267 1 268 1 269 1 270 1 271 1 272 1 273 1 274 1 275 1 276 1 277 1 278 1 279 1 280 1 281 1 282 1 283 1 284 1 285 1 286 1 287 1 288 1 289 1 290 1 291 1 292 1 293 1 294 1 295 1 296 1 297 1 298 1 299 2 0 2 1 2 2 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 2 18 2 19 2 20 2 21 2 22 2 23 2 24 2 25 2 26 2 27 2 28 2 29 2 30 2 31 2 32 2 33 2 34 2 35 2 36 2 37 2 38 2 39 2 40 2 41 2 42 2 43 2 44 2 45 2 46 2 47 2 48 2 49 2 50 2 51 2 52 2 53 2 54 2 55 2 56 2 57 2 58 2 59 2 60 2 61 2 62 2 63 2 64 2 65 2 66 2 67 2 68 2 69 2 70 2 71 2 72 2 73 2 74 2 75 2 76 2 77 2 78 2 79 2 80 2 81 2 82 2 83 2 84 2 85 2 86 2 87 2 88 2 89 2 90 2 91 2 92 2 93 2 94 2 95 2 96 2 97 2 98 2 99 2 100 2 101 2 102 2 103 2 104 2 105 2 106 2 107 2 108 2 109 2 110 2 111 2 112 2 113 2 114 2 115 2 116 2 117 2 118 2 119 2 120 2 121 2 122 2 123 2 124 2 125 2 126 2 127 2 128 2 129 2 130 2 131 2 132 2 133 2 134 2 135 2 136 2 137 2 138 2 139 2 140 2 141 2 142 2 143 2 144 2 145 2 146 2 147 2 148 2 149 2 150 2 151 2 152 2 153 2 154 2 155 2 156 2 157 2 158 2 159 2 160 2 161 2 162 2 163 2 164 2 165 2 166 2 167 2 168 2 169 2 170 2 171 2 172 2 173 2 174 2 175 2 176 2 177 2 178 2 179 2 180 2 181 2 182 2 183 2 184 2 185 2 186 2 187 2 188 2 189 2 190 2 191 2 192 2 193 2 194 2 195 2 196 2 197 2 198 2 199 2 200 2 201 2 202 2 203 2 204 2 205 2 206 2 207 2 208 2 209 2 210 2 211 2 212 2 213 2 214 2 215 2 216 2 217 2 218 2 219 2 220 2 221 2 222 2 223 2 224 2 225 2 226 2 227 2 228 2 229 2 230 2 231 2 232 2 233 2 234 2 235 2 236 2 237 2 238 2 239 2 240 2 241 2 242 2 243 2 244 2 245 2 246 2 247 2 248 2 249 2 250 2 251 2 252 2 253 2 254 2 255 2 256 2 257 2 258 2 259 2 260 2 261 2 262 2 263 2 264 2 265 2 266 2 267 2 268 2 269 2 270 2 271 2 272 2 273 2 274 2 275 2 276 2 277 2 278 2 279 2 280 2 281 2 282 2 283 2 284 2 285 2 286 2 287 2 288 2 289 2 290 2 291 2 292 2 293 2 294 2 295 2 296 2 297 2 298 2 299 3 0 3 1 3 2 3 3 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 3 22 3 23 3 24 3 25 3 26 3 27 3 28 3 29 3 30 3 31 3 32 3 33 3 34 3 35 3 36 3 37 3 38 3 39 3 40 3 41 3 42 3 43 3 44 3 45 3 46 3 47 3 48 3 49 3 50 3 51 3 52 3 53 3 54 3 55 3 56 3 57 3 58 3 59 3 60 3 61 3 62 3 63 3 64 3 65 3 66 3 67 3 68 3 69 3 70 3 71 3 72 3 73 3 74 3 75 3 76 3 77 3 78 3 79 3 80 3 81 3 82 3 83 3 84 3 85 3 86 3 87 3 88 3 89 3 90 3 91 3 92 3 93 3 94 3 95 3 96 3 97 3 98 3 99 3 100 3 101 3 102 3 103 3 104 3 105 3 106 3 107 3 108 3 109 3 110 3 111 3 112 3 113 3 114 3 115 3 116 3 117 3 118 3 119 3 120 3 121 3 122 3 123 3 124 3 125 3 126 3 127 3 128 3 129 3 130 3 131 3 132 3 133 3 134 3 135 3 136 3 137 3 138 3 139 3 140 3 141 3 142 3 143 3 144 3 145 3 146 3 147 3 148 3 149 3 150 3 151 3 152 3 153 3 154 3 155 3 156 3 157 3 158 3 159 3 160 3 161 3 162 3 163 3 164 3 165 3 166 3 167 3 168 3 169 3 170 3 171 3 172 3 173 3 174 3 175 3 176 3 177 3 178 3 179 3 180 3 181 3 182 3 183 3 184 3 185 3 186 3 187 3 188 3 189 3 190 3 191 3 192 3 193 3 194 3 195 3 196 3 197 3 198 3 199 3 200 3 201 3 202 3 203 3 204 3 205 3 206 3 207 3 208 3 209 3 210 3 211 3 212 3 213 3 214 3 215 3 216 3 217 3 218 3 219 3 220 3 221 3 222 3 223 3 224 3 225 3 226 3 227 3 228 3 229 3 230 3 231 3 232 3 233 3 234 3 235 3 236 3 237 3 238 3 239 3 240 3 241 3 242 3 243 3 244 3 245 3 246 3 247 3 248 3 249 3 250 3 251 3 252 3 253 3 254 3 255 3 256 3 257 3 258 3 259 3 260 3 261 3 262 3 263 3 264 3 265 3 266 3 267 3 268 3 269 3 270 3 271 3 272 3 273 3 274 3 275 3 276 3 277 3 278 3 279 3 280 3 281 3 282 3 283 3 284 3 285 3 286 3 287 3 288 3 289 3 290 3 291 3 292 3 293 3 294 3 295 3 296 3 297 3 298 3 299 4 0 4 1 4 2 4 3 4 4 4 5 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 4 22 4 23 4 24 4 25 4 26 4 27 4 28 4 29 4 30 4 31 4 32 4 33 4 34 4 35 4 36 4 37 4 38 4 39 4 40 4 41 4 42 4 43 4 44 4 45 4 46 4 47 4 48 4 49 4 50 4 51 4 52 4 53 4 54 4 55 4 56 4 57 4 58 4 59 4 60 4 61 4 62 4 63 4 64 4 65 4 66 4 67 4 68 4 69 4 70 4 71 4 72 4 73 4 74 4 75 4 76 4 77 4 78 4 79 4 80 4 81 4 82 4 83 4 84 4 85 4 86 4 87 4 88 4 89 4 90 4 91 4 92 4 93 4 94 4 95 4 96 4 97 4 98 4 99 4 100 4 101 4 102 4 103 4 104 4 105 4 106 4 107 4 108 4 109 4 110 4 111 4 112 4 113 4 114 4 115 4 116 4 117 4 118 4 119 4 120 4 121 4 122 4 123 4 124 4 125 4 126 4 127 4 128 4 129 4 130 4 131 4 132 4 133 4 134 4 135 4 136 4 137 4 138 4 139 4 140 4 141 4 142 4 143 4 144 4 145 4 146 4 147 4 148 4 149 4 150 4 151 4 152 4 153 4 154 4 155 4 156 4 157 4 158 4 159 4 160 4 161 4 162 4 163 4 164 4 165 4 166 4 167 4 168 4 169 4 170 4 171 4 172 4 173 4 174 4 175 4 176 4 177 4 178 4 179 4 180 4 181 4 182 4 183 4 184 4 185 4 186 4 187 4 188 4 189 4 190 4 191 4 192 4 193 4 194 4 195 4 196 4 197 4 198 4 199 4 200 4 201 4 202 4 203 4 204 4 205 4 206 4 207 4 208 4 209 4 210 4 211 4 212 4 213 4 214 4 215 4 216 4 217 4 218 4 219 4 220 4 221 4 222 4 223 4 224 4 225 4 226 4 227 4 228 4 229 4 230 4 231 4 232 4 233 4 234 4 235 4 236 4 237 4 238 4 239 4 240 4 241 4 242 4 243 4 244 4 245 4 246 4 247 4 248 4 249 4 250 4 251 4 252 4 253 4 254 4 255 4 256 4 257 4 258 4 259 4 260 4 261 4 262 4 263 4 264 4 265 4 266 4 267 4 268 4 269 4 270 4 271 4 272 4 273 4 274 4 275 4 276 4 277 4 278 4 279 4 280 4 281 4 282 4 283 4 284 4 285 4 286 4 287 4 288 4 289 4 290 4 291 4 292 4 293 4 294 4 295 4 296 4 297 4 298 4 299 5 0 5 1 5 2 5 3 5 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 5 21 5 22 5 23 5 24 5 25 5 26 5 27 5 28 5 29 5 30 5 31 5 32 5 33 5 34 5 35 5 36 5 37 5 38 5 39 5 40 5 41 5 42 5 43 5 44 5 45 5 46 5 47 5 48 5 49 5 50 5 51 5 52 5 53 5 54 5 55 5 56 5 57 5 58 5 59 5 60 5 61 5 62 5 63 5 64 5 65 5 66 5 67 5 68 5 69 5 70 5 71 5 72 5 73 5 74 5 75 5 76 5 77 5 78 5 79 5 80 5 81 5 82 5 83 5 84 5 85 5 86 5 87 5 88 5 89 5 90 5 91 5 92 5 93 5 94 5 95 5 96 5 97 5 98 5 99 5 100 5 101 5 102 5 103 5 104 5 105 5 106 5 107 5 108 5 109 5 110 5 111 5 112 5 113 5 114 5 115 5 116 5 117 5 118 5 119 5 120 5 121 5 122 5 123 5 124 5 125 5 126 5 127 5 128 5 129 5 130 5 131 5 132 5 133 5 134 5 135 5 136 5 137 5 138 5 139 5 140 5 141 5 142 5 143 5 144 5 145 5 146 5 147 5 148 5 149 5 150 5 151 5 152 5 153 5 154 5 155 5 156 5 157 5 158 5 159 5 160 5 161 5 162 5 163 5 164 5 165 5 166 5 167 5 168 5 169 5 170 5 171 5 172 5 173 5 174 5 175 5 176 5 177 5 178 5 179 5 180 5 181 5 182 5 183 5 184 5 185 5 186 5 187 5 188 5 189 5 190 5 191 5 192 5 193 5 194 5 195 5 196 5 197 5 198 5 199 5 200 5 201 5 202 5 203 5 204 5 205 5 206 5 207 5 208 5 209 5 210 5 211 5 212 5 213 5 214 5 215 5 216 5 217 5 218 5 219 5 220 5 221 5 222 5 223 5 224 5 225 5 226 5 227 5 228 5 229 5 230 5 231 5 232 5 233 5 234 5 235 5 236 5 237 5 238 5 239 5 240 5 241 5 242 5 243 5 244 5 245 5 246 5 247 5 248 5 249 5 250 5 251 5 252 5 253 5 254 5 255 5 256 5 257 5 258 5 259 5 260 5 261 5 262 5 263 5 264 5 265 5 266 5 267 5 268 5 269 5 270 5 271 5 272 5 273 5 274 5 275 5 276 5 277 5 278 5 279 5 280 5 281 5 282 5 283 5 284 5 285 5 286 5 287 5 288 5 289 5 290 5 291 5 292 5 293 5 294 5 295 5 296 5 297 5 298 5 299 6 0 6 1 6 2 6 3 6 4 6 5 6 6 6 7 6 8 6 9 6 10 6 11 6 12 6 13 6 14 6 15 6 16 6 17 6 18 6 19 6 20 6 21 6 22 6 23 6 24 6 25 6 26 6 27 6 28 6 29 6 30 6 31 6 32 6 33 6 34 6 35 6 36 6 37 6 38 6 39 6 40 6 41 6 42 6 43 6 44 6 45 6 46 6 47 6 48 6 49 6 50 6 51 6 52 6 53 6 54 6 55 6 56 6 57 6 58 6 59 6 60 6 61 6 62 6 63 6 64 6 65 6 66 6 67 6 68 6 69 6 70 6 71 6 72 6 73 6 74 6 75 6 76 6 77 6 78 6 79 6 80 6 81 6 82 6 83 6 84 6 85 6 86 6 87 6 88 6 89 6 90 6 91 6 92 6 93 6 94 6 95 6 96 6 97 6 98 6 99 6 100 6 101 6 102 6 103 6 104 6 105 6 106 6 107 6 108 6 109 6 110 6 111 6 112 6 113 6 114 6 115 6 116 6 117 6 118 6 119 6 120 6 121 6 122 6 123 6 124 6 125 6 126 6 127 6 128 6 129 6 130 6 131 6 132 6 133 6 134 6 135 6 136 6 137 6 138 6 139 6 140 6 141 6 142 6 143 6 144 6 145 6 146 6 147 6 148 6 149 6 150 6 151 6 152 6 153 6 154 6 155 6 156 6 157 6 158 6 159 6 160 6 161 6 162 6 163 6 164 6 165 6 166 6 167 6 168 6 169 6 170 6 171 6 172 6 173 6 174 6 175 6 176 6 177 6 178 6 179 6 180 6 181 6 182 6 183 6 184 6 185 6 186 6 187 6 188 6 189 6 190 6 191 6 192 6 193 6 194 6 195 6 196 6 197 6 198 6 199 6 200 6 201 6 202 6 203 6 204 6 205 6 206 6 207 6 208 6 209 6 210 6 211 6 212 6 213 6 214 6 215 6 216 6 217 6 218 6 219 6 220 6 221 6 222 6 223 6 224 6 225 6 226 6 227 6 228 6 229 6 230 6 231 6 232 6 233 6 234 6 235 6 236 6 237 6 238 6 239 6 240 6 241 6 242 6 243 6 244 6 245 6 246 6 247 6 248 6 249 6 250 6 251 6 252 6 253 6 254 6 255 6 256 6 257 6 258 6 259 6 260 6 261 6 262 6 263 6 264 6 265 6 266 6 267 6 268 6 269 6 270 6 271 6 272 6 273 6 274 6 275 6 276 6 277 6 278 6 279 6 280 6 281 6 282 6 283 6 284 6 285 6 286 6 287 6 288 6 289 6 290 6 291 6 292 6 293 6 294 6 295 6 296 6 297 6 298 6 299 7 0 7 1 7 2 7 3 7 4 7 5 7 6 7 7 7 8 7 9 7 10 7 11 7 12 7 13 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 21 7 22 7 23 7 24 7 25 7 26 7 27 7 28 7 29 7 30 7 31 7 32 7 33 7 34 7 35 7 36 7 37 7 38 7 39 7 40 7 41 7 42 7 43 7 44 7 45 7 46 7 47 7 48 7 49 7 50 7 51 7 52 7 53 7 54 7 55 7 56 7 57 7 58 7 59 7 60 7 61 7 62 7 63 7 64 7 65 7 66 7 67 7 68 7 69 7 70 7 71 7 72 7 73 7 74 7 75 7 76 7 77 7 78 7 79 7 80 7 81 7 82 7 83 7 84 7 85 7 86 7 87 7 88 7 89 7 90 7 91 7 92 7 93 7 94 7 95 7 96 7 97 7 98 7 99 7 100 7 101 7 102 7 103 7 104 7 105 7 106 7 107 7 108 7 109 7 110 7 111 7 112 7 113 7 114 7 115 7 116 7 117 7 118 7 119 7 120 7 121 7 122 7 123 7 124 7 125 7 126 7 127 7 128 7 129 7 130 7 131 7 132 7 133 7 134 7 135 7 136 7 137 7 138 7 139 7 140 7 141 7 142 7 143 7 144 7 145 7 146 7 147 7 148 7 149 7 150 7 151 7 152 7 153 7 154 7 155 7 156 7 157 7 158 7 159 7 160 7 161 7 162 7 163 7 164 7 165 7 166 7 167 7 168 7 169 7 170 7 171 7 172 7 173 7 174 7 175 7 176 7 177 7 178 7 179 7 180 7 181 7 182 7 183 7 184 7 185 7 186 7 187 7 188 7 189 7 190 7 191 7 192 7 193 7 194 7 195 7 196 7 197 7 198 7 199 7 200 7 201 7 202 7 203 7 204 7 205 7 206 7 207 7 208 7 209 7 210 7 211 7 212 7 213 7 214 7 215 7 216 7 217 7 218 7 219 7 220 7 221 7 222 7 223 7 224 7 225 7 226 7 227 7 228 7 229 7 230 7 231 7 232 7 233 7 234 7 235 7 236 7 237 7 238 7 239 7 240 7 241 7 242 7 243 7 244 7 245 7 246 7 247 7 248 7 249 7 250 7 251 7 252 7 253 7 254 7 255 7 256 7 257 7 258 7 259 7 260 7 261 7 262 7 263 7 264 7 265 7 266 7 267 7 268 7 269 7 270 7 271 7 272 7 273 7 274 7 275 7 276 7 277 7 278 7 279 7 280 7 281 7 282 7 283 7 284 7 285 7 286 7 287 7 288 7 289 7 290 7 291 7 292 7 293 7 294 7 295 7 296 7 297 7 298 7 299 8 0 8 1 8 2 8 3 8 4 8 5 8 6 8 7 8 8 8 9 8 10 8 11 8 12 8 13 8 14 8 15 8 16 8 17 8 18 8 19 8 20 8 21 8 22 8 23 8 24 8 25 8 26 8 27 8 28 8 29 8 30 8 31 8 32 8 33 8 34 8 35 8 36 8 37 8 38 8 39 8 40 8 41 8 42 8 43 8 44 8 45 8 46 8 47 8 48 8 49 8 50 8 51 8 52 8 53 8 54 8 55 8 56 8 57 8 58 8 59 8 60 8 61 8 62 8 63 8 64 8 65 8 66 8 67 8 68 8 69 8 70 8 71 8 72 8 73 8 74 8 75 8 76 8 77 8 78 8 79 8 80 8 81 8 82 8 83 8 84 8 85 8 86 8 87 8 88 8 89 8 90 8 91 8 92 8 93 8 94 8 95 8 96 8 97 8 98 8 99 8 100 8 101 8 102 8 103 8 104 8 105 8 106 8 107 8 108 8 109 8 110 8 111 8 112 8 113 8 114 8 115 8 116 8 117 8 118 8 119 8 120 8 121 8 122 8 123 8 124 8 125 8 126 8 127 8 128 8 129 8 130 8 131 8 132 8 133 8 134 8 135 8 136 8 137 8 138 8 139 8 140 8 141 8 142 8 143 8 144 8 145 8 146 8 147 8 148 8 149 8 150 8 151 8 152 8 153 8 154 8 155 8 156 8 157 8 158 8 159 8 160 8 161 8 162 8 163 8 164 8 165 8 166 8 167 8 168 8 169 8 170 8 171 8 172 8 173 8 174 8 175 8 176 8 177 8 178 8 179 8 180 8 181 8 182 8 183 8 184 8 185 8 186 8 187 8 188 8 189 8 190 8 191 8 192 8 193 8 194 8 195 8 196 8 197 8 198 8 199 8 200 8 201 8 202 8 203 8 204 8 205 8 206 8 207 8 208 8 209 8 210 8 211 8 212 8 213 8 214 8 215 8 216 8 217 8 218 8 219 8 220 8 221 8 222 8 223 8 224 8 225 8 226 8 227 8 228 8 229 8 230 8 231 8 232 8 233 8 234 8 235 8 236 8 237 8 238 8 239 8 240 8 241 8 242 8 243 8 244 8 245 8 246 8 247 8 248 8 249 8 250 8 251 8 252 8 253 8 254 8 255 8 256 8 257 8 258 8 259 8 260 8 261 8 262 8 263 8 264 8 265 8 266 8 267 8 268 8 269 8 270 8 271 8 272 8 273 8 274 8 275 8 276 8 277 8 278 8 279 8 280 8 281 8 282 8 283 8 284 8 285 8 286 8 287 8 288 8 289 8 290 8 291 8 292 8 293 8 294 8 295 8 296 8 297 8 298 8 299 9 0 9 1 9 2 9 3 9 4 9 5 9 6 9 7 9 8 9 9 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 9 18 9 19 9 20 9 21 9 22 9 23 9 24 9 25 9 26 9 27 9 28 9 29 9 30 9 31 9 32 9 33 9 34 9 35 9 36 9 37 9 38 9 39 9 40 9 41 9 42 9 43 9 44 9 45 9 46 9 47 9 48 9 49 9 50 9 51 9 52 9 53 9 54 9 55 9 56 9 57 9 58 9 59 9 60 9 61 9 62 9 63 9 64 9 65 9 66 9 67 9 68 9 69 9 70 9 71 9 72 9 73 9 74 9 75 9 76 9 77 9 78 9 79 9 80 9 81 9 82 9 83 9 84 9 85 9 86 9 87 9 88 9 89 9 90 9 91 9 92 9 93 9 94 9 95 9 96 9 97 9 98 9 99 9 100 9 101 9 102 9 103 9 104 9 105 9 106 9 107 9 108 9 109 9 110 9 111 9 112 9 113 9 114 9 115 9 116 9 117 9 118 9 119 9 120 9 121 9 122 9 123 9 124 9 125 9 126 9 127 9 128 9 129 9 130 9 131 9 132 9 133 9 134 9 135 9 136 9 137 9 138 9 139 9 140 9 141 9 142 9 143 9 144 9 145 9 146 9 147 9 148 9 149 9 150 9 151 9 152 9 153 9 154 9 155 9 156 9 157 9 158 9 159 9 160 9 161 9 162 9 163 9 164 9 165 9 166 9 167 9 168 9 169 9 170 9 171 9 172 9 173 9 174 9 175 9 176 9 177 9 178 9 179 9 180 9 181 9 182 9 183 9 184 9 185 9 186 9 187 9 188 9 189 9 190 9 191 9 192 9 193 9 194 9 195 9 196 9 197 9 198 9 199 9 200 9 201 9 202 9 203 9 204 9 205 9 206 9 207 9 208 9 209 9 210 9 211 9 212 9 213 9 214 9 215 9 216 9 217 9 218 9 219 9 220 9 221 9 222 9 223 9 224 9 225 9 226 9 227 9 228 9 229 9 230 9 231 9 232 9 233 9 234 9 235 9 236 9 237 9 238 9 239 9 240 9 241 9 242 9 243 9 244 9 245 9 246 9 247 9 248 9 249 9 250 9 251 9 252 9 253 9 254 9 255 9 256 9 257 9 258 9 259 9 260 9 261 9 262 9 263 9 264 9 265 9 266 9 267 9 268 9 269 9 270 9 271 9 272 9 273 9 274 9 275 9 276 9 277 9 278 9 279 9 280 9 281 9 282 9 283 9 284 9 285 9 286 9 287 9 288 9 289 9 290 9 291 9 292 9 293 9 294 9 295 9 296 9 297 9 298 9 299 10 0 10 1 10 2 10 3 10 4 10 5 10 6 10 7 10 8 10 9 10 10 10 11 10 12 10 13 10 14 10 15 10 16 10 17 10 18 10 19 10 20 10 21 10 22 10 23 10 24 10 25 10 26 10 27 10 28 10 29 10 30 10 31 10 32 10 33 10 34 10 35 10 36 10 37 10 38 10 39 10 40 10 41 10 42 10 43 10 44 10 45 10 46 10 47 10 48 10 49 10 50 10 51 10 52 10 53 10 54 10 55 10 56 10 57 10 58 10 59 10 60 10 61 10 62 10 63 10 64 10 65 10 66 10 67 10 68 10 69 10 70 10 71 10 72 10 73 10 74 10 75 10 76 10 77 10 78 10 79 10 80 10 81 10 82 10 83 10 84 10 85 10 86 10 87 10 88 10 89 10 90 10 91 10 92 10 93 10 94 10 95 10 96 10 97 10 98 10 99 10 100 10 101 10 102 10 103 10 104 10 105 10 106 10 107 10 108 10 109 10 110 10 111 10 112 10 113 10 114 10 115 10 116 10 117 10 118 10 119 10 120 10 121 10 122 10 123 10 124 10 125 10 126 10 127 10 128 10 129 10 130 10 131 10 132 10 133 10 134 10 135 10 136 10 137 10 138 10 139 10 140 10 141 10 142 10 143 10 144 10 145 10 146 10 147 10 148 10 149 10 150 10 151 10 152 10 153 10 154 10 155 10 156 10 157 10 158 10 159 10 160 10 161 10 162 10 163 10 164 10 165 10 166 10 167 10 168 10 169 10 170 10 171 10 172 10 173 10 174 10 175 10 176 10 177 10 178 10 179 10 180 10 181 10 182 10 183 10 184 10 185 10 186 10 187 10 188 10 189 10 190 10 191 10 192 10 193 10 194 10 195 10 196 10 197 10 198 10 199 10 200 10 201 10 202 10 203 10 204 10 205 10 206 10 207 10 208 10 209 10 210 10 211 10 212 10 213 10 214 10 215 10 216 10 217 10 218 10 219 10 220 10 221 10 222 10 223 10 224 10 225 10 226 10 227 10 228 10 229 10 230 10 231 10 232 10 233 10 234 10 235 10 236 10 237 10 238 10 239 10 240 10 241 10 242 10 243 10 244 10 245 10 246 10 247 10 248 10 249 10 250 10 251 10 252 10 253 10 254 10 255 10 256 10 257 10 258 10 259 10 260 10 261 10 262 10 263 10 264 10 265 10 266 10 267 10 268 10 269 10 270 10 271 10 272 10 273 10 274 10 275 10 276 10 277 10 278 10 279 10 280 10 281 10 282 10 283 10 284 10 285 10 286 10 287 10 288 10 289 10 290 10 291 10 292 10 293 10 294 10 295 10 296 10 297 10 298 10 299 11 0 11 1 11 2 11 3 11 4 11 5 11 6 11 7 11 8 11 9 11 10 11 11 11 12 11 13 11 14 11 15 11 16 11 17 11 18 11 19 11 20 11 21 11 22 11 23 11 24 11 25 11 26 11 27 11 28 11 29 11 30 11 31 11 32 11 33 11 34 11 35 11 36 11 37 11 38 11 39 11 40 11 41 11 42 11 43 11 44 11 45 11 46 11 47 11 48 11 49 11 50 11 51 11 52 11 53 11 54 11 55 11 56 11 57 11 58 11 59 11 60 11 61 11 62 11 63 11 64 11 65 11 66 11 67 11 68 11 69 11 70 11 71 11 72 11 73 11 74 11 75 11 76 11 77 11 78 11 79 11 80 11 81 11 82 11 83 11 84 11 85 11 86 11 87 11 88 11 89 11 90 11 91 11 92 11 93 11 94 11 95 11 96 11 97 11 98 11 99 11 100 11 101 11 102 11 103 11 104 11 105 11 106 11 107 11 108 11 109 11 110 11 111 11 112 11 113 11 114 11 115 11 116 11 117 11 118 11 119 11 120 11 121 11 122 11 123 11 124 11 125 11 126 11 127 11 128 11 129 11 130 11 131 11 132 11 133 11 134 11 135 11 136 11 137 11 138 11 139 11 140 11 141 11 142 11 143 11 144 11 145 11 146 11 147 11 148 11 149 11 150 11 151 11 152 11 153 11 154 11 155 11 156 11 157 11 158 11 159 11 160 11 161 11 162 11 163 11 164 11 165 11 166 11 167 11 168 11 169 11 170 11 171 11 172 11 173 11 174 11 175 11 176 11 177 11 178 11 179 11 180 11 181 11 182 11 183 11 184 11 185 11 186 11 187 11 188 11 189 11 190 11 191 11 192 11 193 11 194 11 195 11 196 11 197 11 198 11 199 11 200 11 201 11 202 11 203 11 204 11 205 11 206 11 207 11 208 11 209 11 210 11 211 11 212 11 213 11 214 11 215 11 216 11 217 11 218 11 219 11 220 11 221 11 222 11 223 11 224 11 225 11 226 11 227 11 228 11 229 11 230 11 231 11 232 11 233 11 234 11 235 11 236 11 237 11 238 11 239 11 240 11 241 11 242 11 243 11 244 11 245 11 246 11 247 11 248 11 249 11 250 11 251 11 252 11 253 11 254 11 255 11 256 11 257 11 258 11 259 11 260 11 261 11 262 11 263 11 264 11 265 11 266 11 267 11 268 11 269 11 270 11 271 11 272 11 273 11 274 11 275 11 276 11 277 11 278 11 279 11 280 11 281 11 282 11 283 11 284 11 285 11 286 11 287 11 288 11 289 11 290 11 291 11 292 11 293 11 294 11 295 11 296 11 297 11 298 11 299 12 0 12 1 12 2 12 3 12 4 12 5 12 6 12 7 12 8 12 9 12 10 12 11 12 12 12 13 12 14 12 15 12 16 12 17 12 18 12 19 12 20 12 21 12 22 12 23 12 24 12 25 12 26 12 27 12 28 12 29 12 30 12 31 12 32 12 33 12 34 12 35 12 36 12 37 12 38 12 39 12 40 12 41 12 42 12 43 12 44 12 45 12 46 12 47 12 48 12 49 12 50 12 51 12 52 12 53 12 54 12 55 12 56 12 57 12 58 12 59 12 60 12 61 12 62 12 63 12 64 12 65 12 66 12 67 12 68 12 69 12 70 12 71 12 72 12 73 12 74 12 75 12 76 12 77 12 78 12 79 12 80 12 81 12 82 12 83 12 84 12 85 12 86 12 87 12 88 12 89 12 90 12 91 12 92 12 93 12 94 12 95 12 96 12 97 12 98 12 99 12 100 12 101 12 102 12 103 12 104 12 105 12 106 12 107 12 108 12 109 12 110 12 111 12 112 12 113 12 114 12 115 12 116 12 117 12 118 12 119 12 120 12 121 12 122 12 123 12 124 12 125 12 126 12 127 12 128 12 129 12 130 12 131 12 132 12 133 12 134 12 135 12 136 12 137 12 138 12 139 12 140 12 141 12 142 12 143 12 144 12 145 12 146 12 147 12 148 12 149 12 150 12 151 12 152 12 153 12 154 12 155 12 156 12 157 12 158 12 159 12 160 12 161 12 162 12 163 12 164 12 165 12 166 12 167 12 168 12 169 12 170 12 171 12 172 12 173 12 174 12 175 12 176 12 177 12 178 12 179 12 180 12 181 12 182 12 183 12 184 12 185 12 186 12 187 12 188 12 189 12 190 12 191 12 192 12 193 12 194 12 195 12 196 12 197 12 198 12 199 12 200 12 201 12 202 12 203 12 204 12 205 12 206 12 207 12 208 12 209 12 210 12 211 12 212 12 213 12 214 12 215 12 216 12 217 12 218 12 219 12 220 12 221 12 222 12 223 12 224 12 225 12 226 12 227 12 228 12 229 12 230 12 231 12 232 12 233 12 234 12 235 12 236 12 237 12 238 12 239 12 240 12 241 12 242 12 243 12 244 12 245 12 246 12 247 12 248 12 249 12 250 12 251 12 252 12 253 12 254 12 255 12 256 12 257 12 258 12 259 12 260 12 261 12 262 12 263 12 264 12 265 12 266 12 267 12 268 12 269 12 270 12 271 12 272 12 273 12 274 12 275 12 276 12 277 12 278 12 279 12 280 12 281 12 282 12 283 12 284 12 285 12 286 12 287 12 288 12 289 12 290 12 291 12 292 12 293 12 294 12 295 12 296 12 297 12 298 12 299 13 0 13 1 13 2 13 3 13 4 13 5 13 6 13 7 13 8 13 9 13 10 13 11 13 12 13 13 13 14 13 15 13 16 13 17 13 18 13 19 13 20 13 21 13 22 13 23 13 24 13 25 13 26 13 27 13 28 13 29 13 30 13 31 13 32 13 33 13 34 13 35 13 36 13 37 13 38 13 39 13 40 13 41 13 42 13 43 13 44 13 45 13 46 13 47 13 48 13 49 13 50 13 51 13 52 13 53 13 54 13 55 13 56 13 57 13 58 13 59 13 60 13 61 13 62 13 63 13 64 13 65 13 66 13 67 13 68 13 69 13 70 13 71 13 72 13 73 13 74 13 75 13 76 13 77 13 78 13 79 13 80 13 81 13 82 13 83 13 84 13 85 13 86 13 87 13 88 13 89 13 90 13 91 13 92 13 93 13 94 13 95 13 96 13 97 13 98 13 99 13 100 13 101 13 102 13 103 13 104 13 105 13 106 13 107 13 108 13 109 13 110 13 111 13 112 13 113 13 114 13 115 13 116 13 117 13 118 13 119 13 120 13 121 13 122 13 123 13 124 13 125 13 126 13 127 13 128 13 129 13 130 13 131 13 132 13 133 13 134 13 135 13 136 13 137 13 138 13 139 13 140 13 141 13 142 13 143 13 144 13 145 13 146 13 147 13 148 13 149 13 150 13 151 13 152 13 153 13 154 13 155 13 156 13 157 13 158 13 159 13 160 13 161 13 162 13 163 13 164 13 165 13 166 13 167 13 168 13 169 13 170 13 171 13 172 13 173 13 174 13 175 13 176 13 177 13 178 13 179 13 180 13 181 13 182 13 183 13 184 13 185 13 186 13 187 13 188 13 189 13 190 13 191 13 192 13 193 13 194 13 195 13 196 13 197 13 198 13 199 13 200 13 201 13 202 13 203 13 204 13 205 13 206 13 207 13 208 13 209 13 210 13 211 13 212 13 213 13 214 13 215 13 216 13 217 13 218 13 219 13 220 13 221 13 222 13 223 13 224 13 225 13 226 13 227 13 228 13 229 13 230 13 231 13 232 13 233 13 234 13 235 13 236 13 237 13 238 13 239 13 240 13 241 13 242 13 243 13 244 13 245 13 246 13 247 13 248 13 249 13 250 13 251 13 252 13 253 13 254 13 255 13 256 13 257 13 258 13 259 13 260 13 261 13 262 13 263 13 264 13 265 13 266 13 267 13 268 13 269 13 270 13 271 13 272 13 273 13 274 13 275 13 276 13 277 13 278 13 279 13 280 13 281 13 282 13 283 13 284 13 285 13 286 13 287 13 288 13 289 13 290 13 291 13 292 13 293 13 294 13 295 13 296 13 297 13 298 13 299 14 0 14 1 14 2 14 3 14 4 14 5 14 6 14 7 14 8 14 9 14 10 14 11 14 12 14 13 14 14 14 15 14 16 14 17 14 18 14 19 14 20 14 21 14 22 14 23 14 24 14 25 14 26 14 27 14 28 14 29 14 30 14 31 14 32 14 33 14 34 14 35 14 36 14 37 14 38 14 39 14 40 14 41 14 42 14 43 14 44 14 45 14 46 14 47 14 48 14 49 14 50 14 51 14 52 14 53 14 54 14 55 14 56 14 57 14 58 14 59 14 60 14 61 14 62 14 63 14 64 14 65 14 66 14 67 14 68 14 69 14 70 14 71 14 72 14 73 14 74 14 75 14 76 14 77 14 78 14 79 14 80 14 81 14 82 14 83 14 84 14 85 14 86 14 87 14 88 14 89 14 90 14 91 14 92 14 93 14 94 14 95 14 96 14 97 14 98 14 99 14 100 14 101 14 102 14 103 14 104 14 105 14 106 14 107 14 108 14 109 14 110 14 111 14 112 14 113 14 114 14 115 14 116 14 117 14 118 14 119 14 120 14 121 14 122 14 123 14 124 14 125 14 126 14 127 14 128 14 129 14 130 14 131 14 132 14 133 14 134 14 135 14 136 14 137 14 138 14 139 14 140 14 141 14 142 14 143 14 144 14 145 14 146 14 147 14 148 14 149 14 150 14 151 14 152 14 153 14 154 14 155 14 156 14 157 14 158 14 159 14 160 14 161 14 162 14 163 14 164 14 165 14 166 14 167 14 168 14 169 14 170 14 171 14 172 14 173 14 174 14 175 14 176 14 177 14 178 14 179 14 180 14 181 14 182 14 183 14 184 14 185 14 186 14 187 14 188 14 189 14 190 14 191 14 192 14 193 14 194 14 195 14 196 14 197 14 198 14 199 14 200 14 201 14 202 14 203 14 204 14 205 14 206 14 207 14 208 14 209 14 210 14 211 14 212 14 213 14 214 14 215 14 216 14 217 14 218 14 219 14 220 14 221 14 222 14 223 14 224 14 225 14 226 14 227 14 228 14 229 14 230 14 231 14 232 14 233 14 234 14 235 14 236 14 237 14 238 14 239 14 240 14 241 14 242 14 243 14 244 14 245 14 246 14 247 14 248 14 249 14 250 14 251 14 252 14 253 14 254 14 255 14 256 14 257 14 258 14 259 14 260 14 261 14 262 14 263 14 264 14 265 14 266 14 267 14 268 14 269 14 270 14 271 14 272 14 273 14 274 14 275 14 276 14 277 14 278 14 279 14 280 14 281 14 282 14 283 14 284 14 285 14 286 14 287 14 288 14 289 14 290 14 291 14 292 14 293 14 294 14 295 14 296 14 297 14 298 14 299 15 0 15 1 15 2 15 3 15 4 15 5 15 6 15 7 15 8 15 9 15 10 15 11 15 12 15 13 15 14 15 15 15 16 15 17 15 18 15 19 15 20 15 21 15 22 15 23 15 24 15 25 15 26 15 27 15 28 15 29 15 30 15 31 15 32 15 33 15 34 15 35 15 36 15 37 15 38 15 39 15 40 15 41 15 42 15 43 15 44 15 45 15 46 15 47 15 48 15 49 15 50 15 51 15 52 15 53 15 54 15 55 15 56 15 57 15 58 15 59 15 60 15 61 15 62 15 63 15 64 15 65 15 66 15 67 15 68 15 69 15 70 15 71 15 72 15 73 15 74 15 75 15 76 15 77 15 78 15 79 15 80 15 81 15 82 15 83 15 84 15 85 15 86 15 87 15 88 15 89 15 90 15 91 15 92 15 93 15 94 15 95 15 96 15 97 15 98 15 99 15 100 15 101 15 102 15 103 15 104 15 105 15 106 15 107 15 108 15 109 15 110 15 111 15 112 15 113 15 114 15 115 15 116 15 117 15 118 15 119 15 120 15 121 15 122 15 123 15 124 15 125 15 126 15 127 15 128 15 129 15 130 15 131 15 132 15 133 15 134 15 135 15 136 15 137 15 138 15 139 15 140 15 141 15 142 15 143 15 144 15 145 15 146 15 147 15 148 15 149 15 150 15 151 15 152 15 153 15 154 15 155 15 156 15 157 15 158 15 159 15 160 15 161 15 162 15 163 15 164 15 165 15 166 15 167 15 168 15 169 15 170 15 171 15 172 15 173 15 174 15 175 15 176 15 177 15 178 15 179 15 180 15 181 15 182 15 183 15 184 15 185 15 186 15 187 15 188 15 189 15 190 15 191 15 192 15 193 15 194 15 195 15 196 15 197 15 198 15 199 15 200 15 201 15 202 15 203 15 204 15 205 15 206 15 207 15 208 15 209 15 210 15 211 15 212 15 213 15 214 15 215 15 216 15 217 15 218 15 219 15 220 15 221 15 222 15 223 15 224 15 225 15 226 15 227 15 228 15 229 15 230 15 231 15 232 15 233 15 234 15 235 15 236 15 237 15 238 15 239 15 240 15 241 15 242 15 243 15 244 15 245 15 246 15 247 15 248 15 249 15 250 15 251 15 252 15 253 15 254 15 255 15 256 15 257 15 258 15 259 15 260 15 261 15 262 15 263 15 264 15 265 15 266 15 267 15 268 15 269 15 270 15 271 15 272 15 273 15 274 15 275 15 276 15 277 15 278 15 279 15 280 15 281 15 282 15 283 15 284 15 285 15 286 15 287 15 288 15 289 15 290 15 291 15 292 15 293 15 294 15 295 15 296 15 297 15 298 15 299 16 0 16 1 16 2 16 3 16 4 16 5 16 6 16 7 16 8 16 9 16 10 16 11 16 12 16 13 16 14 16 15 16 16 16 17 16 18 16 19 16 20 16 21 16 22 16 23 16 24 16 25 16 26 16 27 16 28 16 29 16 30 16 31 16 32 16 33 16 34 16 35 16 36 16 37 16 38 16 39 16 40 16 41 16 42 16 43 16 44 16 45 16 46 16 47 16 48 16 49 16 50 16 51 16 52 16 53 16 54 16 55 16 56 16 57 16 58 16 59 16 60 16 61 16 62 16 63 16 64 16 65 16 66 16 67 16 68 16 69 16 70 16 71 16 72 16 73 16 74 16 75 16 76 16 77 16 78 16 79 16 80 16 81 16 82 16 83 16 84 16 85 16 86 16 87 16 88 16 89 16 90 16 91 16 92 16 93 16 94 16 95 16 96 16 97 16 98 16 99 16 100 16 101 16 102 16 103 16 104 16 105 16 106 16 107 16 108 16 109 16 110 16 111 16 112 16 113 16 114 16 115 16 116 16 117 16 118 16 119 16 120 16 121 16 122 16 123 16 124 16 125 16 126 16 127 16 128 16 129 16 130 16 131 16 132 16 133 16 134 16 135 16 136 16 137 16 138 16 139 16 140 16 141 16 142 16 143 16 144 16 145 16 146 16 147 16 148 16 149 16 150 16 151 16 152 16 153 16 154 16 155 16 156 16 157 16 158 16 159 16 160 16 161 16 162 16 163 16 164 16 165 16 166 16 167 16 168 16 169 16 170 16 171 16 172 16 173 16 174 16 175 16 176 16 177 16 178 16 179 16 180 16 181 16 182 16 183 16 184 16 185 16 186 16 187 16 188 16 189 16 190 16 191 16 192 16 193 16 194 16 195 16 196 16 197 16 198 16 199 16 200 16 201 16 202 16 203 16 204 16 205 16 206 16 207 16 208 16 209 16 210 16 211 16 212 16 213 16 214 16 215 16 216 16 217 16 218 16 219 16 220 16 221 16 222 16 223 16 224 16 225 16 226 16 227 16 228 16 229 16 230 16 231 16 232 16 233 16 234 16 235 16 236 16 237 16 238 16 239 16 240 16 241 16 242 16 243 16 244 16 245 16 246 16 247 16 248 16 249 16 250 16 251 16 252 16 253 16 254 16 255 16 256 16 257 16 258 16 259 16 260 16 261 16 262 16 263 16 264 16 265 16 266 16 267 16 268 16 269 16 270 16 271 16 272 16 273 16 274 16 275 16 276 16 277 16 278 16 279 16 280 16 281 16 282 16 283 16 284 16 285 16 286 16 287 16 288 16 289 16 290 16 291 16 292 16 293 16 294 16 295 16 296 16 297 16 298 16 299 17 0 17 1 17 2 17 3 17 4 17 5 17 6 17 7 17 8 17 9 17 10 17 11 17 12 17 13 17 14 17 15 17 16 17 17 17 18 17 19 17 20 17 21 17 22 17 23 17 24 17 25 17 26 17 27 17 28 17 29 17 30 17 31 17 32 17 33 17 34 17 35 17 36 17 37 17 38 17 39 17 40 17 41 17 42 17 43 17 44 17 45 17 46 17 47 17 48 17 49 17 50 17 51 17 52 17 53 17 54 17 55 17 56 17 57 17 58 17 59 17 60 17 61 17 62 17 63 17 64 17 65 17 66 17 67 17 68 17 69 17 70 17 71 17 72 17 73 17 74 17 75 17 76 17 77 17 78 17 79 17 80 17 81 17 82 17 83 17 84 17 85 17 86 17 87 17 88 17 89 17 90 17 91 17 92 17 93 17 94 17 95 17 96 17 97 17 98 17 99 17 100 17 101 17 102 17 103 17 104 17 105 17 106 17 107 17 108 17 109 17 110 17 111 17 112 17 113 17 114 17 115 17 116 17 117 17 118 17 119 17 120 17 121 17 122 17 123 17 124 17 125 17 126 17 127 17 128 17 129 17 130 17 131 17 132 17 133 17 134 17 135 17 136 17 137 17 138 17 139 17 140 17 141 17 142 17 143 17 144 17 145 17 146 17 147 17 148 17 149 17 150 17 151 17 152 17 153 17 154 17 155 17 156 17 157 17 158 17 159 17 160 17 161 17 162 17 163 17 164 17 165 17 166 17 167 17 168 17 169 17 170 17 171 17 172 17 173 17 174 17 175 17 176 17 177 17 178 17 179 17 180 17 181 17 182 17 183 17 184 17 185 17 186 17 187 17 188 17 189 17 190 17 191 17 192 17 193 17 194 17 195 17 196 17 197 17 198 17 199 17 200 17 201 17 202 17 203 17 204 17 205 17 206 17 207 17 208 17 209 17 210 17 211 17 212 17 213 17 214 17 215 17 216 17 217 17 218 17 219 17 220 17 221 17 222 17 223 17 224 17 225 17 226 17 227 17 228 17 229 17 230 17 231 17 232 17 233 17 234 17 235 17 236 17 237 17 238 17 239 17 240 17 241 17 242 17 243 17 244 17 245 17 246 17 247 17 248 17 249 17 250 17 251 17 252 17 253 17 254 17 255 17 256 17 257 17 258 17 259 17 260 17 261 17 262 17 263 17 264 17 265 17 266 17 267 17 268 17 269 17 270 17 271 17 272 17 273 17 274 17 275 17 276 17 277 17 278 17 279 17 280 17 281 17 282 17 283 17 284 17 285 17 286 17 287 17 288 17 289 17 290 17 291 17 292 17 293 17 294 17 295 17 296 17 297 17 298 17 299 18 0 18 1 18 2 18 3 18 4 18 5 18 6 18 7 18 8 18 9 18 10 18 11 18 12 18 13 18 14 18 15 18 16 18 17 18 18 18 19 18 20 18 21 18 22 18 23 18 24 18 25 18 26 18 27 18 28 18 29 18 30 18 31 18 32 18 33 18 34 18 35 18 36 18 37 18 38 18 39 18 40 18 41 18 42 18 43 18 44 18 45 18 46 18 47 18 48 18 49 18 50 18 51 18 52 18 53 18 54 18 55 18 56 18 57 18 58 18 59 18 60 18 61 18 62 18 63 18 64 18 65 18 66 18 67 18 68 18 69 18 70 18 71 18 72 18 73 18 74 18 75 18 76 18 77 18 78 18 79 18 80 18 81 18 82 18 83 18 84 18 85 18 86 18 87 18 88 18 89 18 90 18 91 18 92 18 93 18 94 18 95 18 96 18 97 18 98 18 99 18 100 18 101 18 102 18 103 18 104 18 105 18 106 18 107 18 108 18 109 18 110 18 111 18 112 18 113 18 114 18 115 18 116 18 117 18 118 18 119 18 120 18 121 18 122 18 123 18 124 18 125 18 126 18 127 18 128 18 129 18 130 18 131 18 132 18 133 18 134 18 135 18 136 18 137 18 138 18 139 18 140 18 141 18 142 18 143 18 144 18 145 18 146 18 147 18 148 18 149 18 150 18 151 18 152 18 153 18 154 18 155 18 156 18 157 18 158 18 159 18 160 18 161 18 162 18 163 18 164 18 165 18 166 18 167 18 168 18 169 18 170 18 171 18 172 18 173 18 174 18 175 18 176 18 177 18 178 18 179 18 180 18 181 18 182 18 183 18 184 18 185 18 186 18 187 18 188 18 189 18 190 18 191 18 192 18 193 18 194 18 195 18 196 18 197 18 198 18 199 18 200 18 201 18 202 18 203 18 204 18 205 18 206 18 207 18 208 18 209 18 210 18 211 18 212 18 213 18 214 18 215 18 216 18 217 18 218 18 219 18 220 18 221 18 222 18 223 18 224 18 225 18 226 18 227 18 228 18 229 18 230 18 231 18 232 18 233 18 234 18 235 18 236 18 237 18 238 18 239 18 240 18 241 18 242 18 243 18 244 18 245 18 246 18 247 18 248 18 249 18 250 18 251 18 252 18 253 18 254 18 255 18 256 18 257 18 258 18 259 18 260 18 261 18 262 18 263 18 264 18 265 18 266 18 267 18 268 18 269 18 270 18 271 18 272 18 273 18 274 18 275 18 276 18 277 18 278 18 279 18 280 18 281 18 282 18 283 18 284 18 285 18 286 18 287 18 288 18 289 18 290 18 291 18 292 18 293 18 294 18 295 18 296 18 297 18 298 18 299 19 0 19 1 19 2 19 3 19 4 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 19 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 28 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 36 19 37 19 38 19 39 19 40 19 41 19 42 19 43 19 44 19 45 19 46 19 47 19 48 19 49 19 50 19 51 19 52 19 53 19 54 19 55 19 56 19 57 19 58 19 59 19 60 19 61 19 62 19 63 19 64 19 65 19 66 19 67 19 68 19 69 19 70 19 71 19 72 19 73 19 74 19 75 19 76 19 77 19 78 19 79 19 80 19 81 19 82 19 83 19 84 19 85 19 86 19 87 19 88 19 89 19 90 19 91 19 92 19 93 19 94 19 95 19 96 19 97 19 98 19 99 19 100 19 101 19 102 19 103 19 104 19 105 19 106 19 107 19 108 19 109 19 110 19 111 19 112 19 113 19 114 19 115 19 116 19 117 19 118 19 119 19 120 19 121 19 122 19 123 19 124 19 125 19 126 19 127 19 128 19 129 19 130 19 131 19 132 19 133 19 134 19 135 19 136 19 137 19 138 19 139 19 140 19 141 19 142 19 143 19 144 19 145 19 146 19 147 19 148 19 149 19 150 19 151 19 152 19 153 19 154 19 155 19 156 19 157 19 158 19 159 19 160 19 161 19 162 19 163 19 164 19 165 19 166 19 167 19 168 19 169 19 170 19 171 19 172 19 173 19 174 19 175 19 176 19 177 19 178 19 179 19 180 19 181 19 182 19 183 19 184 19 185 19 186 19 187 19 188 19 189 19 190 19 191 19 192 19 193 19 194 19 195 19 196 19 197 19 198 19 199 19 200 19 201 19 202 19 203 19 204 19 205 19 206 19 207 19 208 19 209 19 210 19 211 19 212 19 213 19 214 19 215 19 216 19 217 19 218 19 219 19 220 19 221 19 222 19 223 19 224 19 225 19 226 19 227 19 228 19 229 19 230 19 231 19 232 19 233 19 234 19 235 19 236 19 237 19 238 19 239 19 240 19 241 19 242 19 243 19 244 19 245 19 246 19 247 19 248 19 249 19 250 19 251 19 252 19 253 19 254 19 255 19 256 19 257 19 258 19 259 19 260 19 261 19 262 19 263 19 264 19 265 19 266 19 267 19 268 19 269 19 270 19 271 19 272 19 273 19 274 19 275 19 276 19 277 19 278 19 279 19 280 19 281 19 282 19 283 19 284 19 285 19 286 19 287 19 288 19 289 19 290 19 291 19 292 19 293 19 294 19 295 19 296 19 297 19 298 19 299 20 0 20 1 20 2 20 3 20 4 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 19 20 20 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 28 20 29 20 30 20 31 20 32 20 33 20 34 20 35 20 36 20 37 20 38 20 39 20 40 20 41 20 42 20 43 20 44 20 45 20 46 20 47 20 48 20 49 20 50 20 51 20 52 20 53 20 54 20 55 20 56 20 57 20 58 20 59 20 60 20 61 20 62 20 63 20 64 20 65 20 66 20 67 20 68 20 69 20 70 20 71 20 72 20 73 20 74 20 75 20 76 20 77 20 78 20 79 20 80 20 81 20 82 20 83 20 84 20 85 20 86 20 87 20 88 20 89 20 90 20 91 20 92 20 93 20 94 20 95 20 96 20 97 20 98 20 99 20 100 20 101 20 102 20 103 20 104 20 105 20 106 20 107 20 108 20 109 20 110 20 111 20 112 20 113 20 114 20 115 20 116 20 117 20 118 20 119 20 120 20 121 20 122 20 123 20 124 20 125 20 126 20 127 20 128 20 129 20 130 20 131 20 132 20 133 20 134 20 135 20 136 20 137 20 138 20 139 20 140 20 141 20 142 20 143 20 144 20 145 20 146 20 147 20 148 20 149 20 150 20 151 20 152 20 153 20 154 20 155 20 156 20 157 20 158 20 159 20 160 20 161 20 162 20 163 20 164 20 165 20 166 20 167 20 168 20 169 20 170 20 171 20 172 20 173 20 174 20 175 20 176 20 177 20 178 20 179 20 180 20 181 20 182 20 183 20 184 20 185 20 186 20 187 20 188 20 189 20 190 20 191 20 192 20 193 20 194 20 195 20 196 20 197 20 198 20 199 20 200 20 201 20 202 20 203 20 204 20 205 20 206 20 207 20 208 20 209 20 210 20 211 20 212 20 213 20 214 20 215 20 216 20 217 20 218 20 219 20 220 20 221 20 222 20 223 20 224 20 225 20 226 20 227 20 228 20 229 20 230 20 231 20 232 20 233 20 234 20 235 20 236 20 237 20 238 20 239 20 240 20 241 20 242 20 243 20 244 20 245 20 246 20 247 20 248 20 249 20 250 20 251 20 252 20 253 20 254 20 255 20 256 20 257 20 258 20 259 20 260 20 261 20 262 20 263 20 264 20 265 20 266 20 267 20 268 20 269 20 270 20 271 20 272 20 273 20 274 20 275 20 276 20 277 20 278 20 279 20 280 20 281 20 282 20 283 20 284 20 285 20 286 20 287 20 288 20 289 20 290 20 291 20 292 20 293 20 294 20 295 20 296 20 297 20 298 20 299 21 0 21 1 21 2 21 3 21 4 21 5 21 6 21 7 21 8 21 9 21 10 21 11 21 12 21 13 21 14 21 15 21 16 21 17 21 18 21 19 21 20 21 21 21 22 21 23 21 24 21 25 21 26 21 27 21 28 21 29 21 30 21 31 21 32 21 33 21 34 21 35 21 36 21 37 21 38 21 39 21 40 21 41 21 42 21 43 21 44 21 45 21 46 21 47 21 48 21 49 21 50 21 51 21 52 21 53 21 54 21 55 21 56 21 57 21 58 21 59 21 60 21 61 21 62 21 63 21 64 21 65 21 66 21 67 21 68 21 69 21 70 21 71 21 72 21 73 21 74 21 75 21 76 21 77 21 78 21 79 21 80 21 81 21 82 21 83 21 84 21 85 21 86 21 87 21 88 21 89 21 90 21 91 21 92 21 93 21 94 21 95 21 96 21 97 21 98 21 99 21 100 21 101 21 102 21 103 21 104 21 105 21 106 21 107 21 108 21 109 21 110 21 111 21 112 21 113 21 114 21 115 21 116 21 117 21 118 21 119 21 120 21 121 21 122 21 123 21 124 21 125 21 126 21 127 21 128 21 129 21 130 21 131 21 132 21 133 21 134 21 135 21 136 21 137 21 138 21 139 21 140 21 141 21 142 21 143 21 144 21 145 21 146 21 147 21 148 21 149 21 150 21 151 21 152 21 153 21 154 21 155 21 156 21 157 21 158 21 159 21 160 21 161 21 162 21 163 21 164 21 165 21 166 21 167 21 168 21 169 21 170 21 171 21 172 21 173 21 174 21 175 21 176 21 177 21 178 21 179 21 180 21 181 21 182 21 183 21 184 21 185 21 186 21 187 21 188 21 189 21 190 21 191 21 192 21 193 21 194 21 195 21 196 21 197 21 198 21 199 21 200 21 201 21 202 21 203 21 204 21 205 21 206 21 207 21 208 21 209 21 210 21 211 21 212 21 213 21 214 21 215 21 216 21 217 21 218 21 219 21 220 21 221 21 222 21 223 21 224 21 225 21 226 21 227 21 228 21 229 21 230 21 231 21 232 21 233 21 234 21 235 21 236 21 237 21 238 21 239 21 240 21 241 21 242 21 243 21 244 21 245 21 246 21 247 21 248 21 249 21 250 21 251 21 252 21 253 21 254 21 255 21 256 21 257 21 258 21 259 21 260 21 261 21 262 21 263 21 264 21 265 21 266 21 267 21 268 21 269 21 270 21 271 21 272 21 273 21 274 21 275 21 276 21 277 21 278 21 279 21 280 21 281 21 282 21 283 21 284 21 285 21 286 21 287 21 288 21 289 21 290 21 291 21 292 21 293 21 294 21 295 21 296 21 297 21 298 21 299 22 0 22 1 22 2 22 3 22 4 22 5 22 6 22 7 22 8 22 9 22 10 22 11 22 12 22 13 22 14 22 15 22 16 22 17 22 18 22 19 22 20 22 21 22 22 22 23 22 24 22 25 22 26 22 27 22 28 22 29 22 30 22 31 22 32 22 33 22 34 22 35 22 36 22 37 22 38 22 39 22 40 22 41 22 42 22 43 22 44 22 45 22 46 22 47 22 48 22 49 22 50 22 51 22 52 22 53 22 54 22 55 22 56 22 57 22 58 22 59 22 60 22 61 22 62 22 63 22 64 22 65 22 66 22 67 22 68 22 69 22 70 22 71 22 72 22 73 22 74 22 75 22 76 22 77 22 78 22 79 22 80 22 81 22 82 22 83 22 84 22 85 22 86 22 87 22 88 22 89 22 90 22 91 22 92 22 93 22 94 22 95 22 96 22 97 22 98 22 99 22 100 22 101 22 102 22 103 22 104 22 105 22 106 22 107 22 108 22 109 22 110 22 111 22 112 22 113 22 114 22 115 22 116 22 117 22 118 22 119 22 120 22 121 22 122 22 123 22 124 22 125 22 126 22 127 22 128 22 129 22 130 22 131 22 132 22 133 22 134 22 135 22 136 22 137 22 138 22 139 22 140 22 141 22 142 22 143 22 144 22 145 22 146 22 147 22 148 22 149 22 150 22 151 22 152 22 153 22 154 22 155 22 156 22 157 22 158 22 159 22 160 22 161 22 162 22 163 22 164 22 165 22 166 22 167 22 168 22 169 22 170 22 171 22 172 22 173 22 174 22 175 22 176 22 177 22 178 22 179 22 180 22 181 22 182 22 183 22 184 22 185 22 186 22 187 22 188 22 189 22 190 22 191 22 192 22 193 22 194 22 195 22 196 22 197 22 198 22 199 22 200 22 201 22 202 22 203 22 204 22 205 22 206 22 207 22 208 22 209 22 210 22 211 22 212 22 213 22 214 22 215 22 216 22 217 22 218 22 219 22 220 22 221 22 222 22 223 22 224 22 225 22 226 22 227 22 228 22 229 22 230 22 231 22 232 22 233 22 234 22 235 22 236 22 237 22 238 22 239 22 240 22 241 22 242 22 243 22 244 22 245 22 246 22 247 22 248 22 249 22 250 22 251 22 252 22 253 22 254 22 255 22 256 22 257 22 258 22 259 22 260 22 261 22 262 22 263 22 264 22 265 22 266 22 267 22 268 22 269 22 270 22 271 22 272 22 273 22 274 22 275 22 276 22 277 22 278 22 279 22 280 22 281 22 282 22 283 22 284 22 285 22 286 22 287 22 288 22 289 22 290 22 291 22 292 22 293 22 294 22 295 22 296 22 297 22 298 22 299 23 0 23 1 23 2 23 3 23 4 23 5 23 6 23 7 23 8 23 9 23 10 23 11 23 12 23 13 23 14 23 15 23 16 23 17 23 18 23 19 23 20 23 21 23 22 23 23 23 24 23 25 23 26 23 27 23 28 23 29 23 30 23 31 23 32 23 33 23 34 23 35 23 36 23 37 23 38 23 39 23 40 23 41 23 42 23 43 23 44 23 45 23 46 23 47 23 48 23 49 23 50 23 51 23 52 23 53 23 54 23 55 23 56 23 57 23 58 23 59 23 60 23 61 23 62 23 63 23 64 23 65 23 66 23 67 23 68 23 69 23 70 23 71 23 72 23 73 23 74 23 75 23 76 23 77 23 78 23 79 23 80 23 81 23 82 23 83 23 84 23 85 23 86 23 87 23 88 23 89 23 90 23 91 23 92 23 93 23 94 23 95 23 96 23 97 23 98 23 99 23 100 23 101 23 102 23 103 23 104 23 105 23 106 23 107 23 108 23 109 23 110 23 111 23 112 23 113 23 114 23 115 23 116 23 117 23 118 23 119 23 120 23 121 23 122 23 123 23 124 23 125 23 126 23 127 23 128 23 129 23 130 23 131 23 132 23 133 23 134 23 135 23 136 23 137 23 138 23 139 23 140 23 141 23 142 23 143 23 144 23 145 23 146 23 147 23 148 23 149 23 150 23 151 23 152 23 153 23 154 23 155 23 156 23 157 23 158 23 159 23 160 23 161 23 162 23 163 23 164 23 165 23 166 23 167 23 168 23 169 23 170 23 171 23 172 23 173 23 174 23 175 23 176 23 177 23 178 23 179 23 180 23 181 23 182 23 183 23 184 23 185 23 186 23 187 23 188 23 189 23 190 23 191 23 192 23 193 23 194 23 195 23 196 23 197 23 198 23 199 23 200 23 201 23 202 23 203 23 204 23 205 23 206 23 207 23 208 23 209 23 210 23 211 23 212 23 213 23 214 23 215 23 216 23 217 23 218 23 219 23 220 23 221 23 222 23 223 23 224 23 225 23 226 23 227 23 228 23 229 23 230 23 231 23 232 23 233 23 234 23 235 23 236 23 237 23 238 23 239 23 240 23 241 23 242 23 243 23 244 23 245 23 246 23 247 23 248 23 249 23 250 23 251 23 252 23 253 23 254 23 255 23 256 23 257 23 258 23 259 23 260 23 261 23 262 23 263 23 264 23 265 23 266 23 267 23 268 23 269 23 270 23 271 23 272 23 273 23 274 23 275 23 276 23 277 23 278 23 279 23 280 23 281 23 282 23 283 23 284 23 285 23 286 23 287 23 288 23 289 23 290 23 291 23 292 23 293 23 294 23 295 23 296 23 297 23 298 23 299 24 0 24 1 24 2 24 3 24 4 24 5 24 6 24 7 24 8 24 9 24 10 24 11 24 12 24 13 24 14 24 15 24 16 24 17 24 18 24 19 24 20 24 21 24 22 24 23 24 24 24 25 24 26 24 27 24 28 24 29 24 30 24 31 24 32 24 33 24 34 24 35 24 36 24 37 24 38 24 39 24 40 24 41 24 42 24 43 24 44 24 45 24 46 24 47 24 48 24 49 24 50 24 51 24 52 24 53 24 54 24 55 24 56 24 57 24 58 24 59 24 60 24 61 24 62 24 63 24 64 24 65 24 66 24 67 24 68 24 69 24 70 24 71 24 72 24 73 24 74 24 75 24 76 24 77 24 78 24 79 24 80 24 81 24 82 24 83 24 84 24 85 24 86 24 87 24 88 24 89 24 90 24 91 24 92 24 93 24 94 24 95 24 96 24 97 24 98 24 99 24 100 24 101 24 102 24 103 24 104 24 105 24 106 24 107 24 108 24 109 24 110 24 111 24 112 24 113 24 114 24 115 24 116 24 117 24 118 24 119 24 120 24 121 24 122 24 123 24 124 24 125 24 126 24 127 24 128 24 129 24 130 24 131 24 132 24 133 24 134 24 135 24 136 24 137 24 138 24 139 24 140 24 141 24 142 24 143 24 144 24 145 24 146 24 147 24 148 24 149 24 150 24 151 24 152 24 153 24 154 24 155 24 156 24 157 24 158 24 159 24 160 24 161 24 162 24 163 24 164 24 165 24 166 24 167 24 168 24 169 24 170 24 171 24 172 24 173 24 174 24 175 24 176 24 177 24 178 24 179 24 180 24 181 24 182 24 183 24 184 24 185 24 186 24 187 24 188 24 189 24 190 24 191 24 192 24 193 24 194 24 195 24 196 24 197 24 198 24 199 24 200 24 201 24 202 24 203 24 204 24 205 24 206 24 207 24 208 24 209 24 210 24 211 24 212 24 213 24 214 24 215 24 216 24 217 24 218 24 219 24 220 24 221 24 222 24 223 24 224 24 225 24 226 24 227 24 228 24 229 24 230 24 231 24 232 24 233 24 234 24 235 24 236 24 237 24 238 24 239 24 240 24 241 24 242 24 243 24 244 24 245 24 246 24 247 24 248 24 249 24 250 24 251 24 252 24 253 24 254 24 255 24 256 24 257 24 258 24 259 24 260 24 261 24 262 24 263 24 264 24 265 24 266 24 267 24 268 24 269 24 270 24 271 24 272 24 273 24 274 24 275 24 276 24 277 24 278 24 279 24 280 24 281 24 282 24 283 24 284 24 285 24 286 24 287 24 288 24 289 24 290 24 291 24 292 24 293 24 294 24 295 24 296 24 297 24 298 24 299 25 0 25 1 25 2 25 3 25 4 25 5 25 6 25 7 25 8 25 9 25 10 25 11 25 12 25 13 25 14 25 15 25 16 25 17 25 18 25 19 25 20 25 21 25 22 25 23 25 24 25 25 25 26 25 27 25 28 25 29 25 30 25 31 25 32 25 33 25 34 25 35 25 36 25 37 25 38 25 39 25 40 25 41 25 42 25 43 25 44 25 45 25 46 25 47 25 48 25 49 25 50 25 51 25 52 25 53 25 54 25 55 25 56 25 57 25 58 25 59 25 60 25 61 25 62 25 63 25 64 25 65 25 66 25 67 25 68 25 69 25 70 25 71 25 72 25 73 25 74 25 75 25 76 25 77 25 78 25 79 25 80 25 81 25 82 25 83 25 84 25 85 25 86 25 87 25 88 25 89 25 90 25 91 25 92 25 93 25 94 25 95 25 96 25 97 25 98 25 99 25 100 25 101 25 102 25 103 25 104 25 105 25 106 25 107 25 108 25 109 25 110 25 111 25 112 25 113 25 114 25 115 25 116 25 117 25 118 25 119 25 120 25 121 25 122 25 123 25 124 25 125 25 126 25 127 25 128 25 129 25 130 25 131 25 132 25 133 25 134 25 135 25 136 25 137 25 138 25 139 25 140 25 141 25 142 25 143 25 144 25 145 25 146 25 147 25 148 25 149 25 150 25 151 25 152 25 153 25 154 25 155 25 156 25 157 25 158 25 159 25 160 25 161 25 162 25 163 25 164 25 165 25 166 25 167 25 168 25 169 25 170 25 171 25 172 25 173 25 174 25 175 25 176 25 177 25 178 25 179 25 180 25 181 25 182 25 183 25 184 25 185 25 186 25 187 25 188 25 189 25 190 25 191 25 192 25 193 25 194 25 195 25 196 25 197 25 198 25 199 25 200 25 201 25 202 25 203 25 204 25 205 25 206 25 207 25 208 25 209 25 210 25 211 25 212 25 213 25 214 25 215 25 216 25 217 25 218 25 219 25 220 25 221 25 222 25 223 25 224 25 225 25 226 25 227 25 228 25 229 25 230 25 231 25 232 25 233 25 234 25 235 25 236 25 237 25 238 25 239 25 240 25 241 25 242 25 243 25 244 25 245 25 246 25 247 25 248 25 249 25 250 25 251 25 252 25 253 25 254 25 255 25 256 25 257 25 258 25 259 25 260 25 261 25 262 25 263 25 264 25 265 25 266 25 267 25 268 25 269 25 270 25 271 25 272 25 273 25 274 25 275 25 276 25 277 25 278 25 279 25 280 25 281 25 282 25 283 25 284 25 285 25 286 25 287 25 288 25 289 25 290 25 291 25 292 25 293 25 294 25 295 25 296 25 297 25 298 25 299 26 0 26 1 26 2 26 3 26 4 26 5 26 6 26 7 26 8 26 9 26 10 26 11 26 12 26 13 26 14 26 15 26 16 26 17 26 18 26 19 26 20 26 21 26 22 26 23 26 24 26 25 26 26 26 27 26 28 26 29 26 30 26 31 26 32 26 33 26 34 26 35 26 36 26 37 26 38 26 39 26 40 26 41 26 42 26 43 26 44 26 45 26 46 26 47 26 48 26 49 26 50 26 51 26 52 26 53 26 54 26 55 26 56 26 57 26 58 26 59 26 60 26 61 26 62 26 63 26 64 26 65 26 66 26 67 26 68 26 69 26 70 26 71 26 72 26 73 26 74 26 75 26 76 26 77 26 78 26 79 26 80 26 81 26 82 26 83 26 84 26 85 26 86 26 87 26 88 26 89 26 90 26 91 26 92 26 93 26 94 26 95 26 96 26 97 26 98 26 99 26 100 26 101 26 102 26 103 26 104 26 105 26 106 26 107 26 108 26 109 26 110 26 111 26 112 26 113 26 114 26 115 26 116 26 117 26 118 26 119 26 120 26 121 26 122 26 123 26 124 26 125 26 126 26 127 26 128 26 129 26 130 26 131 26 132 26 133 26 134 26 135 26 136 26 137 26 138 26 139 26 140 26 141 26 142 26 143 26 144 26 145 26 146 26 147 26 148 26 149 26 150 26 151 26 152 26 153 26 154 26 155 26 156 26 157 26 158 26 159 26 160 26 161 26 162 26 163 26 164 26 165 26 166 26 167 26 168 26 169 26 170 26 171 26 172 26 173 26 174 26 175 26 176 26 177 26 178 26 179 26 180 26 181 26 182 26 183 26 184 26 185 26 186 26 187 26 188 26 189 26 190 26 191 26 192 26 193 26 194 26 195 26 196 26 197 26 198 26 199 26 200 26 201 26 202 26 203 26 204 26 205 26 206 26 207 26 208 26 209 26 210 26 211 26 212 26 213 26 214 26 215 26 216 26 217 26 218 26 219 26 220 26 221 26 222 26 223 26 224 26 225 26 226 26 227 26 228 26 229 26 230 26 231 26 232 26 233 26 234 26 235 26 236 26 237 26 238 26 239 26 240 26 241 26 242 26 243 26 244 26 245 26 246 26 247 26 248 26 249 26 250 26 251 26 252 26 253 26 254 26 255 26 256 26 257 26 258 26 259 26 260 26 261 26 262 26 263 26 264 26 265 26 266 26 267 26 268 26 269 26 270 26 271 26 272 26 273 26 274 26 275 26 276 26 277 26 278 26 279 26 280 26 281 26 282 26 283 26 284 26 285 26 286 26 287 26 288 26 289 26 290 26 291 26 292 26 293 26 294 26 295 26 296 26 297 26 298 26 299 27 0 27 1 27 2 27 3 27 4 27 5 27 6 27 7 27 8 27 9 27 10 27 11 27 12 27 13 27 14 27 15 27 16 27 17 27 18 27 19 27 20 27 21 27 22 27 23 27 24 27 25 27 26 27 27 27 28 27 29 27 30 27 31 27 32 27 33 27 34 27 35 27 36 27 37 27 38 27 39 27 40 27 41 27 42 27 43 27 44 27 45 27 46 27 47 27 48 27 49 27 50 27 51 27 52 27 53 27 54 27 55 27 56 27 57 27 58 27 59 27 60 27 61 27 62 27 63 27 64 27 65 27 66 27 67 27 68 27 69 27 70 27 71 27 72 27 73 27 74 27 75 27 76 27 77 27 78 27 79 27 80 27 81 27 82 27 83 27 84 27 85 27 86 27 87 27 88 27 89 27 90 27 91 27 92 27 93 27 94 27 95 27 96 27 97 27 98 27 99 27 100 27 101 27 102 27 103 27 104 27 105 27 106 27 107 27 108 27 109 27 110 27 111 27 112 27 113 27 114 27 115 27 116 27 117 27 118 27 119 27 120 27 121 27 122 27 123 27 124 27 125 27 126 27 127 27 128 27 129 27 130 27 131 27 132 27 133 27 134 27 135 27 136 27 137 27 138 27 139 27 140 27 141 27 142 27 143 27 144 27 145 27 146 27 147 27 148 27 149 27 150 27 151 27 152 27 153 27 154 27 155 27 156 27 157 27 158 27 159 27 160 27 161 27 162 27 163 27 164 27 165 27 166 27 167 27 168 27 169 27 170 27 171 27 172 27 173 27 174 27 175 27 176 27 177 27 178 27 179 27 180 27 181 27 182 27 183 27 184 27 185 27 186 27 187 27 188 27 189 27 190 27 191 27 192 27 193 27 194 27 195 27 196 27 197 27 198 27 199 27 200 27 201 27 202 27 203 27 204 27 205 27 206 27 207 27 208 27 209 27 210 27 211 27 212 27 213 27 214 27 215 27 216 27 217 27 218 27 219 27 220 27 221 27 222 27 223 27 224 27 225 27 226 27 227 27 228 27 229 27 230 27 231 27 232 27 233 27 234 27 235 27 236 27 237 27 238 27 239 27 240 27 241 27 242 27 243 27 244 27 245 27 246 27 247 27 248 27 249 27 250 27 251 27 252 27 253 27 254 27 255 27 256 27 257 27 258 27 259 27 260 27 261 27 262 27 263 27 264 27 265 27 266 27 267 27 268 27 269 27 270 27 271 27 272 27 273 27 274 27 275 27 276 27 277 27 278 27 279 27 280 27 281 27 282 27 283 27 284 27 285 27 286 27 287 27 288 27 289 27 290 27 291 27 292 27 293 27 294 27 295 27 296 27 297 27 298 27 299 28 0 28 1 28 2 28 3 28 4 28 5 28 6 28 7 28 8 28 9 28 10 28 11 28 12 28 13 28 14 28 15 28 16 28 17 28 18 28 19 28 20 28 21 28 22 28 23 28 24 28 25 28 26 28 27 28 28 28 29 28 30 28 31 28 32 28 33 28 34 28 35 28 36 28 37 28 38 28 39 28 40 28 41 28 42 28 43 28 44 28 45 28 46 28 47 28 48 28 49 28 50 28 51 28 52 28 53 28 54 28 55 28 56 28 57 28 58 28 59 28 60 28 61 28 62 28 63 28 64 28 65 28 66 28 67 28 68 28 69 28 70 28 71 28 72 28 73 28 74 28 75 28 76 28 77 28 78 28 79 28 80 28 81 28 82 28 83 28 84 28 85 28 86 28 87 28 88 28 89 28 90 28 91 28 92 28 93 28 94 28 95 28 96 28 97 28 98 28 99 28 100 28 101 28 102 28 103 28 104 28 105 28 106 28 107 28 108 28 109 28 110 28 111 28 112 28 113 28 114 28 115 28 116 28 117 28 118 28 119 28 120 28 121 28 122 28 123 28 124 28 125 28 126 28 127 28 128 28 129 28 130 28 131 28 132 28 133 28 134 28 135 28 136 28 137 28 138 28 139 28 140 28 141 28 142 28 143 28 144 28 145 28 146 28 147 28 148 28 149 28 150 28 151 28 152 28 153 28 154 28 155 28 156 28 157 28 158 28 159 28 160 28 161 28 162 28 163 28 164 28 165 28 166 28 167 28 168 28 169 28 170 28 171 28 172 28 173 28 174 28 175 28 176 28 177 28 178 28 179 28 180 28 181 28 182 28 183 28 184 28 185 28 186 28 187 28 188 28 189 28 190 28 191 28 192 28 193 28 194 28 195 28 196 28 197 28 198 28 199 28 200 28 201 28 202 28 203 28 204 28 205 28 206 28 207 28 208 28 209 28 210 28 211 28 212 28 213 28 214 28 215 28 216 28 217 28 218 28 219 28 220 28 221 28 222 28 223 28 224 28 225 28 226 28 227 28 228 28 229 28 230 28 231 28 232 28 233 28 234 28 235 28 236 28 237 28 238 28 239 28 240 28 241 28 242 28 243 28 244 28 245 28 246 28 247 28 248 28 249 28 250 28 251 28 252 28 253 28 254 28 255 28 256 28 257 28 258 28 259 28 260 28 261 28 262 28 263 28 264 28 265 28 266 28 267 28 268 28 269 28 270 28 271 28 272 28 273 28 274 28 275 28 276 28 277 28 278 28 279 28 280 28 281 28 282 28 283 28 284 28 285 28 286 28 287 28 288 28 289 28 290 28 291 28 292 28 293 28 294 28 295 28 296 28 297 28 298 28 299 29 0 29 1 29 2 29 3 29 4 29 5 29 6 29 7 29 8 29 9 29 10 29 11 29 12 29 13 29 14 29 15 29 16 29 17 29 18 29 19 29 20 29 21 29 22 29 23 29 24 29 25 29 26 29 27 29 28 29 29 29 30 29 31 29 32 29 33 29 34 29 35 29 36 29 37 29 38 29 39 29 40 29 41 29 42 29 43 29 44 29 45 29 46 29 47 29 48 29 49 29 50 29 51 29 52 29 53 29 54 29 55 29 56 29 57 29 58 29 59 29 60 29 61 29 62 29 63 29 64 29 65 29 66 29 67 29 68 29 69 29 70 29 71 29 72 29 73 29 74 29 75 29 76 29 77 29 78 29 79 29 80 29 81 29 82 29 83 29 84 29 85 29 86 29 87 29 88 29 89 29 90 29 91 29 92 29 93 29 94 29 95 29 96 29 97 29 98 29 99 29 100 29 101 29 102 29 103 29 104 29 105 29 106 29 107 29 108 29 109 29 110 29 111 29 112 29 113 29 114 29 115 29 116 29 117 29 118 29 119 29 120 29 121 29 122 29 123 29 124 29 125 29 126 29 127 29 128 29 129 29 130 29 131 29 132 29 133 29 134 29 135 29 136 29 137 29 138 29 139 29 140 29 141 29 142 29 143 29 144 29 145 29 146 29 147 29 148 29 149 29 150 29 151 29 152 29 153 29 154 29 155 29 156 29 157 29 158 29 159 29 160 29 161 29 162 29 163 29 164 29 165 29 166 29 167 29 168 29 169 29 170 29 171 29 172 29 173 29 174 29 175 29 176 29 177 29 178 29 179 29 180 29 181 29 182 29 183 29 184 29 185 29 186 29 187 29 188 29 189 29 190 29 191 29 192 29 193 29 194 29 195 29 196 29 197 29 198 29 199 29 200 29 201 29 202 29 203 29 204 29 205 29 206 29 207 29 208 29 209 29 210 29 211 29 212 29 213 29 214 29 215 29 216 29 217 29 218 29 219 29 220 29 221 29 222 29 223 29 224 29 225 29 226 29 227 29 228 29 229 29 230 29 231 29 232 29 233 29 234 29 235 29 236 29 237 29 238 29 239 29 240 29 241 29 242 29 243 29 244 29 245 29 246 29 247 29 248 29 249 29 250 29 251 29 252 29 253 29 254 29 255 29 256 29 257 29 258 29 259 29 260 29 261 29 262 29 263 29 264 29 265 29 266 29 267 29 268 29 269 29 270 29 271 29 272 29 273 29 274 29 275 29 276 29 277 29 278 29 279 29 280 29 281 29 282 29 283 29 284 29 285 29 286 29 287 29 288 29 289 29 290 29 291 29 292 29 293 29 294 29 295 29 296 29 297 29 298 29 299 30 0 30 1 30 2 30 3 30 4 30 5 30 6 30 7 30 8 30 9 30 10 30 11 30 12 30 13 30 14 30 15 30 16 30 17 30 18 30 19 30 20 30 21 30 22 30 23 30 24 30 25 30 26 30 27 30 28 30 29 30 30 30 31 30 32 30 33 30 34 30 35 30 36 30 37 30 38 30 39 30 40 30 41 30 42 30 43 30 44 30 45 30 46 30 47 30 48 30 49 30 50 30 51 30 52 30 53 30 54 30 55 30 56 30 57 30 58 30 59 30 60 30 61 30 62 30 63 30 64 30 65 30 66 30 67 30 68 30 69 30 70 30 71 30 72 30 73 30 74 30 75 30 76 30 77 30 78 30 79 30 80 30 81 30 82 30 83 30 84 30 85 30 86 30 87 30 88 30 89 30 90 30 91 30 92 30 93 30 94 30 95 30 96 30 97 30 98 30 99 30 100 30 101 30 102 30 103 30 104 30 105 30 106 30 107 30 108 30 109 30 110 30 111 30 112 30 113 30 114 30 115 30 116 30 117 30 118 30 119 30 120 30 121 30 122 30 123 30 124 30 125 30 126 30 127 30 128 30 129 30 130 30 131 30 132 30 133 30 134 30 135 30 136 30 137 30 138 30 139 30 140 30 141 30 142 30 143 30 144 30 145 30 146 30 147 30 148 30 149 30 150 30 151 30 152 30 153 30 154 30 155 30 156 30 157 30 158 30 159 30 160 30 161 30 162 30 163 30 164 30 165 30 166 30 167 30 168 30 169 30 170 30 171 30 172 30 173 30 174 30 175 30 176 30 177 30 178 30 179 30 180 30 181 30 182 30 183 30 184 30 185 30 186 30 187 30 188 30 189 30 190 30 191 30 192 30 193 30 194 30 195 30 196 30 197 30 198 30 199 30 200 30 201 30 202 30 203 30 204 30 205 30 206 30 207 30 208 30 209 30 210 30 211 30 212 30 213 30 214 30 215 30 216 30 217 30 218 30 219 30 220 30 221 30 222 30 223 30 224 30 225 30 226 30 227 30 228 30 229 30 230 30 231 30 232 30 233 30 234 30 235 30 236 30 237 30 238 30 239 30 240 30 241 30 242 30 243 30 244 30 245 30 246 30 247 30 248 30 249 30 250 30 251 30 252 30 253 30 254 30 255 30 256 30 257 30 258 30 259 30 260 30 261 30 262 30 263 30 264 30 265 30 266 30 267 30 268 30 269 30 270 30 271 30 272 30 273 30 274 30 275 30 276 30 277 30 278 30 279 30 280 30 281 30 282 30 283 30 284 30 285 30 286 30 287 30 288 30 289 30 290 30 291 30 292 30 293 30 294 30 295 30 296 30 297 30 298 30 299 31 0 31 1 31 2 31 3 31 4 31 5 31 6 31 7 31 8 31 9 31 10 31 11 31 12 31 13 31 14 31 15 31 16 31 17 31 18 31 19 31 20 31 21 31 22 31 23 31 24 31 25 31 26 31 27 31 28 31 29 31 30 31 31 31 32 31 33 31 34 31 35 31 36 31 37 31 38 31 39 31 40 31 41 31 42 31 43 31 44 31 45 31 46 31 47 31 48 31 49 31 50 31 51 31 52 31 53 31 54 31 55 31 56 31 57 31 58 31 59 31 60 31 61 31 62 31 63 31 64 31 65 31 66 31 67 31 68 31 69 31 70 31 71 31 72 31 73 31 74 31 75 31 76 31 77 31 78 31 79 31 80 31 81 31 82 31 83 31 84 31 85 31 86 31 87 31 88 31 89 31 90 31 91 31 92 31 93 31 94 31 95 31 96 31 97 31 98 31 99 31 100 31 101 31 102 31 103 31 104 31 105 31 106 31 107 31 108 31 109 31 110 31 111 31 112 31 113 31 114 31 115 31 116 31 117 31 118 31 119 31 120 31 121 31 122 31 123 31 124 31 125 31 126 31 127 31 128 31 129 31 130 31 131 31 132 31 133 31 134 31 135 31 136 31 137 31 138 31 139 31 140 31 141 31 142 31 143 31 144 31 145 31 146 31 147 31 148 31 149 31 150 31 151 31 152 31 153 31 154 31 155 31 156 31 157 31 158 31 159 31 160 31 161 31 162 31 163 31 164 31 165 31 166 31 167 31 168 31 169 31 170 31 171 31 172 31 173 31 174 31 175 31 176 31 177 31 178 31 179 31 180 31 181 31 182 31 183 31 184 31 185 31 186 31 187 31 188 31 189 31 190 31 191 31 192 31 193 31 194 31 195 31 196 31 197 31 198 31 199 31 200 31 201 31 202 31 203 31 204 31 205 31 206 31 207 31 208 31 209 31 210 31 211 31 212 31 213 31 214 31 215 31 216 31 217 31 218 31 219 31 220 31 221 31 222 31 223 31 224 31 225 31 226 31 227 31 228 31 229 31 230 31 231 31 232 31 233 31 234 31 235 31 236 31 237 31 238 31 239 31 240 31 241 31 242 31 243 31 244 31 245 31 246 31 247 31 248 31 249 31 250 31 251 31 252 31 253 31 254 31 255 31 256 31 257 31 258 31 259 31 260 31 261 31 262 31 263 31 264 31 265 31 266 31 267 31 268 31 269 31 270 31 271 31 272 31 273 31 274 31 275 31 276 31 277 31 278 31 279 31 280 31 281 31 282 31 283 31 284 31 285 31 286 31 287 31 288 31 289 31 290 31 291 31 292 31 293 31 294 31 295 31 296 31 297 31 298 31 299 32 0 32 1 32 2 32 3 32 4 32 5 32 6 32 7 32 8 32 9 32 10 32 11 32 12 32 13 32 14 32 15 32 16 32 17 32 18 32 19 32 20 32 21 32 22 32 23 32 24 32 25 32 26 32 27 32 28 32 29 32 30 32 31 32 32 32 33 32 34 32 35 32 36 32 37 32 38 32 39 32 40 32 41 32 42 32 43 32 44 32 45 32 46 32 47 32 48 32 49 32 50 32 51 32 52 32 53 32 54 32 55 32 56 32 57 32 58 32 59 32 60 32 61 32 62 32 63 32 64 32 65 32 66 32 67 32 68 32 69 32 70 32 71 32 72 32 73 32 74 32 75 32 76 32 77 32 78 32 79 32 80 32 81 32 82 32 83 32 84 32 85 32 86 32 87 32 88 32 89 32 90 32 91 32 92 32 93 32 94 32 95 32 96 32 97 32 98 32 99 32 100 32 101 32 102 32 103 32 104 32 105 32 106 32 107 32 108 32 109 32 110 32 111 32 112 32 113 32 114 32 115 32 116 32 117 32 118 32 119 32 120 32 121 32 122 32 123 32 124 32 125 32 126 32 127 32 128 32 129 32 130 32 131 32 132 32 133 32 134 32 135 32 136 32 137 32 138 32 139 32 140 32 141 32 142 32 143 32 144 32 145 32 146 32 147 32 148 32 149 32 150 32 151 32 152 32 153 32 154 32 155 32 156 32 157 32 158 32 159 32 160 32 161 32 162 32 163 32 164 32 165 32 166 32 167 32 168 32 169 32 170 32 171 32 172 32 173 32 174 32 175 32 176 32 177 32 178 32 179 32 180 32 181 32 182 32 183 32 184 32 185 32 186 32 187 32 188 32 189 32 190 32 191 32 192 32 193 32 194 32 195 32 196 32 197 32 198 32 199 32 200 32 201 32 202 32 203 32 204 32 205 32 206 32 207 32 208 32 209 32 210 32 211 32 212 32 213 32 214 32 215 32 216 32 217 32 218 32 219 32 220 32 221 32 222 32 223 32 224 32 225 32 226 32 227 32 228 32 229 32 230 32 231 32 232 32 233 32 234 32 235 32 236 32 237 32 238 32 239 32 240 32 241 32 242 32 243 32 244 32 245 32 246 32 247 32 248 32 249 32 250 32 251 32 252 32 253 32 254 32 255 32 256 32 257 32 258 32 259 32 260 32 261 32 262 32 263 32 264 32 265 32 266 32 267 32 268 32 269 32 270 32 271 32 272 32 273 32 274 32 275 32 276 32 277 32 278 32 279 32 280 32 281 32 282 32 283 32 284 32 285 32 286 32 287 32 288 32 289 32 290 32 291 32 292 32 293 32 294 32 295 32 296 32 297 32 298 32 299 33 0 33 1 33 2 33 3 33 4 33 5 33 6 33 7 33 8 33 9 33 10 33 11 33 12 33 13 33 14 33 15 33 16 33 17 33 18 33 19 33 20 33 21 33 22 33 23 33 24 33 25 33 26 33 27 33 28 33 29 33 30 33 31 33 32 33 33 33 34 33 35 33 36 33 37 33 38 33 39 33 40 33 41 33 42 33 43 33 44 33 45 33 46 33 47 33 48 33 49 33 50 33 51 33 52 33 53 33 54 33 55 33 56 33 57 33 58 33 59 33 60 33 61 33 62 33 63 33 64 33 65 33 66 33 67 33 68 33 69 33 70 33 71 33 72 33 73 33 74 33 75 33 76 33 77 33 78 33 79 33 80 33 81 33 82 33 83 33 84 33 85 33 86 33 87 33 88 33 89 33 90 33 91 33 92 33 93 33 94 33 95 33 96 33 97 33 98 33 99 33 100 33 101 33 102 33 103 33 104 33 105 33 106 33 107 33 108 33 109 33 110 33 111 33 112 33 113 33 114 33 115 33 116 33 117 33 118 33 119 33 120 33 121 33 122 33 123 33 124 33 125 33 126 33 127 33 128 33 129 33 130 33 131 33 132 33 133 33 134 33 135 33 136 33 137 33 138 33 139 33 140 33 141 33 142 33 143 33 144 33 145 33 146 33 147 33 148 33 149 33 150 33 151 33 152 33 153 33 154 33 155 33 156 33 157 33 158 33 159 33 160 33 161 33 162 33 163 33 164 33 165 33 166 33 167 33 168 33 169 33 170 33 171 33 172 33 173 33 174 33 175 33 176 33 177 33 178 33 179 33 180 33 181 33 182 33 183 33 184 33 185 33 186 33 187 33 188 33 189 33 190 33 191 33 192 33 193 33 194 33 195 33 196 33 197 33 198 33 199 33 200 33 201 33 202 33 203 33 204 33 205 33 206 33 207 33 208 33 209 33 210 33 211 33 212 33 213 33 214 33 215 33 216 33 217 33 218 33 219 33 220 33 221 33 222 33 223 33 224 33 225 33 226 33 227 33 228 33 229 33 230 33 231 33 232 33 233 33 234 33 235 33 236 33 237 33 238 33 239 33 240 33 241 33 242 33 243 33 244 33 245 33 246 33 247 33 248 33 249 33 250 33 251 33 252 33 253 33 254 33 255 33 256 33 257 33 258 33 259 33 260 33 261 33 262 33 263 33 264 33 265 33 266 33 267 33 268 33 269 33 270 33 271 33 272 33 273 33 274 33 275 33 276 33 277 33 278 33 279 33 280 33 281 33 282 33 283 33 284 33 285 33 286 33 287 33 288 33 289 33 290 33 291 33 292 33 293 33 294 33 295 33 296 33 297 33 298 33 299 34 0 34 1 34 2 34 3 34 4 34 5 34 6 34 7 34 8 34 9 34 10 34 11 34 12 34 13 34 14 34 15 34 16 34 17 34 18 34 19 34 20 34 21 34 22 34 23 34 24 34 25 34 26 34 27 34 28 34 29 34 30 34 31 34 32 34 33 34 34 34 35 34 36 34 37 34 38 34 39 34 40 34 41 34 42 34 43 34 44 34 45 34 46 34 47 34 48 34 49 34 50 34 51 34 52 34 53 34 54 34 55 34 56 34 57 34 58 34 59 34 60 34 61 34 62 34 63 34 64 34 65 34 66 34 67 34 68 34 69 34 70 34 71 34 72 34 73 34 74 34 75 34 76 34 77 34 78 34 79 34 80 34 81 34 82 34 83 34 84 34 85 34 86 34 87 34 88 34 89 34 90 34 91 34 92 34 93 34 94 34 95 34 96 34 97 34 98 34 99 34 100 34 101 34 102 34 103 34 104 34 105 34 106 34 107 34 108 34 109 34 110 34 111 34 112 34 113 34 114 34 115 34 116 34 117 34 118 34 119 34 120 34 121 34 122 34 123 34 124 34 125 34 126 34 127 34 128 34 129 34 130 34 131 34 132 34 133 34 134 34 135 34 136 34 137 34 138 34 139 34 140 34 141 34 142 34 143 34 144 34 145 34 146 34 147 34 148 34 149 34 150 34 151 34 152 34 153 34 154 34 155 34 156 34 157 34 158 34 159 34 160 34 161 34 162 34 163 34 164 34 165 34 166 34 167 34 168 34 169 34 170 34 171 34 172 34 173 34 174 34 175 34 176 34 177 34 178 34 179 34 180 34 181 34 182 34 183 34 184 34 185 34 186 34 187 34 188 34 189 34 190 34 191 34 192 34 193 34 194 34 195 34 196 34 197 34 198 34 199 34 200 34 201 34 202 34 203 34 204 34 205 34 206 34 207 34 208 34 209 34 210 34 211 34 212 34 213 34 214 34 215 34 216 34 217 34 218 34 219 34 220 34 221 34 222 34 223 34 224 34 225 34 226 34 227 34 228 34 229 34 230 34 231 34 232 34 233 34 234 34 235 34 236 34 237 34 238 34 239 34 240 34 241 34 242 34 243 34 244 34 245 34 246 34 247 34 248 34 249 34 250 34 251 34 252 34 253 34 254 34 255 34 256 34 257 34 258 34 259 34 260 34 261 34 262 34 263 34 264 34 265 34 266 34 267 34 268 34 269 34 270 34 271 34 272 34 273 34 274 34 275 34 276 34 277 34 278 34 279 34 280 34 281 34 282 34 283 34 284 34 285 34 286 34 287 34 288 34 289 34 290 34 291 34 292 34 293 34 294 34 295 34 296 34 297 34 298 34 299 35 0 35 1 35 2 35 3 35 4 35 5 35 6 35 7 35 8 35 9 35 10 35 11 35 12 35 13 35 14 35 15 35 16 35 17 35 18 35 19 35 20 35 21 35 22 35 23 35 24 35 25 35 26 35 27 35 28 35 29 35 30 35 31 35 32 35 33 35 34 35 35 35 36 35 37 35 38 35 39 35 40 35 41 35 42 35 43 35 44 35 45 35 46 35 47 35 48 35 49 35 50 35 51 35 52 35 53 35 54 35 55 35 56 35 57 35 58 35 59 35 60 35 61 35 62 35 63 35 64 35 65 35 66 35 67 35 68 35 69 35 70 35 71 35 72 35 73 35 74 35 75 35 76 35 77 35 78 35 79 35 80 35 81 35 82 35 83 35 84 35 85 35 86 35 87 35 88 35 89 35 90 35 91 35 92 35 93 35 94 35 95 35 96 35 97 35 98 35 99 35 100 35 101 35 102 35 103 35 104 35 105 35 106 35 107 35 108 35 109 35 110 35 111 35 112 35 113 35 114 35 115 35 116 35 117 35 118 35 119 35 120 35 121 35 122 35 123 35 124 35 125 35 126 35 127 35 128 35 129 35 130 35 131 35 132 35 133 35 134 35 135 35 136 35 137 35 138 35 139 35 140 35 141 35 142 35 143 35 144 35 145 35 146 35 147 35 148 35 149 35 150 35 151 35 152 35 153 35 154 35 155 35 156 35 157 35 158 35 159 35 160 35 161 35 162 35 163 35 164 35 165 35 166 35 167 35 168 35 169 35 170 35 171 35 172 35 173 35 174 35 175 35 176 35 177 35 178 35 179 35 180 35 181 35 182 35 183 35 184 35 185 35 186 35 187 35 188 35 189 35 190 35 191 35 192 35 193 35 194 35 195 35 196 35 197 35 198 35 199 35 200 35 201 35 202 35 203 35 204 35 205 35 206 35 207 35 208 35 209 35 210 35 211 35 212 35 213 35 214 35 215 35 216 35 217 35 218 35 219 35 220 35 221 35 222 35 223 35 224 35 225 35 226 35 227 35 228 35 229 35 230 35 231 35 232 35 233 35 234 35 235 35 236 35 237 35 238 35 239 35 240 35 241 35 242 35 243 35 244 35 245 35 246 35 247 35 248 35 249 35 250 35 251 35 252 35 253 35 254 35 255 35 256 35 257 35 258 35 259 35 260 35 261 35 262 35 263 35 264 35 265 35 266 35 267 35 268 35 269 35 270 35 271 35 272 35 273 35 274 35 275 35 276 35 277 35 278 35 279 35 280 35 281 35 282 35 283 35 284 35 285 35 286 35 287 35 288 35 289 35 290 35 291 35 292 35 293 35 294 35 295 35 296 35 297 35 298 35 299 36 0 36 1 36 2 36 3 36 4 36 5 36 6 36 7 36 8 36 9 36 10 36 11 36 12 36 13 36 14 36 15 36 16 36 17 36 18 36 19 36 20 36 21 36 22 36 23 36 24 36 25 36 26 36 27 36 28 36 29 36 30 36 31 36 32 36 33 36 34 36 35 36 36 36 37 36 38 36 39 36 40 36 41 36 42 36 43 36 44 36 45 36 46 36 47 36 48 36 49 36 50 36 51 36 52 36 53 36 54 36 55 36 56 36 57 36 58 36 59 36 60 36 61 36 62 36 63 36 64 36 65 36 66 36 67 36 68 36 69 36 70 36 71 36 72 36 73 36 74 36 75 36 76 36 77 36 78 36 79 36 80 36 81 36 82 36 83 36 84 36 85 36 86 36 87 36 88 36 89 36 90 36 91 36 92 36 93 36 94 36 95 36 96 36 97 36 98 36 99 36 100 36 101 36 102 36 103 36 104 36 105 36 106 36 107 36 108 36 109 36 110 36 111 36 112 36 113 36 114 36 115 36 116 36 117 36 118 36 119 36 120 36 121 36 122 36 123 36 124 36 125 36 126 36 127 36 128 36 129 36 130 36 131 36 132 36 133 36 134 36 135 36 136 36 137 36 138 36 139 36 140 36 141 36 142 36 143 36 144 36 145 36 146 36 147 36 148 36 149 36 150 36 151 36 152 36 153 36 154 36 155 36 156 36 157 36 158 36 159 36 160 36 161 36 162 36 163 36 164 36 165 36 166 36 167 36 168 36 169 36 170 36 171 36 172 36 173 36 174 36 175 36 176 36 177 36 178 36 179 36 180 36 181 36 182 36 183 36 184 36 185 36 186 36 187 36 188 36 189 36 190 36 191 36 192 36 193 36 194 36 195 36 196 36 197 36 198 36 199 36 200 36 201 36 202 36 203 36 204 36 205 36 206 36 207 36 208 36 209 36 210 36 211 36 212 36 213 36 214 36 215 36 216 36 217 36 218 36 219 36 220 36 221 36 222 36 223 36 224 36 225 36 226 36 227 36 228 36 229 36 230 36 231 36 232 36 233 36 234 36 235 36 236 36 237 36 238 36 239 36 240 36 241 36 242 36 243 36 244 36 245 36 246 36 247 36 248 36 249 36 250 36 251 36 252 36 253 36 254 36 255 36 256 36 257 36 258 36 259 36 260 36 261 36 262 36 263 36 264 36 265 36 266 36 267 36 268 36 269 36 270 36 271 36 272 36 273 36 274 36 275 36 276 36 277 36 278 36 279 36 280 36 281 36 282 36 283 36 284 36 285 36 286 36 287 36 288 36 289 36 290 36 291 36 292 36 293 36 294 36 295 36 296 36 297 36 298 36 299 37 0 37 1 37 2 37 3 37 4 37 5 37 6 37 7 37 8 37 9 37 10 37 11 37 12 37 13 37 14 37 15 37 16 37 17 37 18 37 19 37 20 37 21 37 22 37 23 37 24 37 25 37 26 37 27 37 28 37 29 37 30 37 31 37 32 37 33 37 34 37 35 37 36 37 37 37 38 37 39 37 40 37 41 37 42 37 43 37 44 37 45 37 46 37 47 37 48 37 49 37 50 37 51 37 52 37 53 37 54 37 55 37 56 37 57 37 58 37 59 37 60 37 61 37 62 37 63 37 64 37 65 37 66 37 67 37 68 37 69 37 70 37 71 37 72 37 73 37 74 37 75 37 76 37 77 37 78 37 79 37 80 37 81 37 82 37 83 37 84 37 85 37 86 37 87 37 88 37 89 37 90 37 91 37 92 37 93 37 94 37 95 37 96 37 97 37 98 37 99 37 100 37 101 37 102 37 103 37 104 37 105 37 106 37 107 37 108 37 109 37 110 37 111 37 112 37 113 37 114 37 115 37 116 37 117 37 118 37 119 37 120 37 121 37 122 37 123 37 124 37 125 37 126 37 127 37 128 37 129 37 130 37 131 37 132 37 133 37 134 37 135 37 136 37 137 37 138 37 139 37 140 37 141 37 142 37 143 37 144 37 145 37 146 37 147 37 148 37 149 37 150 37 151 37 152 37 153 37 154 37 155 37 156 37 157 37 158 37 159 37 160 37 161 37 162 37 163 37 164 37 165 37 166 37 167 37 168 37 169 37 170 37 171 37 172 37 173 37 174 37 175 37 176 37 177 37 178 37 179 37 180 37 181 37 182 37 183 37 184 37 185 37 186 37 187 37 188 37 189 37 190 37 191 37 192 37 193 37 194 37 195 37 196 37 197 37 198 37 199 37 200 37 201 37 202 37 203 37 204 37 205 37 206 37 207 37 208 37 209 37 210 37 211 37 212 37 213 37 214 37 215 37 216 37 217 37 218 37 219 37 220 37 221 37 222 37 223 37 224 37 225 37 226 37 227 37 228 37 229 37 230 37 231 37 232 37 233 37 234 37 235 37 236 37 237 37 238 37 239 37 240 37 241 37 242 37 243 37 244 37 245 37 246 37 247 37 248 37 249 37 250 37 251 37 252 37 253 37 254 37 255 37 256 37 257 37 258 37 259 37 260 37 261 37 262 37 263 37 264 37 265 37 266 37 267 37 268 37 269 37 270 37 271 37 272 37 273 37 274 37 275 37 276 37 277 37 278 37 279 37 280 37 281 37 282 37 283 37 284 37 285 37 286 37 287 37 288 37 289 37 290 37 291 37 292 37 293 37 294 37 295 37 296 37 297 37 298 37 299 38 0 38 1 38 2 38 3 38 4 38 5 38 6 38 7 38 8 38 9 38 10 38 11 38 12 38 13 38 14 38 15 38 16 38 17 38 18 38 19 38 20 38 21 38 22 38 23 38 24 38 25 38 26 38 27 38 28 38 29 38 30 38 31 38 32 38 33 38 34 38 35 38 36 38 37 38 38 38 39 38 40 38 41 38 42 38 43 38 44 38 45 38 46 38 47 38 48 38 49 38 50 38 51 38 52 38 53 38 54 38 55 38 56 38 57 38 58 38 59 38 60 38 61 38 62 38 63 38 64 38 65 38 66 38 67 38 68 38 69 38 70 38 71 38 72 38 73 38 74 38 75 38 76 38 77 38 78 38 79 38 80 38 81 38 82 38 83 38 84 38 85 38 86 38 87 38 88 38 89 38 90 38 91 38 92 38 93 38 94 38 95 38 96 38 97 38 98 38 99 38 100 38 101 38 102 38 103 38 104 38 105 38 106 38 107 38 108 38 109 38 110 38 111 38 112 38 113 38 114 38 115 38 116 38 117 38 118 38 119 38 120 38 121 38 122 38 123 38 124 38 125 38 126 38 127 38 128 38 129 38 130 38 131 38 132 38 133 38 134 38 135 38 136 38 137 38 138 38 139 38 140 38 141 38 142 38 143 38 144 38 145 38 146 38 147 38 148 38 149 38 150 38 151 38 152 38 153 38 154 38 155 38 156 38 157 38 158 38 159 38 160 38 161 38 162 38 163 38 164 38 165 38 166 38 167 38 168 38 169 38 170 38 171 38 172 38 173 38 174 38 175 38 176 38 177 38 178 38 179 38 180 38 181 38 182 38 183 38 184 38 185 38 186 38 187 38 188 38 189 38 190 38 191 38 192 38 193 38 194 38 195 38 196 38 197 38 198 38 199 38 200 38 201 38 202 38 203 38 204 38 205 38 206 38 207 38 208 38 209 38 210 38 211 38 212 38 213 38 214 38 215 38 216 38 217 38 218 38 219 38 220 38 221 38 222 38 223 38 224 38 225 38 226 38 227 38 228 38 229 38 230 38 231 38 232 38 233 38 234 38 235 38 236 38 237 38 238 38 239 38 240 38 241 38 242 38 243 38 244 38 245 38 246 38 247 38 248 38 249 38 250 38 251 38 252 38 253 38 254 38 255 38 256 38 257 38 258 38 259 38 260 38 261 38 262 38 263 38 264 38 265 38 266 38 267 38 268 38 269 38 270 38 271 38 272 38 273 38 274 38 275 38 276 38 277 38 278 38 279 38 280 38 281 38 282 38 283 38 284 38 285 38 286 38 287 38 288 38 289 38 290 38 291 38 292 38 293 38 294 38 295 38 296 38 297 38 298 38 299 39 0 39 1 39 2 39 3 39 4 39 5 39 6 39 7 39 8 39 9 39 10 39 11 39 12 39 13 39 14 39 15 39 16 39 17 39 18 39 19 39 20 39 21 39 22 39 23 39 24 39 25 39 26 39 27 39 28 39 29 39 30 39 31 39 32 39 33 39 34 39 35 39 36 39 37 39 38 39 39 39 40 39 41 39 42 39 43 39 44 39 45 39 46 39 47 39 48 39 49 39 50 39 51 39 52 39 53 39 54 39 55 39 56 39 57 39 58 39 59 39 60 39 61 39 62 39 63 39 64 39 65 39 66 39 67 39 68 39 69 39 70 39 71 39 72 39 73 39 74 39 75 39 76 39 77 39 78 39 79 39 80 39 81 39 82 39 83 39 84 39 85 39 86 39 87 39 88 39 89 39 90 39 91 39 92 39 93 39 94 39 95 39 96 39 97 39 98 39 99 39 100 39 101 39 102 39 103 39 104 39 105 39 106 39 107 39 108 39 109 39 110 39 111 39 112 39 113 39 114 39 115 39 116 39 117 39 118 39 119 39 120 39 121 39 122 39 123 39 124 39 125 39 126 39 127 39 128 39 129 39 130 39 131 39 132 39 133 39 134 39 135 39 136 39 137 39 138 39 139 39 140 39 141 39 142 39 143 39 144 39 145 39 146 39 147 39 148 39 149 39 150 39 151 39 152 39 153 39 154 39 155 39 156 39 157 39 158 39 159 39 160 39 161 39 162 39 163 39 164 39 165 39 166 39 167 39 168 39 169 39 170 39 171 39 172 39 173 39 174 39 175 39 176 39 177 39 178 39 179 39 180 39 181 39 182 39 183 39 184 39 185 39 186 39 187 39 188 39 189 39 190 39 191 39 192 39 193 39 194 39 195 39 196 39 197 39 198 39 199 39 200 39 201 39 202 39 203 39 204 39 205 39 206 39 207 39 208 39 209 39 210 39 211 39 212 39 213 39 214 39 215 39 216 39 217 39 218 39 219 39 220 39 221 39 222 39 223 39 224 39 225 39 226 39 227 39 228 39 229 39 230 39 231 39 232 39 233 39 234 39 235 39 236 39 237 39 238 39 239 39 240 39 241 39 242 39 243 39 244 39 245 39 246 39 247 39 248 39 249 39 250 39 251 39 252 39 253 39 254 39 255 39 256 39 257 39 258 39 259 39 260 39 261 39 262 39 263 39 264 39 265 39 266 39 267 39 268 39 269 39 270 39 271 39 272 39 273 39 274 39 275 39 276 39 277 39 278 39 279 39 280 39 281 39 282 39 283 39 284 39 285 39 286 39 287 39 288 39 289 39 290 39 291 39 292 39 293 39 294 39 295 39 296 39 297 39 298 39 299 40 0 40 1 40 2 40 3 40 4 40 5 40 6 40 7 40 8 40 9 40 10 40 11 40 12 40 13 40 14 40 15 40 16 40 17 40 18 40 19 40 20 40 21 40 22 40 23 40 24 40 25 40 26 40 27 40 28 40 29 40 30 40 31 40 32 40 33 40 34 40 35 40 36 40 37 40 38 40 39 40 40 40 41 40 42 40 43 40 44 40 45 40 46 40 47 40 48 40 49 40 50 40 51 40 52 40 53 40 54 40 55 40 56 40 57 40 58 40 59 40 60 40 61 40 62 40 63 40 64 40 65 40 66 40 67 40 68 40 69 40 70 40 71 40 72 40 73 40 74 40 75 40 76 40 77 40 78 40 79 40 80 40 81 40 82 40 83 40 84 40 85 40 86 40 87 40 88 40 89 40 90 40 91 40 92 40 93 40 94 40 95 40 96 40 97 40 98 40 99 40 100 40 101 40 102 40 103 40 104 40 105 40 106 40 107 40 108 40 109 40 110 40 111 40 112 40 113 40 114 40 115 40 116 40 117 40 118 40 119 40 120 40 121 40 122 40 123 40 124 40 125 40 126 40 127 40 128 40 129 40 130 40 131 40 132 40 133 40 134 40 135 40 136 40 137 40 138 40 139 40 140 40 141 40 142 40 143 40 144 40 145 40 146 40 147 40 148 40 149 40 150 40 151 40 152 40 153 40 154 40 155 40 156 40 157 40 158 40 159 40 160 40 161 40 162 40 163 40 164 40 165 40 166 40 167 40 168 40 169 40 170 40 171 40 172 40 173 40 174 40 175 40 176 40 177 40 178 40 179 40 180 40 181 40 182 40 183 40 184 40 185 40 186 40 187 40 188 40 189 40 190 40 191 40 192 40 193 40 194 40 195 40 196 40 197 40 198 40 199 40 200 40 201 40 202 40 203 40 204 40 205 40 206 40 207 40 208 40 209 40 210 40 211 40 212 40 213 40 214 40 215 40 216 40 217 40 218 40 219 40 220 40 221 40 222 40 223 40 224 40 225 40 226 40 227 40 228 40 229 40 230 40 231 40 232 40 233 40 234 40 235 40 236 40 237 40 238 40 239 40 240 40 241 40 242 40 243 40 244 40 245 40 246 40 247 40 248 40 249 40 250 40 251 40 252 40 253 40 254 40 255 40 256 40 257 40 258 40 259 40 260 40 261 40 262 40 263 40 264 40 265 40 266 40 267 40 268 40 269 40 270 40 271 40 272 40 273 40 274 40 275 40 276 40 277 40 278 40 279 40 280 40 281 40 282 40 283 40 284 40 285 40 286 40 287 40 288 40 289 40 290 40 291 40 292 40 293 40 294 40 295 40 296 40 297 40 298 40 299 41 0 41 1 41 2 41 3 41 4 41 5 41 6 41 7 41 8 41 9 41 10 41 11 41 12 41 13 41 14 41 15 41 16 41 17 41 18 41 19 41 20 41 21 41 22 41 23 41 24 41 25 41 26 41 27 41 28 41 29 41 30 41 31 41 32 41 33 41 34 41 35 41 36 41 37 41 38 41 39 41 40 41 41 41 42 41 43 41 44 41 45 41 46 41 47 41 48 41 49 41 50 41 51 41 52 41 53 41 54 41 55 41 56 41 57 41 58 41 59 41 60 41 61 41 62 41 63 41 64 41 65 41 66 41 67 41 68 41 69 41 70 41 71 41 72 41 73 41 74 41 75 41 76 41 77 41 78 41 79 41 80 41 81 41 82 41 83 41 84 41 85 41 86 41 87 41 88 41 89 41 90 41 91 41 92 41 93 41 94 41 95 41 96 41 97 41 98 41 99 41 100 41 101 41 102 41 103 41 104 41 105 41 106 41 107 41 108 41 109 41 110 41 111 41 112 41 113 41 114 41 115 41 116 41 117 41 118 41 119 41 120 41 121 41 122 41 123 41 124 41 125 41 126 41 127 41 128 41 129 41 130 41 131 41 132 41 133 41 134 41 135 41 136 41 137 41 138 41 139 41 140 41 141 41 142 41 143 41 144 41 145 41 146 41 147 41 148 41 149 41 150 41 151 41 152 41 153 41 154 41 155 41 156 41 157 41 158 41 159 41 160 41 161 41 162 41 163 41 164 41 165 41 166 41 167 41 168 41 169 41 170 41 171 41 172 41 173 41 174 41 175 41 176 41 177 41 178 41 179 41 180 41 181 41 182 41 183 41 184 41 185 41 186 41 187 41 188 41 189 41 190 41 191 41 192 41 193 41 194 41 195 41 196 41 197 41 198 41 199 41 200 41 201 41 202 41 203 41 204 41 205 41 206 41 207 41 208 41 209 41 210 41 211 41 212 41 213 41 214 41 215 41 216 41 217 41 218 41 219 41 220 41 221 41 222 41 223 41 224 41 225 41 226 41 227 41 228 41 229 41 230 41 231 41 232 41 233 41 234 41 235 41 236 41 237 41 238 41 239 41 240 41 241 41 242 41 243 41 244 41 245 41 246 41 247 41 248 41 249 41 250 41 251 41 252 41 253 41 254 41 255 41 256 41 257 41 258 41 259 41 260 41 261 41 262 41 263 41 264 41 265 41 266 41 267 41 268 41 269 41 270 41 271 41 272 41 273 41 274 41 275 41 276 41 277 41 278 41 279 41 280 41 281 41 282 41 283 41 284 41 285 41 286 41 287 41 288 41 289 41 290 41 291 41 292 41 293 41 294 41 295 41 296 41 297 41 298 41 299 42 0 42 1 42 2 42 3 42 4 42 5 42 6 42 7 42 8 42 9 42 10 42 11 42 12 42 13 42 14 42 15 42 16 42 17 42 18 42 19 42 20 42 21 42 22 42 23 42 24 42 25 42 26 42 27 42 28 42 29 42 30 42 31 42 32 42 33 42 34 42 35 42 36 42 37 42 38 42 39 42 40 42 41 42 42 42 43 42 44 42 45 42 46 42 47 42 48 42 49 42 50 42 51 42 52 42 53 42 54 42 55 42 56 42 57 42 58 42 59 42 60 42 61 42 62 42 63 42 64 42 65 42 66 42 67 42 68 42 69 42 70 42 71 42 72 42 73 42 74 42 75 42 76 42 77 42 78 42 79 42 80 42 81 42 82 42 83 42 84 42 85 42 86 42 87 42 88 42 89 42 90 42 91 42 92 42 93 42 94 42 95 42 96 42 97 42 98 42 99 42 100 42 101 42 102 42 103 42 104 42 105 42 106 42 107 42 108 42 109 42 110 42 111 42 112 42 113 42 114 42 115 42 116 42 117 42 118 42 119 42 120 42 121 42 122 42 123 42 124 42 125 42 126 42 127 42 128 42 129 42 130 42 131 42 132 42 133 42 134 42 135 42 136 42 137 42 138 42 139 42 140 42 141 42 142 42 143 42 144 42 145 42 146 42 147 42 148 42 149 42 150 42 151 42 152 42 153 42 154 42 155 42 156 42 157 42 158 42 159 42 160 42 161 42 162 42 163 42 164 42 165 42 166 42 167 42 168 42 169 42 170 42 171 42 172 42 173 42 174 42 175 42 176 42 177 42 178 42 179 42 180 42 181 42 182 42 183 42 184 42 185 42 186 42 187 42 188 42 189 42 190 42 191 42 192 42 193 42 194 42 195 42 196 42 197 42 198 42 199 42 200 42 201 42 202 42 203 42 204 42 205 42 206 42 207 42 208 42 209 42 210 42 211 42 212 42 213 42 214 42 215 42 216 42 217 42 218 42 219 42 220 42 221 42 222 42 223 42 224 42 225 42 226 42 227 42 228 42 229 42 230 42 231 42 232 42 233 42 234 42 235 42 236 42 237 42 238 42 239 42 240 42 241 42 242 42 243 42 244 42 245 42 246 42 247 42 248 42 249 42 250 42 251 42 252 42 253 42 254 42 255 42 256 42 257 42 258 42 259 42 260 42 261 42 262 42 263 42 264 42 265 42 266 42 267 42 268 42 269 42 270 42 271 42 272 42 273 42 274 42 275 42 276 42 277 42 278 42 279 42 280 42 281 42 282 42 283 42 284 42 285 42 286 42 287 42 288 42 289 42 290 42 291 42 292 42 293 42 294 42 295 42 296 42 297 42 298 42 299 43 0 43 1 43 2 43 3 43 4 43 5 43 6 43 7 43 8 43 9 43 10 43 11 43 12 43 13 43 14 43 15 43 16 43 17 43 18 43 19 43 20 43 21 43 22 43 23 43 24 43 25 43 26 43 27 43 28 43 29 43 30 43 31 43 32 43 33 43 34 43 35 43 36 43 37 43 38 43 39 43 40 43 41 43 42 43 43 43 44 43 45 43 46 43 47 43 48 43 49 43 50 43 51 43 52 43 53 43 54 43 55 43 56 43 57 43 58 43 59 43 60 43 61 43 62 43 63 43 64 43 65 43 66 43 67 43 68 43 69 43 70 43 71 43 72 43 73 43 74 43 75 43 76 43 77 43 78 43 79 43 80 43 81 43 82 43 83 43 84 43 85 43 86 43 87 43 88 43 89 43 90 43 91 43 92 43 93 43 94 43 95 43 96 43 97 43 98 43 99 43 100 43 101 43 102 43 103 43 104 43 105 43 106 43 107 43 108 43 109 43 110 43 111 43 112 43 113 43 114 43 115 43 116 43 117 43 118 43 119 43 120 43 121 43 122 43 123 43 124 43 125 43 126 43 127 43 128 43 129 43 130 43 131 43 132 43 133 43 134 43 135 43 136 43 137 43 138 43 139 43 140 43 141 43 142 43 143 43 144 43 145 43 146 43 147 43 148 43 149 43 150 43 151 43 152 43 153 43 154 43 155 43 156 43 157 43 158 43 159 43 160 43 161 43 162 43 163 43 164 43 165 43 166 43 167 43 168 43 169 43 170 43 171 43 172 43 173 43 174 43 175 43 176 43 177 43 178 43 179 43 180 43 181 43 182 43 183 43 184 43 185 43 186 43 187 43 188 43 189 43 190 43 191 43 192 43 193 43 194 43 195 43 196 43 197 43 198 43 199 43 200 43 201 43 202 43 203 43 204 43 205 43 206 43 207 43 208 43 209 43 210 43 211 43 212 43 213 43 214 43 215 43 216 43 217 43 218 43 219 43 220 43 221 43 222 43 223 43 224 43 225 43 226 43 227 43 228 43 229 43 230 43 231 43 232 43 233 43 234 43 235 43 236 43 237 43 238 43 239 43 240 43 241 43 242 43 243 43 244 43 245 43 246 43 247 43 248 43 249 43 250 43 251 43 252 43 253 43 254 43 255 43 256 43 257 43 258 43 259 43 260 43 261 43 262 43 263 43 264 43 265 43 266 43 267 43 268 43 269 43 270 43 271 43 272 43 273 43 274 43 275 43 276 43 277 43 278 43 279 43 280 43 281 43 282 43 283 43 284 43 285 43 286 43 287 43 288 43 289 43 290 43 291 43 292 43 293 43 294 43 295 43 296 43 297 43 298 43 299 44 0 44 1 44 2 44 3 44 4 44 5 44 6 44 7 44 8 44 9 44 10 44 11 44 12 44 13 44 14 44 15 44 16 44 17 44 18 44 19 44 20 44 21 44 22 44 23 44 24 44 25 44 26 44 27 44 28 44 29 44 30 44 31 44 32 44 33 44 34 44 35 44 36 44 37 44 38 44 39 44 40 44 41 44 42 44 43 44 44 44 45 44 46 44 47 44 48 44 49 44 50 44 51 44 52 44 53 44 54 44 55 44 56 44 57 44 58 44 59 44 60 44 61 44 62 44 63 44 64 44 65 44 66 44 67 44 68 44 69 44 70 44 71 44 72 44 73 44 74 44 75 44 76 44 77 44 78 44 79 44 80 44 81 44 82 44 83 44 84 44 85 44 86 44 87 44 88 44 89 44 90 44 91 44 92 44 93 44 94 44 95 44 96 44 97 44 98 44 99 44 100 44 101 44 102 44 103 44 104 44 105 44 106 44 107 44 108 44 109 44 110 44 111 44 112 44 113 44 114 44 115 44 116 44 117 44 118 44 119 44 120 44 121 44 122 44 123 44 124 44 125 44 126 44 127 44 128 44 129 44 130 44 131 44 132 44 133 44 134 44 135 44 136 44 137 44 138 44 139 44 140 44 141 44 142 44 143 44 144 44 145 44 146 44 147 44 148 44 149 44 150 44 151 44 152 44 153 44 154 44 155 44 156 44 157 44 158 44 159 44 160 44 161 44 162 44 163 44 164 44 165 44 166 44 167 44 168 44 169 44 170 44 171 44 172 44 173 44 174 44 175 44 176 44 177 44 178 44 179 44 180 44 181 44 182 44 183 44 184 44 185 44 186 44 187 44 188 44 189 44 190 44 191 44 192 44 193 44 194 44 195 44 196 44 197 44 198 44 199 44 200 44 201 44 202 44 203 44 204 44 205 44 206 44 207 44 208 44 209 44 210 44 211 44 212 44 213 44 214 44 215 44 216 44 217 44 218 44 219 44 220 44 221 44 222 44 223 44 224 44 225 44 226 44 227 44 228 44 229 44 230 44 231 44 232 44 233 44 234 44 235 44 236 44 237 44 238 44 239 44 240 44 241 44 242 44 243 44 244 44 245 44 246 44 247 44 248 44 249 44 250 44 251 44 252 44 253 44 254 44 255 44 256 44 257 44 258 44 259 44 260 44 261 44 262 44 263 44 264 44 265 44 266 44 267 44 268 44 269 44 270 44 271 44 272 44 273 44 274 44 275 44 276 44 277 44 278 44 279 44 280 44 281 44 282 44 283 44 284 44 285 44 286 44 287 44 288 44 289 44 290 44 291 44 292 44 293 44 294 44 295 44 296 44 297 44 298 44 299 45 0 45 1 45 2 45 3 45 4 45 5 45 6 45 7 45 8 45 9 45 10 45 11 45 12 45 13 45 14 45 15 45 16 45 17 45 18 45 19 45 20 45 21 45 22 45 23 45 24 45 25 45 26 45 27 45 28 45 29 45 30 45 31 45 32 45 33 45 34 45 35 45 36 45 37 45 38 45 39 45 40 45 41 45 42 45 43 45 44 45 45 45 46 45 47 45 48 45 49 45 50 45 51 45 52 45 53 45 54 45 55 45 56 45 57 45 58 45 59 45 60 45 61 45 62 45 63 45 64 45 65 45 66 45 67 45 68 45 69 45 70 45 71 45 72 45 73 45 74 45 75 45 76 45 77 45 78 45 79 45 80 45 81 45 82 45 83 45 84 45 85 45 86 45 87 45 88 45 89 45 90 45 91 45 92 45 93 45 94 45 95 45 96 45 97 45 98 45 99 45 100 45 101 45 102 45 103 45 104 45 105 45 106 45 107 45 108 45 109 45 110 45 111 45 112 45 113 45 114 45 115 45 116 45 117 45 118 45 119 45 120 45 121 45 122 45 123 45 124 45 125 45 126 45 127 45 128 45 129 45 130 45 131 45 132 45 133 45 134 45 135 45 136 45 137 45 138 45 139 45 140 45 141 45 142 45 143 45 144 45 145 45 146 45 147 45 148 45 149 45 150 45 151 45 152 45 153 45 154 45 155 45 156 45 157 45 158 45 159 45 160 45 161 45 162 45 163 45 164 45 165 45 166 45 167 45 168 45 169 45 170 45 171 45 172 45 173 45 174 45 175 45 176 45 177 45 178 45 179 45 180 45 181 45 182 45 183 45 184 45 185 45 186 45 187 45 188 45 189 45 190 45 191 45 192 45 193 45 194 45 195 45 196 45 197 45 198 45 199 45 200 45 201 45 202 45 203 45 204 45 205 45 206 45 207 45 208 45 209 45 210 45 211 45 212 45 213 45 214 45 215 45 216 45 217 45 218 45 219 45 220 45 221 45 222 45 223 45 224 45 225 45 226 45 227 45 228 45 229 45 230 45 231 45 232 45 233 45 234 45 235 45 236 45 237 45 238 45 239 45 240 45 241 45 242 45 243 45 244 45 245 45 246 45 247 45 248 45 249 45 250 45 251 45 252 45 253 45 254 45 255 45 256 45 257 45 258 45 259 45 260 45 261 45 262 45 263 45 264 45 265 45 266 45 267 45 268 45 269 45 270 45 271 45 272 45 273 45 274 45 275 45 276 45 277 45 278 45 279 45 280 45 281 45 282 45 283 45 284 45 285 45 286 45 287 45 288 45 289 45 290 45 291 45 292 45 293 45 294 45 295 45 296 45 297 45 298 45 299 46 0 46 1 46 2 46 3 46 4 46 5 46 6 46 7 46 8 46 9 46 10 46 11 46 12 46 13 46 14 46 15 46 16 46 17 46 18 46 19 46 20 46 21 46 22 46 23 46 24 46 25 46 26 46 27 46 28 46 29 46 30 46 31 46 32 46 33 46 34 46 35 46 36 46 37 46 38 46 39 46 40 46 41 46 42 46 43 46 44 46 45 46 46 46 47 46 48 46 49 46 50 46 51 46 52 46 53 46 54 46 55 46 56 46 57 46 58 46 59 46 60 46 61 46 62 46 63 46 64 46 65 46 66 46 67 46 68 46 69 46 70 46 71 46 72 46 73 46 74 46 75 46 76 46 77 46 78 46 79 46 80 46 81 46 82 46 83 46 84 46 85 46 86 46 87 46 88 46 89 46 90 46 91 46 92 46 93 46 94 46 95 46 96 46 97 46 98 46 99 46 100 46 101 46 102 46 103 46 104 46 105 46 106 46 107 46 108 46 109 46 110 46 111 46 112 46 113 46 114 46 115 46 116 46 117 46 118 46 119 46 120 46 121 46 122 46 123 46 124 46 125 46 126 46 127 46 128 46 129 46 130 46 131 46 132 46 133 46 134 46 135 46 136 46 137 46 138 46 139 46 140 46 141 46 142 46 143 46 144 46 145 46 146 46 147 46 148 46 149 46 150 46 151 46 152 46 153 46 154 46 155 46 156 46 157 46 158 46 159 46 160 46 161 46 162 46 163 46 164 46 165 46 166 46 167 46 168 46 169 46 170 46 171 46 172 46 173 46 174 46 175 46 176 46 177 46 178 46 179 46 180 46 181 46 182 46 183 46 184 46 185 46 186 46 187 46 188 46 189 46 190 46 191 46 192 46 193 46 194 46 195 46 196 46 197 46 198 46 199 46 200 46 201 46 202 46 203 46 204 46 205 46 206 46 207 46 208 46 209 46 210 46 211 46 212 46 213 46 214 46 215 46 216 46 217 46 218 46 219 46 220 46 221 46 222 46 223 46 224 46 225 46 226 46 227 46 228 46 229 46 230 46 231 46 232 46 233 46 234 46 235 46 236 46 237 46 238 46 239 46 240 46 241 46 242 46 243 46 244 46 245 46 246 46 247 46 248 46 249 46 250 46 251 46 252 46 253 46 254 46 255 46 256 46 257 46 258 46 259 46 260 46 261 46 262 46 263 46 264 46 265 46 266 46 267 46 268 46 269 46 270 46 271 46 272 46 273 46 274 46 275 46 276 46 277 46 278 46 279 46 280 46 281 46 282 46 283 46 284 46 285 46 286 46 287 46 288 46 289 46 290 46 291 46 292 46 293 46 294 46 295 46 296 46 297 46 298 46 299 47 0 47 1 47 2 47 3 47 4 47 5 47 6 47 7 47 8 47 9 47 10 47 11 47 12 47 13 47 14 47 15 47 16 47 17 47 18 47 19 47 20 47 21 47 22 47 23 47 24 47 25 47 26 47 27 47 28 47 29 47 30 47 31 47 32 47 33 47 34 47 35 47 36 47 37 47 38 47 39 47 40 47 41 47 42 47 43 47 44 47 45 47 46 47 47 47 48 47 49 47 50 47 51 47 52 47 53 47 54 47 55 47 56 47 57 47 58 47 59 47 60 47 61 47 62 47 63 47 64 47 65 47 66 47 67 47 68 47 69 47 70 47 71 47 72 47 73 47 74 47 75 47 76 47 77 47 78 47 79 47 80 47 81 47 82 47 83 47 84 47 85 47 86 47 87 47 88 47 89 47 90 47 91 47 92 47 93 47 94 47 95 47 96 47 97 47 98 47 99 47 100 47 101 47 102 47 103 47 104 47 105 47 106 47 107 47 108 47 109 47 110 47 111 47 112 47 113 47 114 47 115 47 116 47 117 47 118 47 119 47 120 47 121 47 122 47 123 47 124 47 125 47 126 47 127 47 128 47 129 47 130 47 131 47 132 47 133 47 134 47 135 47 136 47 137 47 138 47 139 47 140 47 141 47 142 47 143 47 144 47 145 47 146 47 147 47 148 47 149 47 150 47 151 47 152 47 153 47 154 47 155 47 156 47 157 47 158 47 159 47 160 47 161 47 162 47 163 47 164 47 165 47 166 47 167 47 168 47 169 47 170 47 171 47 172 47 173 47 174 47 175 47 176 47 177 47 178 47 179 47 180 47 181 47 182 47 183 47 184 47 185 47 186 47 187 47 188 47 189 47 190 47 191 47 192 47 193 47 194 47 195 47 196 47 197 47 198 47 199 47 200 47 201 47 202 47 203 47 204 47 205 47 206 47 207 47 208 47 209 47 210 47 211 47 212 47 213 47 214 47 215 47 216 47 217 47 218 47 219 47 220 47 221 47 222 47 223 47 224 47 225 47 226 47 227 47 228 47 229 47 230 47 231 47 232 47 233 47 234 47 235 47 236 47 237 47 238 47 239 47 240 47 241 47 242 47 243 47 244 47 245 47 246 47 247 47 248 47 249 47 250 47 251 47 252 47 253 47 254 47 255 47 256 47 257 47 258 47 259 47 260 47 261 47 262 47 263 47 264 47 265 47 266 47 267 47 268 47 269 47 270 47 271 47 272 47 273 47 274 47 275 47 276 47 277 47 278 47 279 47 280 47 281 47 282 47 283 47 284 47 285 47 286 47 287 47 288 47 289 47 290 47 291 47 292 47 293 47 294 47 295 47 296 47 297 47 298 47 299 48 0 48 1 48 2 48 3 48 4 48 5 48 6 48 7 48 8 48 9 48 10 48 11 48 12 48 13 48 14 48 15 48 16 48 17 48 18 48 19 48 20 48 21 48 22 48 23 48 24 48 25 48 26 48 27 48 28 48 29 48 30 48 31 48 32 48 33 48 34 48 35 48 36 48 37 48 38 48 39 48 40 48 41 48 42 48 43 48 44 48 45 48 46 48 47 48 48 48 49 48 50 48 51 48 52 48 53 48 54 48 55 48 56 48 57 48 58 48 59 48 60 48 61 48 62 48 63 48 64 48 65 48 66 48 67 48 68 48 69 48 70 48 71 48 72 48 73 48 74 48 75 48 76 48 77 48 78 48 79 48 80 48 81 48 82 48 83 48 84 48 85 48 86 48 87 48 88 48 89 48 90 48 91 48 92 48 93 48 94 48 95 48 96 48 97 48 98 48 99 48 100 48 101 48 102 48 103 48 104 48 105 48 106 48 107 48 108 48 109 48 110 48 111 48 112 48 113 48 114 48 115 48 116 48 117 48 118 48 119 48 120 48 121 48 122 48 123 48 124 48 125 48 126 48 127 48 128 48 129 48 130 48 131 48 132 48 133 48 134 48 135 48 136 48 137 48 138 48 139 48 140 48 141 48 142 48 143 48 144 48 145 48 146 48 147 48 148 48 149 48 150 48 151 48 152 48 153 48 154 48 155 48 156 48 157 48 158 48 159 48 160 48 161 48 162 48 163 48 164 48 165 48 166 48 167 48 168 48 169 48 170 48 171 48 172 48 173 48 174 48 175 48 176 48 177 48 178 48 179 48 180 48 181 48 182 48 183 48 184 48 185 48 186 48 187 48 188 48 189 48 190 48 191 48 192 48 193 48 194 48 195 48 196 48 197 48 198 48 199 48 200 48 201 48 202 48 203 48 204 48 205 48 206 48 207 48 208 48 209 48 210 48 211 48 212 48 213 48 214 48 215 48 216 48 217 48 218 48 219 48 220 48 221 48 222 48 223 48 224 48 225 48 226 48 227 48 228 48 229 48 230 48 231 48 232 48 233 48 234 48 235 48 236 48 237 48 238 48 239 48 240 48 241 48 242 48 243 48 244 48 245 48 246 48 247 48 248 48 249 48 250 48 251 48 252 48 253 48 254 48 255 48 256 48 257 48 258 48 259 48 260 48 261 48 262 48 263 48 264 48 265 48 266 48 267 48 268 48 269 48 270 48 271 48 272 48 273 48 274 48 275 48 276 48 277 48 278 48 279 48 280 48 281 48 282 48 283 48 284 48 285 48 286 48 287 48 288 48 289 48 290 48 291 48 292 48 293 48 294 48 295 48 296 48 297 48 298 48 299 49 0 49 1 49 2 49 3 49 4 49 5 49 6 49 7 49 8 49 9 49 10 49 11 49 12 49 13 49 14 49 15 49 16 49 17 49 18 49 19 49 20 49 21 49 22 49 23 49 24 49 25 49 26 49 27 49 28 49 29 49 30 49 31 49 32 49 33 49 34 49 35 49 36 49 37 49 38 49 39 49 40 49 41 49 42 49 43 49 44 49 45 49 46 49 47 49 48 49 49 49 50 49 51 49 52 49 53 49 54 49 55 49 56 49 57 49 58 49 59 49 60 49 61 49 62 49 63 49 64 49 65 49 66 49 67 49 68 49 69 49 70 49 71 49 72 49 73 49 74 49 75 49 76 49 77 49 78 49 79 49 80 49 81 49 82 49 83 49 84 49 85 49 86 49 87 49 88 49 89 49 90 49 91 49 92 49 93 49 94 49 95 49 96 49 97 49 98 49 99 49 100 49 101 49 102 49 103 49 104 49 105 49 106 49 107 49 108 49 109 49 110 49 111 49 112 49 113 49 114 49 115 49 116 49 117 49 118 49 119 49 120 49 121 49 122 49 123 49 124 49 125 49 126 49 127 49 128 49 129 49 130 49 131 49 132 49 133 49 134 49 135 49 136 49 137 49 138 49 139 49 140 49 141 49 142 49 143 49 144 49 145 49 146 49 147 49 148 49 149 49 150 49 151 49 152 49 153 49 154 49 155 49 156 49 157 49 158 49 159 49 160 49 161 49 162 49 163 49 164 49 165 49 166 49 167 49 168 49 169 49 170 49 171 49 172 49 173 49 174 49 175 49 176 49 177 49 178 49 179 49 180 49 181 49 182 49 183 49 184 49 185 49 186 49 187 49 188 49 189 49 190 49 191 49 192 49 193 49 194 49 195 49 196 49 197 49 198 49 199 49 200 49 201 49 202 49 203 49 204 49 205 49 206 49 207 49 208 49 209 49 210 49 211 49 212 49 213 49 214 49 215 49 216 49 217 49 218 49 219 49 220 49 221 49 222 49 223 49 224 49 225 49 226 49 227 49 228 49 229 49 230 49 231 49 232 49 233 49 234 49 235 49 236 49 237 49 238 49 239 49 240 49 241 49 242 49 243 49 244 49 245 49 246 49 247 49 248 49 249 49 250 49 251 49 252 49 253 49 254 49 255 49 256 49 257 49 258 49 259 49 260 49 261 49 262 49 263 49 264 49 265 49 266 49 267 49 268 49 269 49 270 49 271 49 272 49 273 49 274 49 275 49 276 49 277 49 278 49 279 49 280 49 281 49 282 49 283 49 284 49 285 49 286 49 287 49 288 49 289 49 290 49 291 49 292 49 293 49 294 49 295 49 296 49 297 49 298 49 299 50 0 50 1 50 2 50 3 50 4 50 5 50 6 50 7 50 8 50 9 50 10 50 11 50 12 50 13 50 14 50 15 50 16 50 17 50 18 50 19 50 20 50 21 50 22 50 23 50 24 50 25 50 26 50 27 50 28 50 29 50 30 50 31 50 32 50 33 50 34 50 35 50 36 50 37 50 38 50 39 50 40 50 41 50 42 50 43 50 44 50 45 50 46 50 47 50 48 50 49 50 50 50 51 50 52 50 53 50 54 50 55 50 56 50 57 50 58 50 59 50 60 50 61 50 62 50 63 50 64 50 65 50 66 50 67 50 68 50 69 50 70 50 71 50 72 50 73 50 74 50 75 50 76 50 77 50 78 50 79 50 80 50 81 50 82 50 83 50 84 50 85 50 86 50 87 50 88 50 89 50 90 50 91 50 92 50 93 50 94 50 95 50 96 50 97 50 98 50 99 50 100 50 101 50 102 50 103 50 104 50 105 50 106 50 107 50 108 50 109 50 110 50 111 50 112 50 113 50 114 50 115 50 116 50 117 50 118 50 119 50 120 50 121 50 122 50 123 50 124 50 125 50 126 50 127 50 128 50 129 50 130 50 131 50 132 50 133 50 134 50 135 50 136 50 137 50 138 50 139 50 140 50 141 50 142 50 143 50 144 50 145 50 146 50 147 50 148 50 149 50 150 50 151 50 152 50 153 50 154 50 155 50 156 50 157 50 158 50 159 50 160 50 161 50 162 50 163 50 164 50 165 50 166 50 167 50 168 50 169 50 170 50 171 50 172 50 173 50 174 50 175 50 176 50 177 50 178 50 179 50 180 50 181 50 182 50 183 50 184 50 185 50 186 50 187 50 188 50 189 50 190 50 191 50 192 50 193 50 194 50 195 50 196 50 197 50 198 50 199 50 200 50 201 50 202 50 203 50 204 50 205 50 206 50 207 50 208 50 209 50 210 50 211 50 212 50 213 50 214 50 215 50 216 50 217 50 218 50 219 50 220 50 221 50 222 50 223 50 224 50 225 50 226 50 227 50 228 50 229 50 230 50 231 50 232 50 233 50 234 50 235 50 236 50 237 50 238 50 239 50 240 50 241 50 242 50 243 50 244 50 245 50 246 50 247 50 248 50 249 50 250 50 251 50 252 50 253 50 254 50 255 50 256 50 257 50 258 50 259 50 260 50 261 50 262 50 263 50 264 50 265 50 266 50 267 50 268 50 269 50 270 50 271 50 272 50 273 50 274 50 275 50 276 50 277 50 278 50 279 50 280 50 281 50 282 50 283 50 284 50 285 50 286 50 287 50 288 50 289 50 290 50 291 50 292 50 293 50 294 50 295 50 296 50 297 50 298 50 299 51 0 51 1 51 2 51 3 51 4 51 5 51 6 51 7 51 8 51 9 51 10 51 11 51 12 51 13 51 14 51 15 51 16 51 17 51 18 51 19 51 20 51 21 51 22 51 23 51 24 51 25 51 26 51 27 51 28 51 29 51 30 51 31 51 32 51 33 51 34 51 35 51 36 51 37 51 38 51 39 51 40 51 41 51 42 51 43 51 44 51 45 51 46 51 47 51 48 51 49 51 50 51 51 51 52 51 53 51 54 51 55 51 56 51 57 51 58 51 59 51 60 51 61 51 62 51 63 51 64 51 65 51 66 51 67 51 68 51 69 51 70 51 71 51 72 51 73 51 74 51 75 51 76 51 77 51 78 51 79 51 80 51 81 51 82 51 83 51 84 51 85 51 86 51 87 51 88 51 89 51 90 51 91 51 92 51 93 51 94 51 95 51 96 51 97 51 98 51 99 51 100 51 101 51 102 51 103 51 104 51 105 51 106 51 107 51 108 51 109 51 110 51 111 51 112 51 113 51 114 51 115 51 116 51 117 51 118 51 119 51 120 51 121 51 122 51 123 51 124 51 125 51 126 51 127 51 128 51 129 51 130 51 131 51 132 51 133 51 134 51 135 51 136 51 137 51 138 51 139 51 140 51 141 51 142 51 143 51 144 51 145 51 146 51 147 51 148 51 149 51 150 51 151 51 152 51 153 51 154 51 155 51 156 51 157 51 158 51 159 51 160 51 161 51 162 51 163 51 164 51 165 51 166 51 167 51 168 51 169 51 170 51 171 51 172 51 173 51 174 51 175 51 176 51 177 51 178 51 179 51 180 51 181 51 182 51 183 51 184 51 185 51 186 51 187 51 188 51 189 51 190 51 191 51 192 51 193 51 194 51 195 51 196 51 197 51 198 51 199 51 200 51 201 51 202 51 203 51 204 51 205 51 206 51 207 51 208 51 209 51 210 51 211 51 212 51 213 51 214 51 215 51 216 51 217 51 218 51 219 51 220 51 221 51 222 51 223 51 224 51 225 51 226 51 227 51 228 51 229 51 230 51 231 51 232 51 233 51 234 51 235 51 236 51 237 51 238 51 239 51 240 51 241 51 242 51 243 51 244 51 245 51 246 51 247 51 248 51 249 51 250 51 251 51 252 51 253 51 254 51 255 51 256 51 257 51 258 51 259 51 260 51 261 51 262 51 263 51 264 51 265 51 266 51 267 51 268 51 269 51 270 51 271 51 272 51 273 51 274 51 275 51 276 51 277 51 278 51 279 51 280 51 281 51 282 51 283 51 284 51 285 51 286 51 287 51 288 51 289 51 290 51 291 51 292 51 293 51 294 51 295 51 296 51 297 51 298 51 299 52 0 52 1 52 2 52 3 52 4 52 5 52 6 52 7 52 8 52 9 52 10 52 11 52 12 52 13 52 14 52 15 52 16 52 17 52 18 52 19 52 20 52 21 52 22 52 23 52 24 52 25 52 26 52 27 52 28 52 29 52 30 52 31 52 32 52 33 52 34 52 35 52 36 52 37 52 38 52 39 52 40 52 41 52 42 52 43 52 44 52 45 52 46 52 47 52 48 52 49 52 50 52 51 52 52 52 53 52 54 52 55 52 56 52 57 52 58 52 59 52 60 52 61 52 62 52 63 52 64 52 65 52 66 52 67 52 68 52 69 52 70 52 71 52 72 52 73 52 74 52 75 52 76 52 77 52 78 52 79 52 80 52 81 52 82 52 83 52 84 52 85 52 86 52 87 52 88 52 89 52 90 52 91 52 92 52 93 52 94 52 95 52 96 52 97 52 98 52 99 52 100 52 101 52 102 52 103 52 104 52 105 52 106 52 107 52 108 52 109 52 110 52 111 52 112 52 113 52 114 52 115 52 116 52 117 52 118 52 119 52 120 52 121 52 122 52 123 52 124 52 125 52 126 52 127 52 128 52 129 52 130 52 131 52 132 52 133 52 134 52 135 52 136 52 137 52 138 52 139 52 140 52 141 52 142 52 143 52 144 52 145 52 146 52 147 52 148 52 149 52 150 52 151 52 152 52 153 52 154 52 155 52 156 52 157 52 158 52 159 52 160 52 161 52 162 52 163 52 164 52 165 52 166 52 167 52 168 52 169 52 170 52 171 52 172 52 173 52 174 52 175 52 176 52 177 52 178 52 179 52 180 52 181 52 182 52 183 52 184 52 185 52 186 52 187 52 188 52 189 52 190 52 191 52 192 52 193 52 194 52 195 52 196 52 197 52 198 52 199 52 200 52 201 52 202 52 203 52 204 52 205 52 206 52 207 52 208 52 209 52 210 52 211 52 212 52 213 52 214 52 215 52 216 52 217 52 218 52 219 52 220 52 221 52 222 52 223 52 224 52 225 52 226 52 227 52 228 52 229 52 230 52 231 52 232 52 233 52 234 52 235 52 236 52 237 52 238 52 239 52 240 52 241 52 242 52 243 52 244 52 245 52 246 52 247 52 248 52 249 52 250 52 251 52 252 52 253 52 254 52 255 52 256 52 257 52 258 52 259 52 260 52 261 52 262 52 263 52 264 52 265 52 266 52 267 52 268 52 269 52 270 52 271 52 272 52 273 52 274 52 275 52 276 52 277 52 278 52 279 52 280 52 281 52 282 52 283 52 284 52 285 52 286 52 287 52 288 52 289 52 290 52 291 52 292 52 293 52 294 52 295 52 296 52 297 52 298 52 299 53 0 53 1 53 2 53 3 53 4 53 5 53 6 53 7 53 8 53 9 53 10 53 11 53 12 53 13 53 14 53 15 53 16 53 17 53 18 53 19 53 20 53 21 53 22 53 23 53 24 53 25 53 26 53 27 53 28 53 29 53 30 53 31 53 32 53 33 53 34 53 35 53 36 53 37 53 38 53 39 53 40 53 41 53 42 53 43 53 44 53 45 53 46 53 47 53 48 53 49 53 50 53 51 53 52 53 53 53 54 53 55 53 56 53 57 53 58 53 59 53 60 53 61 53 62 53 63 53 64 53 65 53 66 53 67 53 68 53 69 53 70 53 71 53 72 53 73 53 74 53 75 53 76 53 77 53 78 53 79 53 80 53 81 53 82 53 83 53 84 53 85 53 86 53 87 53 88 53 89 53 90 53 91 53 92 53 93 53 94 53 95 53 96 53 97 53 98 53 99 53 100 53 101 53 102 53 103 53 104 53 105 53 106 53 107 53 108 53 109 53 110 53 111 53 112 53 113 53 114 53 115 53 116 53 117 53 118 53 119 53 120 53 121 53 122 53 123 53 124 53 125 53 126 53 127 53 128 53 129 53 130 53 131 53 132 53 133 53 134 53 135 53 136 53 137 53 138 53 139 53 140 53 141 53 142 53 143 53 144 53 145 53 146 53 147 53 148 53 149 53 150 53 151 53 152 53 153 53 154 53 155 53 156 53 157 53 158 53 159 53 160 53 161 53 162 53 163 53 164 53 165 53 166 53 167 53 168 53 169 53 170 53 171 53 172 53 173 53 174 53 175 53 176 53 177 53 178 53 179 53 180 53 181 53 182 53 183 53 184 53 185 53 186 53 187 53 188 53 189 53 190 53 191 53 192 53 193 53 194 53 195 53 196 53 197 53 198 53 199 53 200 53 201 53 202 53 203 53 204 53 205 53 206 53 207 53 208 53 209 53 210 53 211 53 212 53 213 53 214 53 215 53 216 53 217 53 218 53 219 53 220 53 221 53 222 53 223 53 224 53 225 53 226 53 227 53 228 53 229 53 230 53 231 53 232 53 233 53 234 53 235 53 236 53 237 53 238 53 239 53 240 53 241 53 242 53 243 53 244 53 245 53 246 53 247 53 248 53 249 53 250 53 251 53 252 53 253 53 254 53 255 53 256 53 257 53 258 53 259 53 260 53 261 53 262 53 263 53 264 53 265 53 266 53 267 53 268 53 269 53 270 53 271 53 272 53 273 53 274 53 275 53 276 53 277 53 278 53 279 53 280 53 281 53 282 53 283 53 284 53 285 53 286 53 287 53 288 53 289 53 290 53 291 53 292 53 293 53 294 53 295 53 296 53 297 53 298 53 299 54 0 54 1 54 2 54 3 54 4 54 5 54 6 54 7 54 8 54 9 54 10 54 11 54 12 54 13 54 14 54 15 54 16 54 17 54 18 54 19 54 20 54 21 54 22 54 23 54 24 54 25 54 26 54 27 54 28 54 29 54 30 54 31 54 32 54 33 54 34 54 35 54 36 54 37 54 38 54 39 54 40 54 41 54 42 54 43 54 44 54 45 54 46 54 47 54 48 54 49 54 50 54 51 54 52 54 53 54 54 54 55 54 56 54 57 54 58 54 59 54 60 54 61 54 62 54 63 54 64 54 65 54 66 54 67 54 68 54 69 54 70 54 71 54 72 54 73 54 74 54 75 54 76 54 77 54 78 54 79 54 80 54 81 54 82 54 83 54 84 54 85 54 86 54 87 54 88 54 89 54 90 54 91 54 92 54 93 54 94 54 95 54 96 54 97 54 98 54 99 54 100 54 101 54 102 54 103 54 104 54 105 54 106 54 107 54 108 54 109 54 110 54 111 54 112 54 113 54 114 54 115 54 116 54 117 54 118 54 119 54 120 54 121 54 122 54 123 54 124 54 125 54 126 54 127 54 128 54 129 54 130 54 131 54 132 54 133 54 134 54 135 54 136 54 137 54 138 54 139 54 140 54 141 54 142 54 143 54 144 54 145 54 146 54 147 54 148 54 149 54 150 54 151 54 152 54 153 54 154 54 155 54 156 54 157 54 158 54 159 54 160 54 161 54 162 54 163 54 164 54 165 54 166 54 167 54 168 54 169 54 170 54 171 54 172 54 173 54 174 54 175 54 176 54 177 54 178 54 179 54 180 54 181 54 182 54 183 54 184 54 185 54 186 54 187 54 188 54 189 54 190 54 191 54 192 54 193 54 194 54 195 54 196 54 197 54 198 54 199 54 200 54 201 54 202 54 203 54 204 54 205 54 206 54 207 54 208 54 209 54 210 54 211 54 212 54 213 54 214 54 215 54 216 54 217 54 218 54 219 54 220 54 221 54 222 54 223 54 224 54 225 54 226 54 227 54 228 54 229 54 230 54 231 54 232 54 233 54 234 54 235 54 236 54 237 54 238 54 239 54 240 54 241 54 242 54 243 54 244 54 245 54 246 54 247 54 248 54 249 54 250 54 251 54 252 54 253 54 254 54 255 54 256 54 257 54 258 54 259 54 260 54 261 54 262 54 263 54 264 54 265 54 266 54 267 54 268 54 269 54 270 54 271 54 272 54 273 54 274 54 275 54 276 54 277 54 278 54 279 54 280 54 281 54 282 54 283 54 284 54 285 54 286 54 287 54 288 54 289 54 290 54 291 54 292 54 293 54 294 54 295 54 296 54 297 54 298 54 299 55 0 55 1 55 2 55 3 55 4 55 5 55 6 55 7 55 8 55 9 55 10 55 11 55 12 55 13 55 14 55 15 55 16 55 17 55 18 55 19 55 20 55 21 55 22 55 23 55 24 55 25 55 26 55 27 55 28 55 29 55 30 55 31 55 32 55 33 55 34 55 35 55 36 55 37 55 38 55 39 55 40 55 41 55 42 55 43 55 44 55 45 55 46 55 47 55 48 55 49 55 50 55 51 55 52 55 53 55 54 55 55 55 56 55 57 55 58 55 59 55 60 55 61 55 62 55 63 55 64 55 65 55 66 55 67 55 68 55 69 55 70 55 71 55 72 55 73 55 74 55 75 55 76 55 77 55 78 55 79 55 80 55 81 55 82 55 83 55 84 55 85 55 86 55 87 55 88 55 89 55 90 55 91 55 92 55 93 55 94 55 95 55 96 55 97 55 98 55 99 55 100 55 101 55 102 55 103 55 104 55 105 55 106 55 107 55 108 55 109 55 110 55 111 55 112 55 113 55 114 55 115 55 116 55 117 55 118 55 119 55 120 55 121 55 122 55 123 55 124 55 125 55 126 55 127 55 128 55 129 55 130 55 131 55 132 55 133 55 134 55 135 55 136 55 137 55 138 55 139 55 140 55 141 55 142 55 143 55 144 55 145 55 146 55 147 55 148 55 149 55 150 55 151 55 152 55 153 55 154 55 155 55 156 55 157 55 158 55 159 55 160 55 161 55 162 55 163 55 164 55 165 55 166 55 167 55 168 55 169 55 170 55 171 55 172 55 173 55 174 55 175 55 176 55 177 55 178 55 179 55 180 55 181 55 182 55 183 55 184 55 185 55 186 55 187 55 188 55 189 55 190 55 191 55 192 55 193 55 194 55 195 55 196 55 197 55 198 55 199 55 200 55 201 55 202 55 203 55 204 55 205 55 206 55 207 55 208 55 209 55 210 55 211 55 212 55 213 55 214 55 215 55 216 55 217 55 218 55 219 55 220 55 221 55 222 55 223 55 224 55 225 55 226 55 227 55 228 55 229 55 230 55 231 55 232 55 233 55 234 55 235 55 236 55 237 55 238 55 239 55 240 55 241 55 242 55 243 55 244 55 245 55 246 55 247 55 248 55 249 55 250 55 251 55 252 55 253 55 254 55 255 55 256 55 257 55 258 55 259 55 260 55 261 55 262 55 263 55 264 55 265 55 266 55 267 55 268 55 269 55 270 55 271 55 272 55 273 55 274 55 275 55 276 55 277 55 278 55 279 55 280 55 281 55 282 55 283 55 284 55 285 55 286 55 287 55 288 55 289 55 290 55 291 55 292 55 293 55 294 55 295 55 296 55 297 55 298 55 299 56 0 56 1 56 2 56 3 56 4 56 5 56 6 56 7 56 8 56 9 56 10 56 11 56 12 56 13 56 14 56 15 56 16 56 17 56 18 56 19 56 20 56 21 56 22 56 23 56 24 56 25 56 26 56 27 56 28 56 29 56 30 56 31 56 32 56 33 56 34 56 35 56 36 56 37 56 38 56 39 56 40 56 41 56 42 56 43 56 44 56 45 56 46 56 47 56 48 56 49 56 50 56 51 56 52 56 53 56 54 56 55 56 56 56 57 56 58 56 59 56 60 56 61 56 62 56 63 56 64 56 65 56 66 56 67 56 68 56 69 56 70 56 71 56 72 56 73 56 74 56 75 56 76 56 77 56 78 56 79 56 80 56 81 56 82 56 83 56 84 56 85 56 86 56 87 56 88 56 89 56 90 56 91 56 92 56 93 56 94 56 95 56 96 56 97 56 98 56 99 56 100 56 101 56 102 56 103 56 104 56 105 56 106 56 107 56 108 56 109 56 110 56 111 56 112 56 113 56 114 56 115 56 116 56 117 56 118 56 119 56 120 56 121 56 122 56 123 56 124 56 125 56 126 56 127 56 128 56 129 56 130 56 131 56 132 56 133 56 134 56 135 56 136 56 137 56 138 56 139 56 140 56 141 56 142 56 143 56 144 56 145 56 146 56 147 56 148 56 149 56 150 56 151 56 152 56 153 56 154 56 155 56 156 56 157 56 158 56 159 56 160 56 161 56 162 56 163 56 164 56 165 56 166 56 167 56 168 56 169 56 170 56 171 56 172 56 173 56 174 56 175 56 176 56 177 56 178 56 179 56 180 56 181 56 182 56 183 56 184 56 185 56 186 56 187 56 188 56 189 56 190 56 191 56 192 56 193 56 194 56 195 56 196 56 197 56 198 56 199 56 200 56 201 56 202 56 203 56 204 56 205 56 206 56 207 56 208 56 209 56 210 56 211 56 212 56 213 56 214 56 215 56 216 56 217 56 218 56 219 56 220 56 221 56 222 56 223 56 224 56 225 56 226 56 227 56 228 56 229 56 230 56 231 56 232 56 233 56 234 56 235 56 236 56 237 56 238 56 239 56 240 56 241 56 242 56 243 56 244 56 245 56 246 56 247 56 248 56 249 56 250 56 251 56 252 56 253 56 254 56 255 56 256 56 257 56 258 56 259 56 260 56 261 56 262 56 263 56 264 56 265 56 266 56 267 56 268 56 269 56 270 56 271 56 272 56 273 56 274 56 275 56 276 56 277 56 278 56 279 56 280 56 281 56 282 56 283 56 284 56 285 56 286 56 287 56 288 56 289 56 290 56 291 56 292 56 293 56 294 56 295 56 296 56 297 56 298 56 299 57 0 57 1 57 2 57 3 57 4 57 5 57 6 57 7 57 8 57 9 57 10 57 11 57 12 57 13 57 14 57 15 57 16 57 17 57 18 57 19 57 20 57 21 57 22 57 23 57 24 57 25 57 26 57 27 57 28 57 29 57 30 57 31 57 32 57 33 57 34 57 35 57 36 57 37 57 38 57 39 57 40 57 41 57 42 57 43 57 44 57 45 57 46 57 47 57 48 57 49 57 50 57 51 57 52 57 53 57 54 57 55 57 56 57 57 57 58 57 59 57 60 57 61 57 62 57 63 57 64 57 65 57 66 57 67 57 68 57 69 57 70 57 71 57 72 57 73 57 74 57 75 57 76 57 77 57 78 57 79 57 80 57 81 57 82 57 83 57 84 57 85 57 86 57 87 57 88 57 89 57 90 57 91 57 92 57 93 57 94 57 95 57 96 57 97 57 98 57 99 57 100 57 101 57 102 57 103 57 104 57 105 57 106 57 107 57 108 57 109 57 110 57 111 57 112 57 113 57 114 57 115 57 116 57 117 57 118 57 119 57 120 57 121 57 122 57 123 57 124 57 125 57 126 57 127 57 128 57 129 57 130 57 131 57 132 57 133 57 134 57 135 57 136 57 137 57 138 57 139 57 140 57 141 57 142 57 143 57 144 57 145 57 146 57 147 57 148 57 149 57 150 57 151 57 152 57 153 57 154 57 155 57 156 57 157 57 158 57 159 57 160 57 161 57 162 57 163 57 164 57 165 57 166 57 167 57 168 57 169 57 170 57 171 57 172 57 173 57 174 57 175 57 176 57 177 57 178 57 179 57 180 57 181 57 182 57 183 57 184 57 185 57 186 57 187 57 188 57 189 57 190 57 191 57 192 57 193 57 194 57 195 57 196 57 197 57 198 57 199 57 200 57 201 57 202 57 203 57 204 57 205 57 206 57 207 57 208 57 209 57 210 57 211 57 212 57 213 57 214 57 215 57 216 57 217 57 218 57 219 57 220 57 221 57 222 57 223 57 224 57 225 57 226 57 227 57 228 57 229 57 230 57 231 57 232 57 233 57 234 57 235 57 236 57 237 57 238 57 239 57 240 57 241 57 242 57 243 57 244 57 245 57 246 57 247 57 248 57 249 57 250 57 251 57 252 57 253 57 254 57 255 57 256 57 257 57 258 57 259 57 260 57 261 57 262 57 263 57 264 57 265 57 266 57 267 57 268 57 269 57 270 57 271 57 272 57 273 57 274 57 275 57 276 57 277 57 278 57 279 57 280 57 281 57 282 57 283 57 284 57 285 57 286 57 287 57 288 57 289 57 290 57 291 57 292 57 293 57 294 57 295 57 296 57 297 57 298 57 299 58 0 58 1 58 2 58 3 58 4 58 5 58 6 58 7 58 8 58 9 58 10 58 11 58 12 58 13 58 14 58 15 58 16 58 17 58 18 58 19 58 20 58 21 58 22 58 23 58 24 58 25 58 26 58 27 58 28 58 29 58 30 58 31 58 32 58 33 58 34 58 35 58 36 58 37 58 38 58 39 58 40 58 41 58 42 58 43 58 44 58 45 58 46 58 47 58 48 58 49 58 50 58 51 58 52 58 53 58 54 58 55 58 56 58 57 58 58 58 59 58 60 58 61 58 62 58 63 58 64 58 65 58 66 58 67 58 68 58 69 58 70 58 71 58 72 58 73 58 74 58 75 58 76 58 77 58 78 58 79 58 80 58 81 58 82 58 83 58 84 58 85 58 86 58 87 58 88 58 89 58 90 58 91 58 92 58 93 58 94 58 95 58 96 58 97 58 98 58 99 58 100 58 101 58 102 58 103 58 104 58 105 58 106 58 107 58 108 58 109 58 110 58 111 58 112 58 113 58 114 58 115 58 116 58 117 58 118 58 119 58 120 58 121 58 122 58 123 58 124 58 125 58 126 58 127 58 128 58 129 58 130 58 131 58 132 58 133 58 134 58 135 58 136 58 137 58 138 58 139 58 140 58 141 58 142 58 143 58 144 58 145 58 146 58 147 58 148 58 149 58 150 58 151 58 152 58 153 58 154 58 155 58 156 58 157 58 158 58 159 58 160 58 161 58 162 58 163 58 164 58 165 58 166 58 167 58 168 58 169 58 170 58 171 58 172 58 173 58 174 58 175 58 176 58 177 58 178 58 179 58 180 58 181 58 182 58 183 58 184 58 185 58 186 58 187 58 188 58 189 58 190 58 191 58 192 58 193 58 194 58 195 58 196 58 197 58 198 58 199 58 200 58 201 58 202 58 203 58 204 58 205 58 206 58 207 58 208 58 209 58 210 58 211 58 212 58 213 58 214 58 215 58 216 58 217 58 218 58 219 58 220 58 221 58 222 58 223 58 224 58 225 58 226 58 227 58 228 58 229 58 230 58 231 58 232 58 233 58 234 58 235 58 236 58 237 58 238 58 239 58 240 58 241 58 242 58 243 58 244 58 245 58 246 58 247 58 248 58 249 58 250 58 251 58 252 58 253 58 254 58 255 58 256 58 257 58 258 58 259 58 260 58 261 58 262 58 263 58 264 58 265 58 266 58 267 58 268 58 269 58 270 58 271 58 272 58 273 58 274 58 275 58 276 58 277 58 278 58 279 58 280 58 281 58 282 58 283 58 284 58 285 58 286 58 287 58 288 58 289 58 290 58 291 58 292 58 293 58 294 58 295 58 296 58 297 58 298 58 299 59 0 59 1 59 2 59 3 59 4 59 5 59 6 59 7 59 8 59 9 59 10 59 11 59 12 59 13 59 14 59 15 59 16 59 17 59 18 59 19 59 20 59 21 59 22 59 23 59 24 59 25 59 26 59 27 59 28 59 29 59 30 59 31 59 32 59 33 59 34 59 35 59 36 59 37 59 38 59 39 59 40 59 41 59 42 59 43 59 44 59 45 59 46 59 47 59 48 59 49 59 50 59 51 59 52 59 53 59 54 59 55 59 56 59 57 59 58 59 59 59 60 59 61 59 62 59 63 59 64 59 65 59 66 59 67 59 68 59 69 59 70 59 71 59 72 59 73 59 74 59 75 59 76 59 77 59 78 59 79 59 80 59 81 59 82 59 83 59 84 59 85 59 86 59 87 59 88 59 89 59 90 59 91 59 92 59 93 59 94 59 95 59 96 59 97 59 98 59 99 59 100 59 101 59 102 59 103 59 104 59 105 59 106 59 107 59 108 59 109 59 110 59 111 59 112 59 113 59 114 59 115 59 116 59 117 59 118 59 119 59 120 59 121 59 122 59 123 59 124 59 125 59 126 59 127 59 128 59 129 59 130 59 131 59 132 59 133 59 134 59 135 59 136 59 137 59 138 59 139 59 140 59 141 59 142 59 143 59 144 59 145 59 146 59 147 59 148 59 149 59 150 59 151 59 152 59 153 59 154 59 155 59 156 59 157 59 158 59 159 59 160 59 161 59 162 59 163 59 164 59 165 59 166 59 167 59 168 59 169 59 170 59 171 59 172 59 173 59 174 59 175 59 176 59 177 59 178 59 179 59 180 59 181 59 182 59 183 59 184 59 185 59 186 59 187 59 188 59 189 59 190 59 191 59 192 59 193 59 194 59 195 59 196 59 197 59 198 59 199 59 200 59 201 59 202 59 203 59 204 59 205 59 206 59 207 59 208 59 209 59 210 59 211 59 212 59 213 59 214 59 215 59 216 59 217 59 218 59 219 59 220 59 221 59 222 59 223 59 224 59 225 59 226 59 227 59 228 59 229 59 230 59 231 59 232 59 233 59 234 59 235 59 236 59 237 59 238 59 239 59 240 59 241 59 242 59 243 59 244 59 245 59 246 59 247 59 248 59 249 59 250 59 251 59 252 59 253 59 254 59 255 59 256 59 257 59 258 59 259 59 260 59 261 59 262 59 263 59 264 59 265 59 266 59 267 59 268 59 269 59 270 59 271 59 272 59 273 59 274 59 275 59 276 59 277 59 278 59 279 59 280 59 281 59 282 59 283 59 284 59 285 59 286 59 287 59 288 59 289 59 290 59 291 59 292 59 293 59 294 59 295 59 296 59 297 59 298 59 299 60 0 60 1 60 2 60 3 60 4 60 5 60 6 60 7 60 8 60 9 60 10 60 11 60 12 60 13 60 14 60 15 60 16 60 17 60 18 60 19 60 20 60 21 60 22 60 23 60 24 60 25 60 26 60 27 60 28 60 29 60 30 60 31 60 32 60 33 60 34 60 35 60 36 60 37 60 38 60 39 60 40 60 41 60 42 60 43 60 44 60 45 60 46 60 47 60 48 60 49 60 50 60 51 60 52 60 53 60 54 60 55 60 56 60 57 60 58 60 59 60 60 60 61 60 62 60 63 60 64 60 65 60 66 60 67 60 68 60 69 60 70 60 71 60 72 60 73 60 74 60 75 60 76 60 77 60 78 60 79 60 80 60 81 60 82 60 83 60 84 60 85 60 86 60 87 60 88 60 89 60 90 60 91 60 92 60 93 60 94 60 95 60 96 60 97 60 98 60 99 60 100 60 101 60 102 60 103 60 104 60 105 60 106 60 107 60 108 60 109 60 110 60 111 60 112 60 113 60 114 60 115 60 116 60 117 60 118 60 119 60 120 60 121 60 122 60 123 60 124 60 125 60 126 60 127 60 128 60 129 60 130 60 131 60 132 60 133 60 134 60 135 60 136 60 137 60 138 60 139 60 140 60 141 60 142 60 143 60 144 60 145 60 146 60 147 60 148 60 149 60 150 60 151 60 152 60 153 60 154 60 155 60 156 60 157 60 158 60 159 60 160 60 161 60 162 60 163 60 164 60 165 60 166 60 167 60 168 60 169 60 170 60 171 60 172 60 173 60 174 60 175 60 176 60 177 60 178 60 179 60 180 60 181 60 182 60 183 60 184 60 185 60 186 60 187 60 188 60 189 60 190 60 191 60 192 60 193 60 194 60 195 60 196 60 197 60 198 60 199 60 200 60 201 60 202 60 203 60 204 60 205 60 206 60 207 60 208 60 209 60 210 60 211 60 212 60 213 60 214 60 215 60 216 60 217 60 218 60 219 60 220 60 221 60 222 60 223 60 224 60 225 60 226 60 227 60 228 60 229 60 230 60 231 60 232 60 233 60 234 60 235 60 236 60 237 60 238 60 239 60 240 60 241 60 242 60 243 60 244 60 245 60 246 60 247 60 248 60 249 60 250 60 251 60 252 60 253 60 254 60 255 60 256 60 257 60 258 60 259 60 260 60 261 60 262 60 263 60 264 60 265 60 266 60 267 60 268 60 269 60 270 60 271 60 272 60 273 60 274 60 275 60 276 60 277 60 278 60 279 60 280 60 281 60 282 60 283 60 284 60 285 60 286 60 287 60 288 60 289 60 290 60 291 60 292 60 293 60 294 60 295 60 296 60 297 60 298 60 299 61 0 61 1 61 2 61 3 61 4 61 5 61 6 61 7 61 8 61 9 61 10 61 11 61 12 61 13 61 14 61 15 61 16 61 17 61 18 61 19 61 20 61 21 61 22 61 23 61 24 61 25 61 26 61 27 61 28 61 29 61 30 61 31 61 32 61 33 61 34 61 35 61 36 61 37 61 38 61 39 61 40 61 41 61 42 61 43 61 44 61 45 61 46 61 47 61 48 61 49 61 50 61 51 61 52 61 53 61 54 61 55 61 56 61 57 61 58 61 59 61 60 61 61 61 62 61 63 61 64 61 65 61 66 61 67 61 68 61 69 61 70 61 71 61 72 61 73 61 74 61 75 61 76 61 77 61 78 61 79 61 80 61 81 61 82 61 83 61 84 61 85 61 86 61 87 61 88 61 89 61 90 61 91 61 92 61 93 61 94 61 95 61 96 61 97 61 98 61 99 61 100 61 101 61 102 61 103 61 104 61 105 61 106 61 107 61 108 61 109 61 110 61 111 61 112 61 113 61 114 61 115 61 116 61 117 61 118 61 119 61 120 61 121 61 122 61 123 61 124 61 125 61 126 61 127 61 128 61 129 61 130 61 131 61 132 61 133 61 134 61 135 61 136 61 137 61 138 61 139 61 140 61 141 61 142 61 143 61 144 61 145 61 146 61 147 61 148 61 149 61 150 61 151 61 152 61 153 61 154 61 155 61 156 61 157 61 158 61 159 61 160 61 161 61 162 61 163 61 164 61 165 61 166 61 167 61 168 61 169 61 170 61 171 61 172 61 173 61 174 61 175 61 176 61 177 61 178 61 179 61 180 61 181 61 182 61 183 61 184 61 185 61 186 61 187 61 188 61 189 61 190 61 191 61 192 61 193 61 194 61 195 61 196 61 197 61 198 61 199 61 200 61 201 61 202 61 203 61 204 61 205 61 206 61 207 61 208 61 209 61 210 61 211 61 212 61 213 61 214 61 215 61 216 61 217 61 218 61 219 61 220 61 221 61 222 61 223 61 224 61 225 61 226 61 227 61 228 61 229 61 230 61 231 61 232 61 233 61 234 61 235 61 236 61 237 61 238 61 239 61 240 61 241 61 242 61 243 61 244 61 245 61 246 61 247 61 248 61 249 61 250 61 251 61 252 61 253 61 254 61 255 61 256 61 257 61 258 61 259 61 260 61 261 61 262 61 263 61 264 61 265 61 266 61 267 61 268 61 269 61 270 61 271 61 272 61 273 61 274 61 275 61 276 61 277 61 278 61 279 61 280 61 281 61 282 61 283 61 284 61 285 61 286 61 287 61 288 61 289 61 290 61 291 61 292 61 293 61 294 61 295 61 296 61 297 61 298 61 299 62 0 62 1 62 2 62 3 62 4 62 5 62 6 62 7 62 8 62 9 62 10 62 11 62 12 62 13 62 14 62 15 62 16 62 17 62 18 62 19 62 20 62 21 62 22 62 23 62 24 62 25 62 26 62 27 62 28 62 29 62 30 62 31 62 32 62 33 62 34 62 35 62 36 62 37 62 38 62 39 62 40 62 41 62 42 62 43 62 44 62 45 62 46 62 47 62 48 62 49 62 50 62 51 62 52 62 53 62 54 62 55 62 56 62 57 62 58 62 59 62 60 62 61 62 62 62 63 62 64 62 65 62 66 62 67 62 68 62 69 62 70 62 71 62 72 62 73 62 74 62 75 62 76 62 77 62 78 62 79 62 80 62 81 62 82 62 83 62 84 62 85 62 86 62 87 62 88 62 89 62 90 62 91 62 92 62 93 62 94 62 95 62 96 62 97 62 98 62 99 62 100 62 101 62 102 62 103 62 104 62 105 62 106 62 107 62 108 62 109 62 110 62 111 62 112 62 113 62 114 62 115 62 116 62 117 62 118 62 119 62 120 62 121 62 122 62 123 62 124 62 125 62 126 62 127 62 128 62 129 62 130 62 131 62 132 62 133 62 134 62 135 62 136 62 137 62 138 62 139 62 140 62 141 62 142 62 143 62 144 62 145 62 146 62 147 62 148 62 149 62 150 62 151 62 152 62 153 62 154 62 155 62 156 62 157 62 158 62 159 62 160 62 161 62 162 62 163 62 164 62 165 62 166 62 167 62 168 62 169 62 170 62 171 62 172 62 173 62 174 62 175 62 176 62 177 62 178 62 179 62 180 62 181 62 182 62 183 62 184 62 185 62 186 62 187 62 188 62 189 62 190 62 191 62 192 62 193 62 194 62 195 62 196 62 197 62 198 62 199 62 200 62 201 62 202 62 203 62 204 62 205 62 206 62 207 62 208 62 209 62 210 62 211 62 212 62 213 62 214 62 215 62 216 62 217 62 218 62 219 62 220 62 221 62 222 62 223 62 224 62 225 62 226 62 227 62 228 62 229 62 230 62 231 62 232 62 233 62 234 62 235 62 236 62 237 62 238 62 239 62 240 62 241 62 242 62 243 62 244 62 245 62 246 62 247 62 248 62 249 62 250 62 251 62 252 62 253 62 254 62 255 62 256 62 257 62 258 62 259 62 260 62 261 62 262 62 263 62 264 62 265 62 266 62 267 62 268 62 269 62 270 62 271 62 272 62 273 62 274 62 275 62 276 62 277 62 278 62 279 62 280 62 281 62 282 62 283 62 284 62 285 62 286 62 287 62 288 62 289 62 290 62 291 62 292 62 293 62 294 62 295 62 296 62 297 62 298 62 299 63 0 63 1 63 2 63 3 63 4 63 5 63 6 63 7 63 8 63 9 63 10 63 11 63 12 63 13 63 14 63 15 63 16 63 17 63 18 63 19 63 20 63 21 63 22 63 23 63 24 63 25 63 26 63 27 63 28 63 29 63 30 63 31 63 32 63 33 63 34 63 35 63 36 63 37 63 38 63 39 63 40 63 41 63 42 63 43 63 44 63 45 63 46 63 47 63 48 63 49 63 50 63 51 63 52 63 53 63 54 63 55 63 56 63 57 63 58 63 59 63 60 63 61 63 62 63 63 63 64 63 65 63 66 63 67 63 68 63 69 63 70 63 71 63 72 63 73 63 74 63 75 63 76 63 77 63 78 63 79 63 80 63 81 63 82 63 83 63 84 63 85 63 86 63 87 63 88 63 89 63 90 63 91 63 92 63 93 63 94 63 95 63 96 63 97 63 98 63 99 63 100 63 101 63 102 63 103 63 104 63 105 63 106 63 107 63 108 63 109 63 110 63 111 63 112 63 113 63 114 63 115 63 116 63 117 63 118 63 119 63 120 63 121 63 122 63 123 63 124 63 125 63 126 63 127 63 128 63 129 63 130 63 131 63 132 63 133 63 134 63 135 63 136 63 137 63 138 63 139 63 140 63 141 63 142 63 143 63 144 63 145 63 146 63 147 63 148 63 149 63 150 63 151 63 152 63 153 63 154 63 155 63 156 63 157 63 158 63 159 63 160 63 161 63 162 63 163 63 164 63 165 63 166 63 167 63 168 63 169 63 170 63 171 63 172 63 173 63 174 63 175 63 176 63 177 63 178 63 179 63 180 63 181 63 182 63 183 63 184 63 185 63 186 63 187 63 188 63 189 63 190 63 191 63 192 63 193 63 194 63 195 63 196 63 197 63 198 63 199 63 200 63 201 63 202 63 203 63 204 63 205 63 206 63 207 63 208 63 209 63 210 63 211 63 212 63 213 63 214 63 215 63 216 63 217 63 218 63 219 63 220 63 221 63 222 63 223 63 224 63 225 63 226 63 227 63 228 63 229 63 230 63 231 63 232 63 233 63 234 63 235 63 236 63 237 63 238 63 239 63 240 63 241 63 242 63 243 63 244 63 245 63 246 63 247 63 248 63 249 63 250 63 251 63 252 63 253 63 254 63 255 63 256 63 257 63 258 63 259 63 260 63 261 63 262 63 263 63 264 63 265 63 266 63 267 63 268 63 269 63 270 63 271 63 272 63 273 63 274 63 275 63 276 63 277 63 278 63 279 63 280 63 281 63 282 63 283 63 284 63 285 63 286 63 287 63 288 63 289 63 290 63 291 63 292 63 293 63 294 63 295 63 296 63 297 63 298 63 299 64 0 64 1 64 2 64 3 64 4 64 5 64 6 64 7 64 8 64 9 64 10 64 11 64 12 64 13 64 14 64 15 64 16 64 17 64 18 64 19 64 20 64 21 64 22 64 23 64 24 64 25 64 26 64 27 64 28 64 29 64 30 64 31 64 32 64 33 64 34 64 35 64 36 64 37 64 38 64 39 64 40 64 41 64 42 64 43 64 44 64 45 64 46 64 47 64 48 64 49 64 50 64 51 64 52 64 53 64 54 64 55 64 56 64 57 64 58 64 59 64 60 64 61 64 62 64 63 64 64 64 65 64 66 64 67 64 68 64 69 64 70 64 71 64 72 64 73 64 74 64 75 64 76 64 77 64 78 64 79 64 80 64 81 64 82 64 83 64 84 64 85 64 86 64 87 64 88 64 89 64 90 64 91 64 92 64 93 64 94 64 95 64 96 64 97 64 98 64 99 64 100 64 101 64 102 64 103 64 104 64 105 64 106 64 107 64 108 64 109 64 110 64 111 64 112 64 113 64 114 64 115 64 116 64 117 64 118 64 119 64 120 64 121 64 122 64 123 64 124 64 125 64 126 64 127 64 128 64 129 64 130 64 131 64 132 64 133 64 134 64 135 64 136 64 137 64 138 64 139 64 140 64 141 64 142 64 143 64 144 64 145 64 146 64 147 64 148 64 149 64 150 64 151 64 152 64 153 64 154 64 155 64 156 64 157 64 158 64 159 64 160 64 161 64 162 64 163 64 164 64 165 64 166 64 167 64 168 64 169 64 170 64 171 64 172 64 173 64 174 64 175 64 176 64 177 64 178 64 179 64 180 64 181 64 182 64 183 64 184 64 185 64 186 64 187 64 188 64 189 64 190 64 191 64 192 64 193 64 194 64 195 64 196 64 197 64 198 64 199 64 200 64 201 64 202 64 203 64 204 64 205 64 206 64 207 64 208 64 209 64 210 64 211 64 212 64 213 64 214 64 215 64 216 64 217 64 218 64 219 64 220 64 221 64 222 64 223 64 224 64 225 64 226 64 227 64 228 64 229 64 230 64 231 64 232 64 233 64 234 64 235 64 236 64 237 64 238 64 239 64 240 64 241 64 242 64 243 64 244 64 245 64 246 64 247 64 248 64 249 64 250 64 251 64 252 64 253 64 254 64 255 64 256 64 257 64 258 64 259 64 260 64 261 64 262 64 263 64 264 64 265 64 266 64 267 64 268 64 269 64 270 64 271 64 272 64 273 64 274 64 275 64 276 64 277 64 278 64 279 64 280 64 281 64 282 64 283 64 284 64 285 64 286 64 287 64 288 64 289 64 290 64 291 64 292 64 293 64 294 64 295 64 296 64 297 64 298 64 299 65 0 65 1 65 2 65 3 65 4 65 5 65 6 65 7 65 8 65 9 65 10 65 11 65 12 65 13 65 14 65 15 65 16 65 17 65 18 65 19 65 20 65 21 65 22 65 23 65 24 65 25 65 26 65 27 65 28 65 29 65 30 65 31 65 32 65 33 65 34 65 35 65 36 65 37 65 38 65 39 65 40 65 41 65 42 65 43 65 44 65 45 65 46 65 47 65 48 65 49 65 50 65 51 65 52 65 53 65 54 65 55 65 56 65 57 65 58 65 59 65 60 65 61 65 62 65 63 65 64 65 65 65 66 65 67 65 68 65 69 65 70 65 71 65 72 65 73 65 74 65 75 65 76 65 77 65 78 65 79 65 80 65 81 65 82 65 83 65 84 65 85 65 86 65 87 65 88 65 89 65 90 65 91 65 92 65 93 65 94 65 95 65 96 65 97 65 98 65 99 65 100 65 101 65 102 65 103 65 104 65 105 65 106 65 107 65 108 65 109 65 110 65 111 65 112 65 113 65 114 65 115 65 116 65 117 65 118 65 119 65 120 65 121 65 122 65 123 65 124 65 125 65 126 65 127 65 128 65 129 65 130 65 131 65 132 65 133 65 134 65 135 65 136 65 137 65 138 65 139 65 140 65 141 65 142 65 143 65 144 65 145 65 146 65 147 65 148 65 149 65 150 65 151 65 152 65 153 65 154 65 155 65 156 65 157 65 158 65 159 65 160 65 161 65 162 65 163 65 164 65 165 65 166 65 167 65 168 65 169 65 170 65 171 65 172 65 173 65 174 65 175 65 176 65 177 65 178 65 179 65 180 65 181 65 182 65 183 65 184 65 185 65 186 65 187 65 188 65 189 65 190 65 191 65 192 65 193 65 194 65 195 65 196 65 197 65 198 65 199 65 200 65 201 65 202 65 203 65 204 65 205 65 206 65 207 65 208 65 209 65 210 65 211 65 212 65 213 65 214 65 215 65 216 65 217 65 218 65 219 65 220 65 221 65 222 65 223 65 224 65 225 65 226 65 227 65 228 65 229 65 230 65 231 65 232 65 233 65 234 65 235 65 236 65 237 65 238 65 239 65 240 65 241 65 242 65 243 65 244 65 245 65 246 65 247 65 248 65 249 65 250 65 251 65 252 65 253 65 254 65 255 65 256 65 257 65 258 65 259 65 260 65 261 65 262 65 263 65 264 65 265 65 266 65 267 65 268 65 269 65 270 65 271 65 272 65 273 65 274 65 275 65 276 65 277 65 278 65 279 65 280 65 281 65 282 65 283 65 284 65 285 65 286 65 287 65 288 65 289 65 290 65 291 65 292 65 293 65 294 65 295 65 296 65 297 65 298 65 299 66 0 66 1 66 2 66 3 66 4 66 5 66 6 66 7 66 8 66 9 66 10 66 11 66 12 66 13 66 14 66 15 66 16 66 17 66 18 66 19 66 20 66 21 66 22 66 23 66 24 66 25 66 26 66 27 66 28 66 29 66 30 66 31 66 32 66 33 66 34 66 35 66 36 66 37 66 38 66 39 66 40 66 41 66 42 66 43 66 44 66 45 66 46 66 47 66 48 66 49 66 50 66 51 66 52 66 53 66 54 66 55 66 56 66 57 66 58 66 59 66 60 66 61 66 62 66 63 66 64 66 65 66 66 66 67 66 68 66 69 66 70 66 71 66 72 66 73 66 74 66 75 66 76 66 77 66 78 66 79 66 80 66 81 66 82 66 83 66 84 66 85 66 86 66 87 66 88 66 89 66 90 66 91 66 92 66 93 66 94 66 95 66 96 66 97 66 98 66 99 66 100 66 101 66 102 66 103 66 104 66 105 66 106 66 107 66 108 66 109 66 110 66 111 66 112 66 113 66 114 66 115 66 116 66 117 66 118 66 119 66 120 66 121 66 122 66 123 66 124 66 125 66 126 66 127 66 128 66 129 66 130 66 131 66 132 66 133 66 134 66 135 66 136 66 137 66 138 66 139 66 140 66 141 66 142 66 143 66 144 66 145 66 146 66 147 66 148 66 149 66 150 66 151 66 152 66 153 66 154 66 155 66 156 66 157 66 158 66 159 66 160 66 161 66 162 66 163 66 164 66 165 66 166 66 167 66 168 66 169 66 170 66 171 66 172 66 173 66 174 66 175 66 176 66 177 66 178 66 179 66 180 66 181 66 182 66 183 66 184 66 185 66 186 66 187 66 188 66 189 66 190 66 191 66 192 66 193 66 194 66 195 66 196 66 197 66 198 66 199 66 200 66 201 66 202 66 203 66 204 66 205 66 206 66 207 66 208 66 209 66 210 66 211 66 212 66 213 66 214 66 215 66 216 66 217 66 218 66 219 66 220 66 221 66 222 66 223 66 224 66 225 66 226 66 227 66 228 66 229 66 230 66 231 66 232 66 233 66 234 66 235 66 236 66 237 66 238 66 239 66 240 66 241 66 242 66 243 66 244 66 245 66 246 66 247 66 248 66 249 66 250 66 251 66 252 66 253 66 254 66 255 66 256 66 257 66 258 66 259 66 260 66 261 66 262 66 263 66 264 66 265 66 266 66 267 66 268 66 269 66 270 66 271 66 272 66 273 66 274 66 275 66 276 66 277 66 278 66 279 66 280 66 281 66 282 66 283 66 284 66 285 66 286 66 287 66 288 66 289 66 290 66 291 66 292 66 293 66 294 66 295 66 296 66 297 66 298 66 299 67 0 67 1 67 2 67 3 67 4 67 5 67 6 67 7 67 8 67 9 67 10 67 11 67 12 67 13 67 14 67 15 67 16 67 17 67 18 67 19 67 20 67 21 67 22 67 23 67 24 67 25 67 26 67 27 67 28 67 29 67 30 67 31 67 32 67 33 67 34 67 35 67 36 67 37 67 38 67 39 67 40 67 41 67 42 67 43 67 44 67 45 67 46 67 47 67 48 67 49 67 50 67 51 67 52 67 53 67 54 67 55 67 56 67 57 67 58 67 59 67 60 67 61 67 62 67 63 67 64 67 65 67 66 67 67 67 68 67 69 67 70 67 71 67 72 67 73 67 74 67 75 67 76 67 77 67 78 67 79 67 80 67 81 67 82 67 83 67 84 67 85 67 86 67 87 67 88 67 89 67 90 67 91 67 92 67 93 67 94 67 95 67 96 67 97 67 98 67 99 67 100 67 101 67 102 67 103 67 104 67 105 67 106 67 107 67 108 67 109 67 110 67 111 67 112 67 113 67 114 67 115 67 116 67 117 67 118 67 119 67 120 67 121 67 122 67 123 67 124 67 125 67 126 67 127 67 128 67 129 67 130 67 131 67 132 67 133 67 134 67 135 67 136 67 137 67 138 67 139 67 140 67 141 67 142 67 143 67 144 67 145 67 146 67 147 67 148 67 149 67 150 67 151 67 152 67 153 67 154 67 155 67 156 67 157 67 158 67 159 67 160 67 161 67 162 67 163 67 164 67 165 67 166 67 167 67 168 67 169 67 170 67 171 67 172 67 173 67 174 67 175 67 176 67 177 67 178 67 179 67 180 67 181 67 182 67 183 67 184 67 185 67 186 67 187 67 188 67 189 67 190 67 191 67 192 67 193 67 194 67 195 67 196 67 197 67 198 67 199 67 200 67 201 67 202 67 203 67 204 67 205 67 206 67 207 67 208 67 209 67 210 67 211 67 212 67 213 67 214 67 215 67 216 67 217 67 218 67 219 67 220 67 221 67 222 67 223 67 224 67 225 67 226 67 227 67 228 67 229 67 230 67 231 67 232 67 233 67 234 67 235 67 236 67 237 67 238 67 239 67 240 67 241 67 242 67 243 67 244 67 245 67 246 67 247 67 248 67 249 67 250 67 251 67 252 67 253 67 254 67 255 67 256 67 257 67 258 67 259 67 260 67 261 67 262 67 263 67 264 67 265 67 266 67 267 67 268 67 269 67 270 67 271 67 272 67 273 67 274 67 275 67 276 67 277 67 278 67 279 67 280 67 281 67 282 67 283 67 284 67 285 67 286 67 287 67 288 67 289 67 290 67 291 67 292 67 293 67 294 67 295 67 296 67 297 67 298 67 299 68 0 68 1 68 2 68 3 68 4 68 5 68 6 68 7 68 8 68 9 68 10 68 11 68 12 68 13 68 14 68 15 68 16 68 17 68 18 68 19 68 20 68 21 68 22 68 23 68 24 68 25 68 26 68 27 68 28 68 29 68 30 68 31 68 32 68 33 68 34 68 35 68 36 68 37 68 38 68 39 68 40 68 41 68 42 68 43 68 44 68 45 68 46 68 47 68 48 68 49 68 50 68 51 68 52 68 53 68 54 68 55 68 56 68 57 68 58 68 59 68 60 68 61 68 62 68 63 68 64 68 65 68 66 68 67 68 68 68 69 68 70 68 71 68 72 68 73 68 74 68 75 68 76 68 77 68 78 68 79 68 80 68 81 68 82 68 83 68 84 68 85 68 86 68 87 68 88 68 89 68 90 68 91 68 92 68 93 68 94 68 95 68 96 68 97 68 98 68 99 68 100 68 101 68 102 68 103 68 104 68 105 68 106 68 107 68 108 68 109 68 110 68 111 68 112 68 113 68 114 68 115 68 116 68 117 68 118 68 119 68 120 68 121 68 122 68 123 68 124 68 125 68 126 68 127 68 128 68 129 68 130 68 131 68 132 68 133 68 134 68 135 68 136 68 137 68 138 68 139 68 140 68 141 68 142 68 143 68 144 68 145 68 146 68 147 68 148 68 149 68 150 68 151 68 152 68 153 68 154 68 155 68 156 68 157 68 158 68 159 68 160 68 161 68 162 68 163 68 164 68 165 68 166 68 167 68 168 68 169 68 170 68 171 68 172 68 173 68 174 68 175 68 176 68 177 68 178 68 179 68 180 68 181 68 182 68 183 68 184 68 185 68 186 68 187 68 188 68 189 68 190 68 191 68 192 68 193 68 194 68 195 68 196 68 197 68 198 68 199 68 200 68 201 68 202 68 203 68 204 68 205 68 206 68 207 68 208 68 209 68 210 68 211 68 212 68 213 68 214 68 215 68 216 68 217 68 218 68 219 68 220 68 221 68 222 68 223 68 224 68 225 68 226 68 227 68 228 68 229 68 230 68 231 68 232 68 233 68 234 68 235 68 236 68 237 68 238 68 239 68 240 68 241 68 242 68 243 68 244 68 245 68 246 68 247 68 248 68 249 68 250 68 251 68 252 68 253 68 254 68 255 68 256 68 257 68 258 68 259 68 260 68 261 68 262 68 263 68 264 68 265 68 266 68 267 68 268 68 269 68 270 68 271 68 272 68 273 68 274 68 275 68 276 68 277 68 278 68 279 68 280 68 281 68 282 68 283 68 284 68 285 68 286 68 287 68 288 68 289 68 290 68 291 68 292 68 293 68 294 68 295 68 296 68 297 68 298 68 299 69 0 69 1 69 2 69 3 69 4 69 5 69 6 69 7 69 8 69 9 69 10 69 11 69 12 69 13 69 14 69 15 69 16 69 17 69 18 69 19 69 20 69 21 69 22 69 23 69 24 69 25 69 26 69 27 69 28 69 29 69 30 69 31 69 32 69 33 69 34 69 35 69 36 69 37 69 38 69 39 69 40 69 41 69 42 69 43 69 44 69 45 69 46 69 47 69 48 69 49 69 50 69 51 69 52 69 53 69 54 69 55 69 56 69 57 69 58 69 59 69 60 69 61 69 62 69 63 69 64 69 65 69 66 69 67 69 68 69 69 69 70 69 71 69 72 69 73 69 74 69 75 69 76 69 77 69 78 69 79 69 80 69 81 69 82 69 83 69 84 69 85 69 86 69 87 69 88 69 89 69 90 69 91 69 92 69 93 69 94 69 95 69 96 69 97 69 98 69 99 69 100 69 101 69 102 69 103 69 104 69 105 69 106 69 107 69 108 69 109 69 110 69 111 69 112 69 113 69 114 69 115 69 116 69 117 69 118 69 119 69 120 69 121 69 122 69 123 69 124 69 125 69 126 69 127 69 128 69 129 69 130 69 131 69 132 69 133 69 134 69 135 69 136 69 137 69 138 69 139 69 140 69 141 69 142 69 143 69 144 69 145 69 146 69 147 69 148 69 149 69 150 69 151 69 152 69 153 69 154 69 155 69 156 69 157 69 158 69 159 69 160 69 161 69 162 69 163 69 164 69 165 69 166 69 167 69 168 69 169 69 170 69 171 69 172 69 173 69 174 69 175 69 176 69 177 69 178 69 179 69 180 69 181 69 182 69 183 69 184 69 185 69 186 69 187 69 188 69 189 69 190 69 191 69 192 69 193 69 194 69 195 69 196 69 197 69 198 69 199 69 200 69 201 69 202 69 203 69 204 69 205 69 206 69 207 69 208 69 209 69 210 69 211 69 212 69 213 69 214 69 215 69 216 69 217 69 218 69 219 69 220 69 221 69 222 69 223 69 224 69 225 69 226 69 227 69 228 69 229 69 230 69 231 69 232 69 233 69 234 69 235 69 236 69 237 69 238 69 239 69 240 69 241 69 242 69 243 69 244 69 245 69 246 69 247 69 248 69 249 69 250 69 251 69 252 69 253 69 254 69 255 69 256 69 257 69 258 69 259 69 260 69 261 69 262 69 263 69 264 69 265 69 266 69 267 69 268 69 269 69 270 69 271 69 272 69 273 69 274 69 275 69 276 69 277 69 278 69 279 69 280 69 281 69 282 69 283 69 284 69 285 69 286 69 287 69 288 69 289 69 290 69 291 69 292 69 293 69 294 69 295 69 296 69 297 69 298 69 299 70 0 70 1 70 2 70 3 70 4 70 5 70 6 70 7 70 8 70 9 70 10 70 11 70 12 70 13 70 14 70 15 70 16 70 17 70 18 70 19 70 20 70 21 70 22 70 23 70 24 70 25 70 26 70 27 70 28 70 29 70 30 70 31 70 32 70 33 70 34 70 35 70 36 70 37 70 38 70 39 70 40 70 41 70 42 70 43 70 44 70 45 70 46 70 47 70 48 70 49 70 50 70 51 70 52 70 53 70 54 70 55 70 56 70 57 70 58 70 59 70 60 70 61 70 62 70 63 70 64 70 65 70 66 70 67 70 68 70 69 70 70 70 71 70 72 70 73 70 74 70 75 70 76 70 77 70 78 70 79 70 80 70 81 70 82 70 83 70 84 70 85 70 86 70 87 70 88 70 89 70 90 70 91 70 92 70 93 70 94 70 95 70 96 70 97 70 98 70 99 70 100 70 101 70 102 70 103 70 104 70 105 70 106 70 107 70 108 70 109 70 110 70 111 70 112 70 113 70 114 70 115 70 116 70 117 70 118 70 119 70 120 70 121 70 122 70 123 70 124 70 125 70 126 70 127 70 128 70 129 70 130 70 131 70 132 70 133 70 134 70 135 70 136 70 137 70 138 70 139 70 140 70 141 70 142 70 143 70 144 70 145 70 146 70 147 70 148 70 149 70 150 70 151 70 152 70 153 70 154 70 155 70 156 70 157 70 158 70 159 70 160 70 161 70 162 70 163 70 164 70 165 70 166 70 167 70 168 70 169 70 170 70 171 70 172 70 173 70 174 70 175 70 176 70 177 70 178 70 179 70 180 70 181 70 182 70 183 70 184 70 185 70 186 70 187 70 188 70 189 70 190 70 191 70 192 70 193 70 194 70 195 70 196 70 197 70 198 70 199 70 200 70 201 70 202 70 203 70 204 70 205 70 206 70 207 70 208 70 209 70 210 70 211 70 212 70 213 70 214 70 215 70 216 70 217 70 218 70 219 70 220 70 221 70 222 70 223 70 224 70 225 70 226 70 227 70 228 70 229 70 230 70 231 70 232 70 233 70 234 70 235 70 236 70 237 70 238 70 239 70 240 70 241 70 242 70 243 70 244 70 245 70 246 70 247 70 248 70 249 70 250 70 251 70 252 70 253 70 254 70 255 70 256 70 257 70 258 70 259 70 260 70 261 70 262 70 263 70 264 70 265 70 266 70 267 70 268 70 269 70 270 70 271 70 272 70 273 70 274 70 275 70 276 70 277 70 278 70 279 70 280 70 281 70 282 70 283 70 284 70 285 70 286 70 287 70 288 70 289 70 290 70 291 70 292 70 293 70 294 70 295 70 296 70 297 70 298 70 299 71 0 71 1 71 2 71 3 71 4 71 5 71 6 71 7 71 8 71 9 71 10 71 11 71 12 71 13 71 14 71 15 71 16 71 17 71 18 71 19 71 20 71 21 71 22 71 23 71 24 71 25 71 26 71 27 71 28 71 29 71 30 71 31 71 32 71 33 71 34 71 35 71 36 71 37 71 38 71 39 71 40 71 41 71 42 71 43 71 44 71 45 71 46 71 47 71 48 71 49 71 50 71 51 71 52 71 53 71 54 71 55 71 56 71 57 71 58 71 59 71 60 71 61 71 62 71 63 71 64 71 65 71 66 71 67 71 68 71 69 71 70 71 71 71 72 71 73 71 74 71 75 71 76 71 77 71 78 71 79 71 80 71 81 71 82 71 83 71 84 71 85 71 86 71 87 71 88 71 89 71 90 71 91 71 92 71 93 71 94 71 95 71 96 71 97 71 98 71 99 71 100 71 101 71 102 71 103 71 104 71 105 71 106 71 107 71 108 71 109 71 110 71 111 71 112 71 113 71 114 71 115 71 116 71 117 71 118 71 119 71 120 71 121 71 122 71 123 71 124 71 125 71 126 71 127 71 128 71 129 71 130 71 131 71 132 71 133 71 134 71 135 71 136 71 137 71 138 71 139 71 140 71 141 71 142 71 143 71 144 71 145 71 146 71 147 71 148 71 149 71 150 71 151 71 152 71 153 71 154 71 155 71 156 71 157 71 158 71 159 71 160 71 161 71 162 71 163 71 164 71 165 71 166 71 167 71 168 71 169 71 170 71 171 71 172 71 173 71 174 71 175 71 176 71 177 71 178 71 179 71 180 71 181 71 182 71 183 71 184 71 185 71 186 71 187 71 188 71 189 71 190 71 191 71 192 71 193 71 194 71 195 71 196 71 197 71 198 71 199 71 200 71 201 71 202 71 203 71 204 71 205 71 206 71 207 71 208 71 209 71 210 71 211 71 212 71 213 71 214 71 215 71 216 71 217 71 218 71 219 71 220 71 221 71 222 71 223 71 224 71 225 71 226 71 227 71 228 71 229 71 230 71 231 71 232 71 233 71 234 71 235 71 236 71 237 71 238 71 239 71 240 71 241 71 242 71 243 71 244 71 245 71 246 71 247 71 248 71 249 71 250 71 251 71 252 71 253 71 254 71 255 71 256 71 257 71 258 71 259 71 260 71 261 71 262 71 263 71 264 71 265 71 266 71 267 71 268 71 269 71 270 71 271 71 272 71 273 71 274 71 275 71 276 71 277 71 278 71 279 71 280 71 281 71 282 71 283 71 284 71 285 71 286 71 287 71 288 71 289 71 290 71 291 71 292 71 293 71 294 71 295 71 296 71 297 71 298 71 299 72 0 72 1 72 2 72 3 72 4 72 5 72 6 72 7 72 8 72 9 72 10 72 11 72 12 72 13 72 14 72 15 72 16 72 17 72 18 72 19 72 20 72 21 72 22 72 23 72 24 72 25 72 26 72 27 72 28 72 29 72 30 72 31 72 32 72 33 72 34 72 35 72 36 72 37 72 38 72 39 72 40 72 41 72 42 72 43 72 44 72 45 72 46 72 47 72 48 72 49 72 50 72 51 72 52 72 53 72 54 72 55 72 56 72 57 72 58 72 59 72 60 72 61 72 62 72 63 72 64 72 65 72 66 72 67 72 68 72 69 72 70 72 71 72 72 72 73 72 74 72 75 72 76 72 77 72 78 72 79 72 80 72 81 72 82 72 83 72 84 72 85 72 86 72 87 72 88 72 89 72 90 72 91 72 92 72 93 72 94 72 95 72 96 72 97 72 98 72 99 72 100 72 101 72 102 72 103 72 104 72 105 72 106 72 107 72 108 72 109 72 110 72 111 72 112 72 113 72 114 72 115 72 116 72 117 72 118 72 119 72 120 72 121 72 122 72 123 72 124 72 125 72 126 72 127 72 128 72 129 72 130 72 131 72 132 72 133 72 134 72 135 72 136 72 137 72 138 72 139 72 140 72 141 72 142 72 143 72 144 72 145 72 146 72 147 72 148 72 149 72 150 72 151 72 152 72 153 72 154 72 155 72 156 72 157 72 158 72 159 72 160 72 161 72 162 72 163 72 164 72 165 72 166 72 167 72 168 72 169 72 170 72 171 72 172 72 173 72 174 72 175 72 176 72 177 72 178 72 179 72 180 72 181 72 182 72 183 72 184 72 185 72 186 72 187 72 188 72 189 72 190 72 191 72 192 72 193 72 194 72 195 72 196 72 197 72 198 72 199 72 200 72 201 72 202 72 203 72 204 72 205 72 206 72 207 72 208 72 209 72 210 72 211 72 212 72 213 72 214 72 215 72 216 72 217 72 218 72 219 72 220 72 221 72 222 72 223 72 224 72 225 72 226 72 227 72 228 72 229 72 230 72 231 72 232 72 233 72 234 72 235 72 236 72 237 72 238 72 239 72 240 72 241 72 242 72 243 72 244 72 245 72 246 72 247 72 248 72 249 72 250 72 251 72 252 72 253 72 254 72 255 72 256 72 257 72 258 72 259 72 260 72 261 72 262 72 263 72 264 72 265 72 266 72 267 72 268 72 269 72 270 72 271 72 272 72 273 72 274 72 275 72 276 72 277 72 278 72 279 72 280 72 281 72 282 72 283 72 284 72 285 72 286 72 287 72 288 72 289 72 290 72 291 72 292 72 293 72 294 72 295 72 296 72 297 72 298 72 299 73 0 73 1 73 2 73 3 73 4 73 5 73 6 73 7 73 8 73 9 73 10 73 11 73 12 73 13 73 14 73 15 73 16 73 17 73 18 73 19 73 20 73 21 73 22 73 23 73 24 73 25 73 26 73 27 73 28 73 29 73 30 73 31 73 32 73 33 73 34 73 35 73 36 73 37 73 38 73 39 73 40 73 41 73 42 73 43 73 44 73 45 73 46 73 47 73 48 73 49 73 50 73 51 73 52 73 53 73 54 73 55 73 56 73 57 73 58 73 59 73 60 73 61 73 62 73 63 73 64 73 65 73 66 73 67 73 68 73 69 73 70 73 71 73 72 73 73 73 74 73 75 73 76 73 77 73 78 73 79 73 80 73 81 73 82 73 83 73 84 73 85 73 86 73 87 73 88 73 89 73 90 73 91 73 92 73 93 73 94 73 95 73 96 73 97 73 98 73 99 73 100 73 101 73 102 73 103 73 104 73 105 73 106 73 107 73 108 73 109 73 110 73 111 73 112 73 113 73 114 73 115 73 116 73 117 73 118 73 119 73 120 73 121 73 122 73 123 73 124 73 125 73 126 73 127 73 128 73 129 73 130 73 131 73 132 73 133 73 134 73 135 73 136 73 137 73 138 73 139 73 140 73 141 73 142 73 143 73 144 73 145 73 146 73 147 73 148 73 149 73 150 73 151 73 152 73 153 73 154 73 155 73 156 73 157 73 158 73 159 73 160 73 161 73 162 73 163 73 164 73 165 73 166 73 167 73 168 73 169 73 170 73 171 73 172 73 173 73 174 73 175 73 176 73 177 73 178 73 179 73 180 73 181 73 182 73 183 73 184 73 185 73 186 73 187 73 188 73 189 73 190 73 191 73 192 73 193 73 194 73 195 73 196 73 197 73 198 73 199 73 200 73 201 73 202 73 203 73 204 73 205 73 206 73 207 73 208 73 209 73 210 73 211 73 212 73 213 73 214 73 215 73 216 73 217 73 218 73 219 73 220 73 221 73 222 73 223 73 224 73 225 73 226 73 227 73 228 73 229 73 230 73 231 73 232 73 233 73 234 73 235 73 236 73 237 73 238 73 239 73 240 73 241 73 242 73 243 73 244 73 245 73 246 73 247 73 248 73 249 73 250 73 251 73 252 73 253 73 254 73 255 73 256 73 257 73 258 73 259 73 260 73 261 73 262 73 263 73 264 73 265 73 266 73 267 73 268 73 269 73 270 73 271 73 272 73 273 73 274 73 275 73 276 73 277 73 278 73 279 73 280 73 281 73 282 73 283 73 284 73 285 73 286 73 287 73 288 73 289 73 290 73 291 73 292 73 293 73 294 73 295 73 296 73 297 73 298 73 299 74 0 74 1 74 2 74 3 74 4 74 5 74 6 74 7 74 8 74 9 74 10 74 11 74 12 74 13 74 14 74 15 74 16 74 17 74 18 74 19 74 20 74 21 74 22 74 23 74 24 74 25 74 26 74 27 74 28 74 29 74 30 74 31 74 32 74 33 74 34 74 35 74 36 74 37 74 38 74 39 74 40 74 41 74 42 74 43 74 44 74 45 74 46 74 47 74 48 74 49 74 50 74 51 74 52 74 53 74 54 74 55 74 56 74 57 74 58 74 59 74 60 74 61 74 62 74 63 74 64 74 65 74 66 74 67 74 68 74 69 74 70 74 71 74 72 74 73 74 74 74 75 74 76 74 77 74 78 74 79 74 80 74 81 74 82 74 83 74 84 74 85 74 86 74 87 74 88 74 89 74 90 74 91 74 92 74 93 74 94 74 95 74 96 74 97 74 98 74 99 74 100 74 101 74 102 74 103 74 104 74 105 74 106 74 107 74 108 74 109 74 110 74 111 74 112 74 113 74 114 74 115 74 116 74 117 74 118 74 119 74 120 74 121 74 122 74 123 74 124 74 125 74 126 74 127 74 128 74 129 74 130 74 131 74 132 74 133 74 134 74 135 74 136 74 137 74 138 74 139 74 140 74 141 74 142 74 143 74 144 74 145 74 146 74 147 74 148 74 149 74 150 74 151 74 152 74 153 74 154 74 155 74 156 74 157 74 158 74 159 74 160 74 161 74 162 74 163 74 164 74 165 74 166 74 167 74 168 74 169 74 170 74 171 74 172 74 173 74 174 74 175 74 176 74 177 74 178 74 179 74 180 74 181 74 182 74 183 74 184 74 185 74 186 74 187 74 188 74 189 74 190 74 191 74 192 74 193 74 194 74 195 74 196 74 197 74 198 74 199 74 200 74 201 74 202 74 203 74 204 74 205 74 206 74 207 74 208 74 209 74 210 74 211 74 212 74 213 74 214 74 215 74 216 74 217 74 218 74 219 74 220 74 221 74 222 74 223 74 224 74 225 74 226 74 227 74 228 74 229 74 230 74 231 74 232 74 233 74 234 74 235 74 236 74 237 74 238 74 239 74 240 74 241 74 242 74 243 74 244 74 245 74 246 74 247 74 248 74 249 74 250 74 251 74 252 74 253 74 254 74 255 74 256 74 257 74 258 74 259 74 260 74 261 74 262 74 263 74 264 74 265 74 266 74 267 74 268 74 269 74 270 74 271 74 272 74 273 74 274 74 275 74 276 74 277 74 278 74 279 74 280 74 281 74 282 74 283 74 284 74 285 74 286 74 287 74 288 74 289 74 290 74 291 74 292 74 293 74 294 74 295 74 296 74 297 74 298 74 299 75 0 75 1 75 2 75 3 75 4 75 5 75 6 75 7 75 8 75 9 75 10 75 11 75 12 75 13 75 14 75 15 75 16 75 17 75 18 75 19 75 20 75 21 75 22 75 23 75 24 75 25 75 26 75 27 75 28 75 29 75 30 75 31 75 32 75 33 75 34 75 35 75 36 75 37 75 38 75 39 75 40 75 41 75 42 75 43 75 44 75 45 75 46 75 47 75 48 75 49 75 50 75 51 75 52 75 53 75 54 75 55 75 56 75 57 75 58 75 59 75 60 75 61 75 62 75 63 75 64 75 65 75 66 75 67 75 68 75 69 75 70 75 71 75 72 75 73 75 74 75 75 75 76 75 77 75 78 75 79 75 80 75 81 75 82 75 83 75 84 75 85 75 86 75 87 75 88 75 89 75 90 75 91 75 92 75 93 75 94 75 95 75 96 75 97 75 98 75 99 75 100 75 101 75 102 75 103 75 104 75 105 75 106 75 107 75 108 75 109 75 110 75 111 75 112 75 113 75 114 75 115 75 116 75 117 75 118 75 119 75 120 75 121 75 122 75 123 75 124 75 125 75 126 75 127 75 128 75 129 75 130 75 131 75 132 75 133 75 134 75 135 75 136 75 137 75 138 75 139 75 140 75 141 75 142 75 143 75 144 75 145 75 146 75 147 75 148 75 149 75 150 75 151 75 152 75 153 75 154 75 155 75 156 75 157 75 158 75 159 75 160 75 161 75 162 75 163 75 164 75 165 75 166 75 167 75 168 75 169 75 170 75 171 75 172 75 173 75 174 75 175 75 176 75 177 75 178 75 179 75 180 75 181 75 182 75 183 75 184 75 185 75 186 75 187 75 188 75 189 75 190 75 191 75 192 75 193 75 194 75 195 75 196 75 197 75 198 75 199 75 200 75 201 75 202 75 203 75 204 75 205 75 206 75 207 75 208 75 209 75 210 75 211 75 212 75 213 75 214 75 215 75 216 75 217 75 218 75 219 75 220 75 221 75 222 75 223 75 224 75 225 75 226 75 227 75 228 75 229 75 230 75 231 75 232 75 233 75 234 75 235 75 236 75 237 75 238 75 239 75 240 75 241 75 242 75 243 75 244 75 245 75 246 75 247 75 248 75 249 75 250 75 251 75 252 75 253 75 254 75 255 75 256 75 257 75 258 75 259 75 260 75 261 75 262 75 263 75 264 75 265 75 266 75 267 75 268 75 269 75 270 75 271 75 272 75 273 75 274 75 275 75 276 75 277 75 278 75 279 75 280 75 281 75 282 75 283 75 284 75 285 75 286 75 287 75 288 75 289 75 290 75 291 75 292 75 293 75 294 75 295 75 296 75 297 75 298 75 299 76 0 76 1 76 2 76 3 76 4 76 5 76 6 76 7 76 8 76 9 76 10 76 11 76 12 76 13 76 14 76 15 76 16 76 17 76 18 76 19 76 20 76 21 76 22 76 23 76 24 76 25 76 26 76 27 76 28 76 29 76 30 76 31 76 32 76 33 76 34 76 35 76 36 76 37 76 38 76 39 76 40 76 41 76 42 76 43 76 44 76 45 76 46 76 47 76 48 76 49 76 50 76 51 76 52 76 53 76 54 76 55 76 56 76 57 76 58 76 59 76 60 76 61 76 62 76 63 76 64 76 65 76 66 76 67 76 68 76 69 76 70 76 71 76 72 76 73 76 74 76 75 76 76 76 77 76 78 76 79 76 80 76 81 76 82 76 83 76 84 76 85 76 86 76 87 76 88 76 89 76 90 76 91 76 92 76 93 76 94 76 95 76 96 76 97 76 98 76 99 76 100 76 101 76 102 76 103 76 104 76 105 76 106 76 107 76 108 76 109 76 110 76 111 76 112 76 113 76 114 76 115 76 116 76 117 76 118 76 119 76 120 76 121 76 122 76 123 76 124 76 125 76 126 76 127 76 128 76 129 76 130 76 131 76 132 76 133 76 134 76 135 76 136 76 137 76 138 76 139 76 140 76 141 76 142 76 143 76 144 76 145 76 146 76 147 76 148 76 149 76 150 76 151 76 152 76 153 76 154 76 155 76 156 76 157 76 158 76 159 76 160 76 161 76 162 76 163 76 164 76 165 76 166 76 167 76 168 76 169 76 170 76 171 76 172 76 173 76 174 76 175 76 176 76 177 76 178 76 179 76 180 76 181 76 182 76 183 76 184 76 185 76 186 76 187 76 188 76 189 76 190 76 191 76 192 76 193 76 194 76 195 76 196 76 197 76 198 76 199 76 200 76 201 76 202 76 203 76 204 76 205 76 206 76 207 76 208 76 209 76 210 76 211 76 212 76 213 76 214 76 215 76 216 76 217 76 218 76 219 76 220 76 221 76 222 76 223 76 224 76 225 76 226 76 227 76 228 76 229 76 230 76 231 76 232 76 233 76 234 76 235 76 236 76 237 76 238 76 239 76 240 76 241 76 242 76 243 76 244 76 245 76 246 76 247 76 248 76 249 76 250 76 251 76 252 76 253 76 254 76 255 76 256 76 257 76 258 76 259 76 260 76 261 76 262 76 263 76 264 76 265 76 266 76 267 76 268 76 269 76 270 76 271 76 272 76 273 76 274 76 275 76 276 76 277 76 278 76 279 76 280 76 281 76 282 76 283 76 284 76 285 76 286 76 287 76 288 76 289 76 290 76 291 76 292 76 293 76 294 76 295 76 296 76 297 76 298 76 299 77 0 77 1 77 2 77 3 77 4 77 5 77 6 77 7 77 8 77 9 77 10 77 11 77 12 77 13 77 14 77 15 77 16 77 17 77 18 77 19 77 20 77 21 77 22 77 23 77 24 77 25 77 26 77 27 77 28 77 29 77 30 77 31 77 32 77 33 77 34 77 35 77 36 77 37 77 38 77 39 77 40 77 41 77 42 77 43 77 44 77 45 77 46 77 47 77 48 77 49 77 50 77 51 77 52 77 53 77 54 77 55 77 56 77 57 77 58 77 59 77 60 77 61 77 62 77 63 77 64 77 65 77 66 77 67 77 68 77 69 77 70 77 71 77 72 77 73 77 74 77 75 77 76 77 77 77 78 77 79 77 80 77 81 77 82 77 83 77 84 77 85 77 86 77 87 77 88 77 89 77 90 77 91 77 92 77 93 77 94 77 95 77 96 77 97 77 98 77 99 77 100 77 101 77 102 77 103 77 104 77 105 77 106 77 107 77 108 77 109 77 110 77 111 77 112 77 113 77 114 77 115 77 116 77 117 77 118 77 119 77 120 77 121 77 122 77 123 77 124 77 125 77 126 77 127 77 128 77 129 77 130 77 131 77 132 77 133 77 134 77 135 77 136 77 137 77 138 77 139 77 140 77 141 77 142 77 143 77 144 77 145 77 146 77 147 77 148 77 149 77 150 77 151 77 152 77 153 77 154 77 155 77 156 77 157 77 158 77 159 77 160 77 161 77 162 77 163 77 164 77 165 77 166 77 167 77 168 77 169 77 170 77 171 77 172 77 173 77 174 77 175 77 176 77 177 77 178 77 179 77 180 77 181 77 182 77 183 77 184 77 185 77 186 77 187 77 188 77 189 77 190 77 191 77 192 77 193 77 194 77 195 77 196 77 197 77 198 77 199 77 200 77 201 77 202 77 203 77 204 77 205 77 206 77 207 77 208 77 209 77 210 77 211 77 212 77 213 77 214 77 215 77 216 77 217 77 218 77 219 77 220 77 221 77 222 77 223 77 224 77 225 77 226 77 227 77 228 77 229 77 230 77 231 77 232 77 233 77 234 77 235 77 236 77 237 77 238 77 239 77 240 77 241 77 242 77 243 77 244 77 245 77 246 77 247 77 248 77 249 77 250 77 251 77 252 77 253 77 254 77 255 77 256 77 257 77 258 77 259 77 260 77 261 77 262 77 263 77 264 77 265 77 266 77 267 77 268 77 269 77 270 77 271 77 272 77 273 77 274 77 275 77 276 77 277 77 278 77 279 77 280 77 281 77 282 77 283 77 284 77 285 77 286 77 287 77 288 77 289 77 290 77 291 77 292 77 293 77 294 77 295 77 296 77 297 77 298 77 299 78 0 78 1 78 2 78 3 78 4 78 5 78 6 78 7 78 8 78 9 78 10 78 11 78 12 78 13 78 14 78 15 78 16 78 17 78 18 78 19 78 20 78 21 78 22 78 23 78 24 78 25 78 26 78 27 78 28 78 29 78 30 78 31 78 32 78 33 78 34 78 35 78 36 78 37 78 38 78 39 78 40 78 41 78 42 78 43 78 44 78 45 78 46 78 47 78 48 78 49 78 50 78 51 78 52 78 53 78 54 78 55 78 56 78 57 78 58 78 59 78 60 78 61 78 62 78 63 78 64 78 65 78 66 78 67 78 68 78 69 78 70 78 71 78 72 78 73 78 74 78 75 78 76 78 77 78 78 78 79 78 80 78 81 78 82 78 83 78 84 78 85 78 86 78 87 78 88 78 89 78 90 78 91 78 92 78 93 78 94 78 95 78 96 78 97 78 98 78 99 78 100 78 101 78 102 78 103 78 104 78 105 78 106 78 107 78 108 78 109 78 110 78 111 78 112 78 113 78 114 78 115 78 116 78 117 78 118 78 119 78 120 78 121 78 122 78 123 78 124 78 125 78 126 78 127 78 128 78 129 78 130 78 131 78 132 78 133 78 134 78 135 78 136 78 137 78 138 78 139 78 140 78 141 78 142 78 143 78 144 78 145 78 146 78 147 78 148 78 149 78 150 78 151 78 152 78 153 78 154 78 155 78 156 78 157 78 158 78 159 78 160 78 161 78 162 78 163 78 164 78 165 78 166 78 167 78 168 78 169 78 170 78 171 78 172 78 173 78 174 78 175 78 176 78 177 78 178 78 179 78 180 78 181 78 182 78 183 78 184 78 185 78 186 78 187 78 188 78 189 78 190 78 191 78 192 78 193 78 194 78 195 78 196 78 197 78 198 78 199 78 200 78 201 78 202 78 203 78 204 78 205 78 206 78 207 78 208 78 209 78 210 78 211 78 212 78 213 78 214 78 215 78 216 78 217 78 218 78 219 78 220 78 221 78 222 78 223 78 224 78 225 78 226 78 227 78 228 78 229 78 230 78 231 78 232 78 233 78 234 78 235 78 236 78 237 78 238 78 239 78 240 78 241 78 242 78 243 78 244 78 245 78 246 78 247 78 248 78 249 78 250 78 251 78 252 78 253 78 254 78 255 78 256 78 257 78 258 78 259 78 260 78 261 78 262 78 263 78 264 78 265 78 266 78 267 78 268 78 269 78 270 78 271 78 272 78 273 78 274 78 275 78 276 78 277 78 278 78 279 78 280 78 281 78 282 78 283 78 284 78 285 78 286 78 287 78 288 78 289 78 290 78 291 78 292 78 293 78 294 78 295 78 296 78 297 78 298 78 299 79 0 79 1 79 2 79 3 79 4 79 5 79 6 79 7 79 8 79 9 79 10 79 11 79 12 79 13 79 14 79 15 79 16 79 17 79 18 79 19 79 20 79 21 79 22 79 23 79 24 79 25 79 26 79 27 79 28 79 29 79 30 79 31 79 32 79 33 79 34 79 35 79 36 79 37 79 38 79 39 79 40 79 41 79 42 79 43 79 44 79 45 79 46 79 47 79 48 79 49 79 50 79 51 79 52 79 53 79 54 79 55 79 56 79 57 79 58 79 59 79 60 79 61 79 62 79 63 79 64 79 65 79 66 79 67 79 68 79 69 79 70 79 71 79 72 79 73 79 74 79 75 79 76 79 77 79 78 79 79 79 80 79 81 79 82 79 83 79 84 79 85 79 86 79 87 79 88 79 89 79 90 79 91 79 92 79 93 79 94 79 95 79 96 79 97 79 98 79 99 79 100 79 101 79 102 79 103 79 104 79 105 79 106 79 107 79 108 79 109 79 110 79 111 79 112 79 113 79 114 79 115 79 116 79 117 79 118 79 119 79 120 79 121 79 122 79 123 79 124 79 125 79 126 79 127 79 128 79 129 79 130 79 131 79 132 79 133 79 134 79 135 79 136 79 137 79 138 79 139 79 140 79 141 79 142 79 143 79 144 79 145 79 146 79 147 79 148 79 149 79 150 79 151 79 152 79 153 79 154 79 155 79 156 79 157 79 158 79 159 79 160 79 161 79 162 79 163 79 164 79 165 79 166 79 167 79 168 79 169 79 170 79 171 79 172 79 173 79 174 79 175 79 176 79 177 79 178 79 179 79 180 79 181 79 182 79 183 79 184 79 185 79 186 79 187 79 188 79 189 79 190 79 191 79 192 79 193 79 194 79 195 79 196 79 197 79 198 79 199 79 200 79 201 79 202 79 203 79 204 79 205 79 206 79 207 79 208 79 209 79 210 79 211 79 212 79 213 79 214 79 215 79 216 79 217 79 218 79 219 79 220 79 221 79 222 79 223 79 224 79 225 79 226 79 227 79 228 79 229 79 230 79 231 79 232 79 233 79 234 79 235 79 236 79 237 79 238 79 239 79 240 79 241 79 242 79 243 79 244 79 245 79 246 79 247 79 248 79 249 79 250 79 251 79 252 79 253 79 254 79 255 79 256 79 257 79 258 79 259 79 260 79 261 79 262 79 263 79 264 79 265 79 266 79 267 79 268 79 269 79 270 79 271 79 272 79 273 79 274 79 275 79 276 79 277 79 278 79 279 79 280 79 281 79 282 79 283 79 284 79 285 79 286 79 287 79 288 79 289 79 290 79 291 79 292 79 293 79 294 79 295 79 296 79 297 79 298 79 299 80 0 80 1 80 2 80 3 80 4 80 5 80 6 80 7 80 8 80 9 80 10 80 11 80 12 80 13 80 14 80 15 80 16 80 17 80 18 80 19 80 20 80 21 80 22 80 23 80 24 80 25 80 26 80 27 80 28 80 29 80 30 80 31 80 32 80 33 80 34 80 35 80 36 80 37 80 38 80 39 80 40 80 41 80 42 80 43 80 44 80 45 80 46 80 47 80 48 80 49 80 50 80 51 80 52 80 53 80 54 80 55 80 56 80 57 80 58 80 59 80 60 80 61 80 62 80 63 80 64 80 65 80 66 80 67 80 68 80 69 80 70 80 71 80 72 80 73 80 74 80 75 80 76 80 77 80 78 80 79 80 80 80 81 80 82 80 83 80 84 80 85 80 86 80 87 80 88 80 89 80 90 80 91 80 92 80 93 80 94 80 95 80 96 80 97 80 98 80 99 80 100 80 101 80 102 80 103 80 104 80 105 80 106 80 107 80 108 80 109 80 110 80 111 80 112 80 113 80 114 80 115 80 116 80 117 80 118 80 119 80 120 80 121 80 122 80 123 80 124 80 125 80 126 80 127 80 128 80 129 80 130 80 131 80 132 80 133 80 134 80 135 80 136 80 137 80 138 80 139 80 140 80 141 80 142 80 143 80 144 80 145 80 146 80 147 80 148 80 149 80 150 80 151 80 152 80 153 80 154 80 155 80 156 80 157 80 158 80 159 80 160 80 161 80 162 80 163 80 164 80 165 80 166 80 167 80 168 80 169 80 170 80 171 80 172 80 173 80 174 80 175 80 176 80 177 80 178 80 179 80 180 80 181 80 182 80 183 80 184 80 185 80 186 80 187 80 188 80 189 80 190 80 191 80 192 80 193 80 194 80 195 80 196 80 197 80 198 80 199 80 200 80 201 80 202 80 203 80 204 80 205 80 206 80 207 80 208 80 209 80 210 80 211 80 212 80 213 80 214 80 215 80 216 80 217 80 218 80 219 80 220 80 221 80 222 80 223 80 224 80 225 80 226 80 227 80 228 80 229 80 230 80 231 80 232 80 233 80 234 80 235 80 236 80 237 80 238 80 239 80 240 80 241 80 242 80 243 80 244 80 245 80 246 80 247 80 248 80 249 80 250 80 251 80 252 80 253 80 254 80 255 80 256 80 257 80 258 80 259 80 260 80 261 80 262 80 263 80 264 80 265 80 266 80 267 80 268 80 269 80 270 80 271 80 272 80 273 80 274 80 275 80 276 80 277 80 278 80 279 80 280 80 281 80 282 80 283 80 284 80 285 80 286 80 287 80 288 80 289 80 290 80 291 80 292 80 293 80 294 80 295 80 296 80 297 80 298 80 299 81 0 81 1 81 2 81 3 81 4 81 5 81 6 81 7 81 8 81 9 81 10 81 11 81 12 81 13 81 14 81 15 81 16 81 17 81 18 81 19 81 20 81 21 81 22 81 23 81 24 81 25 81 26 81 27 81 28 81 29 81 30 81 31 81 32 81 33 81 34 81 35 81 36 81 37 81 38 81 39 81 40 81 41 81 42 81 43 81 44 81 45 81 46 81 47 81 48 81 49 81 50 81 51 81 52 81 53 81 54 81 55 81 56 81 57 81 58 81 59 81 60 81 61 81 62 81 63 81 64 81 65 81 66 81 67 81 68 81 69 81 70 81 71 81 72 81 73 81 74 81 75 81 76 81 77 81 78 81 79 81 80 81 81 81 82 81 83 81 84 81 85 81 86 81 87 81 88 81 89 81 90 81 91 81 92 81 93 81 94 81 95 81 96 81 97 81 98 81 99 81 100 81 101 81 102 81 103 81 104 81 105 81 106 81 107 81 108 81 109 81 110 81 111 81 112 81 113 81 114 81 115 81 116 81 117 81 118 81 119 81 120 81 121 81 122 81 123 81 124 81 125 81 126 81 127 81 128 81 129 81 130 81 131 81 132 81 133 81 134 81 135 81 136 81 137 81 138 81 139 81 140 81 141 81 142 81 143 81 144 81 145 81 146 81 147 81 148 81 149 81 150 81 151 81 152 81 153 81 154 81 155 81 156 81 157 81 158 81 159 81 160 81 161 81 162 81 163 81 164 81 165 81 166 81 167 81 168 81 169 81 170 81 171 81 172 81 173 81 174 81 175 81 176 81 177 81 178 81 179 81 180 81 181 81 182 81 183 81 184 81 185 81 186 81 187 81 188 81 189 81 190 81 191 81 192 81 193 81 194 81 195 81 196 81 197 81 198 81 199 81 200 81 201 81 202 81 203 81 204 81 205 81 206 81 207 81 208 81 209 81 210 81 211 81 212 81 213 81 214 81 215 81 216 81 217 81 218 81 219 81 220 81 221 81 222 81 223 81 224 81 225 81 226 81 227 81 228 81 229 81 230 81 231 81 232 81 233 81 234 81 235 81 236 81 237 81 238 81 239 81 240 81 241 81 242 81 243 81 244 81 245 81 246 81 247 81 248 81 249 81 250 81 251 81 252 81 253 81 254 81 255 81 256 81 257 81 258 81 259 81 260 81 261 81 262 81 263 81 264 81 265 81 266 81 267 81 268 81 269 81 270 81 271 81 272 81 273 81 274 81 275 81 276 81 277 81 278 81 279 81 280 81 281 81 282 81 283 81 284 81 285 81 286 81 287 81 288 81 289 81 290 81 291 81 292 81 293 81 294 81 295 81 296 81 297 81 298 81 299 82 0 82 1 82 2 82 3 82 4 82 5 82 6 82 7 82 8 82 9 82 10 82 11 82 12 82 13 82 14 82 15 82 16 82 17 82 18 82 19 82 20 82 21 82 22 82 23 82 24 82 25 82 26 82 27 82 28 82 29 82 30 82 31 82 32 82 33 82 34 82 35 82 36 82 37 82 38 82 39 82 40 82 41 82 42 82 43 82 44 82 45 82 46 82 47 82 48 82 49 82 50 82 51 82 52 82 53 82 54 82 55 82 56 82 57 82 58 82 59 82 60 82 61 82 62 82 63 82 64 82 65 82 66 82 67 82 68 82 69 82 70 82 71 82 72 82 73 82 74 82 75 82 76 82 77 82 78 82 79 82 80 82 81 82 82 82 83 82 84 82 85 82 86 82 87 82 88 82 89 82 90 82 91 82 92 82 93 82 94 82 95 82 96 82 97 82 98 82 99 82 100 82 101 82 102 82 103 82 104 82 105 82 106 82 107 82 108 82 109 82 110 82 111 82 112 82 113 82 114 82 115 82 116 82 117 82 118 82 119 82 120 82 121 82 122 82 123 82 124 82 125 82 126 82 127 82 128 82 129 82 130 82 131 82 132 82 133 82 134 82 135 82 136 82 137 82 138 82 139 82 140 82 141 82 142 82 143 82 144 82 145 82 146 82 147 82 148 82 149 82 150 82 151 82 152 82 153 82 154 82 155 82 156 82 157 82 158 82 159 82 160 82 161 82 162 82 163 82 164 82 165 82 166 82 167 82 168 82 169 82 170 82 171 82 172 82 173 82 174 82 175 82 176 82 177 82 178 82 179 82 180 82 181 82 182 82 183 82 184 82 185 82 186 82 187 82 188 82 189 82 190 82 191 82 192 82 193 82 194 82 195 82 196 82 197 82 198 82 199 82 200 82 201 82 202 82 203 82 204 82 205 82 206 82 207 82 208 82 209 82 210 82 211 82 212 82 213 82 214 82 215 82 216 82 217 82 218 82 219 82 220 82 221 82 222 82 223 82 224 82 225 82 226 82 227 82 228 82 229 82 230 82 231 82 232 82 233 82 234 82 235 82 236 82 237 82 238 82 239 82 240 82 241 82 242 82 243 82 244 82 245 82 246 82 247 82 248 82 249 82 250 82 251 82 252 82 253 82 254 82 255 82 256 82 257 82 258 82 259 82 260 82 261 82 262 82 263 82 264 82 265 82 266 82 267 82 268 82 269 82 270 82 271 82 272 82 273 82 274 82 275 82 276 82 277 82 278 82 279 82 280 82 281 82 282 82 283 82 284 82 285 82 286 82 287 82 288 82 289 82 290 82 291 82 292 82 293 82 294 82 295 82 296 82 297 82 298 82 299 83 0 83 1 83 2 83 3 83 4 83 5 83 6 83 7 83 8 83 9 83 10 83 11 83 12 83 13 83 14 83 15 83 16 83 17 83 18 83 19 83 20 83 21 83 22 83 23 83 24 83 25 83 26 83 27 83 28 83 29 83 30 83 31 83 32 83 33 83 34 83 35 83 36 83 37 83 38 83 39 83 40 83 41 83 42 83 43 83 44 83 45 83 46 83 47 83 48 83 49 83 50 83 51 83 52 83 53 83 54 83 55 83 56 83 57 83 58 83 59 83 60 83 61 83 62 83 63 83 64 83 65 83 66 83 67 83 68 83 69 83 70 83 71 83 72 83 73 83 74 83 75 83 76 83 77 83 78 83 79 83 80 83 81 83 82 83 83 83 84 83 85 83 86 83 87 83 88 83 89 83 90 83 91 83 92 83 93 83 94 83 95 83 96 83 97 83 98 83 99 83 100 83 101 83 102 83 103 83 104 83 105 83 106 83 107 83 108 83 109 83 110 83 111 83 112 83 113 83 114 83 115 83 116 83 117 83 118 83 119 83 120 83 121 83 122 83 123 83 124 83 125 83 126 83 127 83 128 83 129 83 130 83 131 83 132 83 133 83 134 83 135 83 136 83 137 83 138 83 139 83 140 83 141 83 142 83 143 83 144 83 145 83 146 83 147 83 148 83 149 83 150 83 151 83 152 83 153 83 154 83 155 83 156 83 157 83 158 83 159 83 160 83 161 83 162 83 163 83 164 83 165 83 166 83 167 83 168 83 169 83 170 83 171 83 172 83 173 83 174 83 175 83 176 83 177 83 178 83 179 83 180 83 181 83 182 83 183 83 184 83 185 83 186 83 187 83 188 83 189 83 190 83 191 83 192 83 193 83 194 83 195 83 196 83 197 83 198 83 199 83 200 83 201 83 202 83 203 83 204 83 205 83 206 83 207 83 208 83 209 83 210 83 211 83 212 83 213 83 214 83 215 83 216 83 217 83 218 83 219 83 220 83 221 83 222 83 223 83 224 83 225 83 226 83 227 83 228 83 229 83 230 83 231 83 232 83 233 83 234 83 235 83 236 83 237 83 238 83 239 83 240 83 241 83 242 83 243 83 244 83 245 83 246 83 247 83 248 83 249 83 250 83 251 83 252 83 253 83 254 83 255 83 256 83 257 83 258 83 259 83 260 83 261 83 262 83 263 83 264 83 265 83 266 83 267 83 268 83 269 83 270 83 271 83 272 83 273 83 274 83 275 83 276 83 277 83 278 83 279 83 280 83 281 83 282 83 283 83 284 83 285 83 286 83 287 83 288 83 289 83 290 83 291 83 292 83 293 83 294 83 295 83 296 83 297 83 298 83 299 84 0 84 1 84 2 84 3 84 4 84 5 84 6 84 7 84 8 84 9 84 10 84 11 84 12 84 13 84 14 84 15 84 16 84 17 84 18 84 19 84 20 84 21 84 22 84 23 84 24 84 25 84 26 84 27 84 28 84 29 84 30 84 31 84 32 84 33 84 34 84 35 84 36 84 37 84 38 84 39 84 40 84 41 84 42 84 43 84 44 84 45 84 46 84 47 84 48 84 49 84 50 84 51 84 52 84 53 84 54 84 55 84 56 84 57 84 58 84 59 84 60 84 61 84 62 84 63 84 64 84 65 84 66 84 67 84 68 84 69 84 70 84 71 84 72 84 73 84 74 84 75 84 76 84 77 84 78 84 79 84 80 84 81 84 82 84 83 84 84 84 85 84 86 84 87 84 88 84 89 84 90 84 91 84 92 84 93 84 94 84 95 84 96 84 97 84 98 84 99 84 100 84 101 84 102 84 103 84 104 84 105 84 106 84 107 84 108 84 109 84 110 84 111 84 112 84 113 84 114 84 115 84 116 84 117 84 118 84 119 84 120 84 121 84 122 84 123 84 124 84 125 84 126 84 127 84 128 84 129 84 130 84 131 84 132 84 133 84 134 84 135 84 136 84 137 84 138 84 139 84 140 84 141 84 142 84 143 84 144 84 145 84 146 84 147 84 148 84 149 84 150 84 151 84 152 84 153 84 154 84 155 84 156 84 157 84 158 84 159 84 160 84 161 84 162 84 163 84 164 84 165 84 166 84 167 84 168 84 169 84 170 84 171 84 172 84 173 84 174 84 175 84 176 84 177 84 178 84 179 84 180 84 181 84 182 84 183 84 184 84 185 84 186 84 187 84 188 84 189 84 190 84 191 84 192 84 193 84 194 84 195 84 196 84 197 84 198 84 199 84 200 84 201 84 202 84 203 84 204 84 205 84 206 84 207 84 208 84 209 84 210 84 211 84 212 84 213 84 214 84 215 84 216 84 217 84 218 84 219 84 220 84 221 84 222 84 223 84 224 84 225 84 226 84 227 84 228 84 229 84 230 84 231 84 232 84 233 84 234 84 235 84 236 84 237 84 238 84 239 84 240 84 241 84 242 84 243 84 244 84 245 84 246 84 247 84 248 84 249 84 250 84 251 84 252 84 253 84 254 84 255 84 256 84 257 84 258 84 259 84 260 84 261 84 262 84 263 84 264 84 265 84 266 84 267 84 268 84 269 84 270 84 271 84 272 84 273 84 274 84 275 84 276 84 277 84 278 84 279 84 280 84 281 84 282 84 283 84 284 84 285 84 286 84 287 84 288 84 289 84 290 84 291 84 292 84 293 84 294 84 295 84 296 84 297 84 298 84 299 85 0 85 1 85 2 85 3 85 4 85 5 85 6 85 7 85 8 85 9 85 10 85 11 85 12 85 13 85 14 85 15 85 16 85 17 85 18 85 19 85 20 85 21 85 22 85 23 85 24 85 25 85 26 85 27 85 28 85 29 85 30 85 31 85 32 85 33 85 34 85 35 85 36 85 37 85 38 85 39 85 40 85 41 85 42 85 43 85 44 85 45 85 46 85 47 85 48 85 49 85 50 85 51 85 52 85 53 85 54 85 55 85 56 85 57 85 58 85 59 85 60 85 61 85 62 85 63 85 64 85 65 85 66 85 67 85 68 85 69 85 70 85 71 85 72 85 73 85 74 85 75 85 76 85 77 85 78 85 79 85 80 85 81 85 82 85 83 85 84 85 85 85 86 85 87 85 88 85 89 85 90 85 91 85 92 85 93 85 94 85 95 85 96 85 97 85 98 85 99 85 100 85 101 85 102 85 103 85 104 85 105 85 106 85 107 85 108 85 109 85 110 85 111 85 112 85 113 85 114 85 115 85 116 85 117 85 118 85 119 85 120 85 121 85 122 85 123 85 124 85 125 85 126 85 127 85 128 85 129 85 130 85 131 85 132 85 133 85 134 85 135 85 136 85 137 85 138 85 139 85 140 85 141 85 142 85 143 85 144 85 145 85 146 85 147 85 148 85 149 85 150 85 151 85 152 85 153 85 154 85 155 85 156 85 157 85 158 85 159 85 160 85 161 85 162 85 163 85 164 85 165 85 166 85 167 85 168 85 169 85 170 85 171 85 172 85 173 85 174 85 175 85 176 85 177 85 178 85 179 85 180 85 181 85 182 85 183 85 184 85 185 85 186 85 187 85 188 85 189 85 190 85 191 85 192 85 193 85 194 85 195 85 196 85 197 85 198 85 199 85 200 85 201 85 202 85 203 85 204 85 205 85 206 85 207 85 208 85 209 85 210 85 211 85 212 85 213 85 214 85 215 85 216 85 217 85 218 85 219 85 220 85 221 85 222 85 223 85 224 85 225 85 226 85 227 85 228 85 229 85 230 85 231 85 232 85 233 85 234 85 235 85 236 85 237 85 238 85 239 85 240 85 241 85 242 85 243 85 244 85 245 85 246 85 247 85 248 85 249 85 250 85 251 85 252 85 253 85 254 85 255 85 256 85 257 85 258 85 259 85 260 85 261 85 262 85 263 85 264 85 265 85 266 85 267 85 268 85 269 85 270 85 271 85 272 85 273 85 274 85 275 85 276 85 277 85 278 85 279 85 280 85 281 85 282 85 283 85 284 85 285 85 286 85 287 85 288 85 289 85 290 85 291 85 292 85 293 85 294 85 295 85 296 85 297 85 298 85 299 86 0 86 1 86 2 86 3 86 4 86 5 86 6 86 7 86 8 86 9 86 10 86 11 86 12 86 13 86 14 86 15 86 16 86 17 86 18 86 19 86 20 86 21 86 22 86 23 86 24 86 25 86 26 86 27 86 28 86 29 86 30 86 31 86 32 86 33 86 34 86 35 86 36 86 37 86 38 86 39 86 40 86 41 86 42 86 43 86 44 86 45 86 46 86 47 86 48 86 49 86 50 86 51 86 52 86 53 86 54 86 55 86 56 86 57 86 58 86 59 86 60 86 61 86 62 86 63 86 64 86 65 86 66 86 67 86 68 86 69 86 70 86 71 86 72 86 73 86 74 86 75 86 76 86 77 86 78 86 79 86 80 86 81 86 82 86 83 86 84 86 85 86 86 86 87 86 88 86 89 86 90 86 91 86 92 86 93 86 94 86 95 86 96 86 97 86 98 86 99 86 100 86 101 86 102 86 103 86 104 86 105 86 106 86 107 86 108 86 109 86 110 86 111 86 112 86 113 86 114 86 115 86 116 86 117 86 118 86 119 86 120 86 121 86 122 86 123 86 124 86 125 86 126 86 127 86 128 86 129 86 130 86 131 86 132 86 133 86 134 86 135 86 136 86 137 86 138 86 139 86 140 86 141 86 142 86 143 86 144 86 145 86 146 86 147 86 148 86 149 86 150 86 151 86 152 86 153 86 154 86 155 86 156 86 157 86 158 86 159 86 160 86 161 86 162 86 163 86 164 86 165 86 166 86 167 86 168 86 169 86 170 86 171 86 172 86 173 86 174 86 175 86 176 86 177 86 178 86 179 86 180 86 181 86 182 86 183 86 184 86 185 86 186 86 187 86 188 86 189 86 190 86 191 86 192 86 193 86 194 86 195 86 196 86 197 86 198 86 199 86 200 86 201 86 202 86 203 86 204 86 205 86 206 86 207 86 208 86 209 86 210 86 211 86 212 86 213 86 214 86 215 86 216 86 217 86 218 86 219 86 220 86 221 86 222 86 223 86 224 86 225 86 226 86 227 86 228 86 229 86 230 86 231 86 232 86 233 86 234 86 235 86 236 86 237 86 238 86 239 86 240 86 241 86 242 86 243 86 244 86 245 86 246 86 247 86 248 86 249 86 250 86 251 86 252 86 253 86 254 86 255 86 256 86 257 86 258 86 259 86 260 86 261 86 262 86 263 86 264 86 265 86 266 86 267 86 268 86 269 86 270 86 271 86 272 86 273 86 274 86 275 86 276 86 277 86 278 86 279 86 280 86 281 86 282 86 283 86 284 86 285 86 286 86 287 86 288 86 289 86 290 86 291 86 292 86 293 86 294 86 295 86 296 86 297 86 298 86 299 87 0 87 1 87 2 87 3 87 4 87 5 87 6 87 7 87 8 87 9 87 10 87 11 87 12 87 13 87 14 87 15 87 16 87 17 87 18 87 19 87 20 87 21 87 22 87 23 87 24 87 25 87 26 87 27 87 28 87 29 87 30 87 31 87 32 87 33 87 34 87 35 87 36 87 37 87 38 87 39 87 40 87 41 87 42 87 43 87 44 87 45 87 46 87 47 87 48 87 49 87 50 87 51 87 52 87 53 87 54 87 55 87 56 87 57 87 58 87 59 87 60 87 61 87 62 87 63 87 64 87 65 87 66 87 67 87 68 87 69 87 70 87 71 87 72 87 73 87 74 87 75 87 76 87 77 87 78 87 79 87 80 87 81 87 82 87 83 87 84 87 85 87 86 87 87 87 88 87 89 87 90 87 91 87 92 87 93 87 94 87 95 87 96 87 97 87 98 87 99 87 100 87 101 87 102 87 103 87 104 87 105 87 106 87 107 87 108 87 109 87 110 87 111 87 112 87 113 87 114 87 115 87 116 87 117 87 118 87 119 87 120 87 121 87 122 87 123 87 124 87 125 87 126 87 127 87 128 87 129 87 130 87 131 87 132 87 133 87 134 87 135 87 136 87 137 87 138 87 139 87 140 87 141 87 142 87 143 87 144 87 145 87 146 87 147 87 148 87 149 87 150 87 151 87 152 87 153 87 154 87 155 87 156 87 157 87 158 87 159 87 160 87 161 87 162 87 163 87 164 87 165 87 166 87 167 87 168 87 169 87 170 87 171 87 172 87 173 87 174 87 175 87 176 87 177 87 178 87 179 87 180 87 181 87 182 87 183 87 184 87 185 87 186 87 187 87 188 87 189 87 190 87 191 87 192 87 193 87 194 87 195 87 196 87 197 87 198 87 199 87 200 87 201 87 202 87 203 87 204 87 205 87 206 87 207 87 208 87 209 87 210 87 211 87 212 87 213 87 214 87 215 87 216 87 217 87 218 87 219 87 220 87 221 87 222 87 223 87 224 87 225 87 226 87 227 87 228 87 229 87 230 87 231 87 232 87 233 87 234 87 235 87 236 87 237 87 238 87 239 87 240 87 241 87 242 87 243 87 244 87 245 87 246 87 247 87 248 87 249 87 250 87 251 87 252 87 253 87 254 87 255 87 256 87 257 87 258 87 259 87 260 87 261 87 262 87 263 87 264 87 265 87 266 87 267 87 268 87 269 87 270 87 271 87 272 87 273 87 274 87 275 87 276 87 277 87 278 87 279 87 280 87 281 87 282 87 283 87 284 87 285 87 286 87 287 87 288 87 289 87 290 87 291 87 292 87 293 87 294 87 295 87 296 87 297 87 298 87 299 88 0 88 1 88 2 88 3 88 4 88 5 88 6 88 7 88 8 88 9 88 10 88 11 88 12 88 13 88 14 88 15 88 16 88 17 88 18 88 19 88 20 88 21 88 22 88 23 88 24 88 25 88 26 88 27 88 28 88 29 88 30 88 31 88 32 88 33 88 34 88 35 88 36 88 37 88 38 88 39 88 40 88 41 88 42 88 43 88 44 88 45 88 46 88 47 88 48 88 49 88 50 88 51 88 52 88 53 88 54 88 55 88 56 88 57 88 58 88 59 88 60 88 61 88 62 88 63 88 64 88 65 88 66 88 67 88 68 88 69 88 70 88 71 88 72 88 73 88 74 88 75 88 76 88 77 88 78 88 79 88 80 88 81 88 82 88 83 88 84 88 85 88 86 88 87 88 88 88 89 88 90 88 91 88 92 88 93 88 94 88 95 88 96 88 97 88 98 88 99 88 100 88 101 88 102 88 103 88 104 88 105 88 106 88 107 88 108 88 109 88 110 88 111 88 112 88 113 88 114 88 115 88 116 88 117 88 118 88 119 88 120 88 121 88 122 88 123 88 124 88 125 88 126 88 127 88 128 88 129 88 130 88 131 88 132 88 133 88 134 88 135 88 136 88 137 88 138 88 139 88 140 88 141 88 142 88 143 88 144 88 145 88 146 88 147 88 148 88 149 88 150 88 151 88 152 88 153 88 154 88 155 88 156 88 157 88 158 88 159 88 160 88 161 88 162 88 163 88 164 88 165 88 166 88 167 88 168 88 169 88 170 88 171 88 172 88 173 88 174 88 175 88 176 88 177 88 178 88 179 88 180 88 181 88 182 88 183 88 184 88 185 88 186 88 187 88 188 88 189 88 190 88 191 88 192 88 193 88 194 88 195 88 196 88 197 88 198 88 199 88 200 88 201 88 202 88 203 88 204 88 205 88 206 88 207 88 208 88 209 88 210 88 211 88 212 88 213 88 214 88 215 88 216 88 217 88 218 88 219 88 220 88 221 88 222 88 223 88 224 88 225 88 226 88 227 88 228 88 229 88 230 88 231 88 232 88 233 88 234 88 235 88 236 88 237 88 238 88 239 88 240 88 241 88 242 88 243 88 244 88 245 88 246 88 247 88 248 88 249 88 250 88 251 88 252 88 253 88 254 88 255 88 256 88 257 88 258 88 259 88 260 88 261 88 262 88 263 88 264 88 265 88 266 88 267 88 268 88 269 88 270 88 271 88 272 88 273 88 274 88 275 88 276 88 277 88 278 88 279 88 280 88 281 88 282 88 283 88 284 88 285 88 286 88 287 88 288 88 289 88 290 88 291 88 292 88 293 88 294 88 295 88 296 88 297 88 298 88 299 89 0 89 1 89 2 89 3 89 4 89 5 89 6 89 7 89 8 89 9 89 10 89 11 89 12 89 13 89 14 89 15 89 16 89 17 89 18 89 19 89 20 89 21 89 22 89 23 89 24 89 25 89 26 89 27 89 28 89 29 89 30 89 31 89 32 89 33 89 34 89 35 89 36 89 37 89 38 89 39 89 40 89 41 89 42 89 43 89 44 89 45 89 46 89 47 89 48 89 49 89 50 89 51 89 52 89 53 89 54 89 55 89 56 89 57 89 58 89 59 89 60 89 61 89 62 89 63 89 64 89 65 89 66 89 67 89 68 89 69 89 70 89 71 89 72 89 73 89 74 89 75 89 76 89 77 89 78 89 79 89 80 89 81 89 82 89 83 89 84 89 85 89 86 89 87 89 88 89 89 89 90 89 91 89 92 89 93 89 94 89 95 89 96 89 97 89 98 89 99 89 100 89 101 89 102 89 103 89 104 89 105 89 106 89 107 89 108 89 109 89 110 89 111 89 112 89 113 89 114 89 115 89 116 89 117 89 118 89 119 89 120 89 121 89 122 89 123 89 124 89 125 89 126 89 127 89 128 89 129 89 130 89 131 89 132 89 133 89 134 89 135 89 136 89 137 89 138 89 139 89 140 89 141 89 142 89 143 89 144 89 145 89 146 89 147 89 148 89 149 89 150 89 151 89 152 89 153 89 154 89 155 89 156 89 157 89 158 89 159 89 160 89 161 89 162 89 163 89 164 89 165 89 166 89 167 89 168 89 169 89 170 89 171 89 172 89 173 89 174 89 175 89 176 89 177 89 178 89 179 89 180 89 181 89 182 89 183 89 184 89 185 89 186 89 187 89 188 89 189 89 190 89 191 89 192 89 193 89 194 89 195 89 196 89 197 89 198 89 199 89 200 89 201 89 202 89 203 89 204 89 205 89 206 89 207 89 208 89 209 89 210 89 211 89 212 89 213 89 214 89 215 89 216 89 217 89 218 89 219 89 220 89 221 89 222 89 223 89 224 89 225 89 226 89 227 89 228 89 229 89 230 89 231 89 232 89 233 89 234 89 235 89 236 89 237 89 238 89 239 89 240 89 241 89 242 89 243 89 244 89 245 89 246 89 247 89 248 89 249 89 250 89 251 89 252 89 253 89 254 89 255 89 256 89 257 89 258 89 259 89 260 89 261 89 262 89 263 89 264 89 265 89 266 89 267 89 268 89 269 89 270 89 271 89 272 89 273 89 274 89 275 89 276 89 277 89 278 89 279 89 280 89 281 89 282 89 283 89 284 89 285 89 286 89 287 89 288 89 289 89 290 89 291 89 292 89 293 89 294 89 295 89 296 89 297 89 298 89 299 90 0 90 1 90 2 90 3 90 4 90 5 90 6 90 7 90 8 90 9 90 10 90 11 90 12 90 13 90 14 90 15 90 16 90 17 90 18 90 19 90 20 90 21 90 22 90 23 90 24 90 25 90 26 90 27 90 28 90 29 90 30 90 31 90 32 90 33 90 34 90 35 90 36 90 37 90 38 90 39 90 40 90 41 90 42 90 43 90 44 90 45 90 46 90 47 90 48 90 49 90 50 90 51 90 52 90 53 90 54 90 55 90 56 90 57 90 58 90 59 90 60 90 61 90 62 90 63 90 64 90 65 90 66 90 67 90 68 90 69 90 70 90 71 90 72 90 73 90 74 90 75 90 76 90 77 90 78 90 79 90 80 90 81 90 82 90 83 90 84 90 85 90 86 90 87 90 88 90 89 90 90 90 91 90 92 90 93 90 94 90 95 90 96 90 97 90 98 90 99 90 100 90 101 90 102 90 103 90 104 90 105 90 106 90 107 90 108 90 109 90 110 90 111 90 112 90 113 90 114 90 115 90 116 90 117 90 118 90 119 90 120 90 121 90 122 90 123 90 124 90 125 90 126 90 127 90 128 90 129 90 130 90 131 90 132 90 133 90 134 90 135 90 136 90 137 90 138 90 139 90 140 90 141 90 142 90 143 90 144 90 145 90 146 90 147 90 148 90 149 90 150 90 151 90 152 90 153 90 154 90 155 90 156 90 157 90 158 90 159 90 160 90 161 90 162 90 163 90 164 90 165 90 166 90 167 90 168 90 169 90 170 90 171 90 172 90 173 90 174 90 175 90 176 90 177 90 178 90 179 90 180 90 181 90 182 90 183 90 184 90 185 90 186 90 187 90 188 90 189 90 190 90 191 90 192 90 193 90 194 90 195 90 196 90 197 90 198 90 199 90 200 90 201 90 202 90 203 90 204 90 205 90 206 90 207 90 208 90 209 90 210 90 211 90 212 90 213 90 214 90 215 90 216 90 217 90 218 90 219 90 220 90 221 90 222 90 223 90 224 90 225 90 226 90 227 90 228 90 229 90 230 90 231 90 232 90 233 90 234 90 235 90 236 90 237 90 238 90 239 90 240 90 241 90 242 90 243 90 244 90 245 90 246 90 247 90 248 90 249 90 250 90 251 90 252 90 253 90 254 90 255 90 256 90 257 90 258 90 259 90 260 90 261 90 262 90 263 90 264 90 265 90 266 90 267 90 268 90 269 90 270 90 271 90 272 90 273 90 274 90 275 90 276 90 277 90 278 90 279 90 280 90 281 90 282 90 283 90 284 90 285 90 286 90 287 90 288 90 289 90 290 90 291 90 292 90 293 90 294 90 295 90 296 90 297 90 298 90 299 91 0 91 1 91 2 91 3 91 4 91 5 91 6 91 7 91 8 91 9 91 10 91 11 91 12 91 13 91 14 91 15 91 16 91 17 91 18 91 19 91 20 91 21 91 22 91 23 91 24 91 25 91 26 91 27 91 28 91 29 91 30 91 31 91 32 91 33 91 34 91 35 91 36 91 37 91 38 91 39 91 40 91 41 91 42 91 43 91 44 91 45 91 46 91 47 91 48 91 49 91 50 91 51 91 52 91 53 91 54 91 55 91 56 91 57 91 58 91 59 91 60 91 61 91 62 91 63 91 64 91 65 91 66 91 67 91 68 91 69 91 70 91 71 91 72 91 73 91 74 91 75 91 76 91 77 91 78 91 79 91 80 91 81 91 82 91 83 91 84 91 85 91 86 91 87 91 88 91 89 91 90 91 91 91 92 91 93 91 94 91 95 91 96 91 97 91 98 91 99 91 100 91 101 91 102 91 103 91 104 91 105 91 106 91 107 91 108 91 109 91 110 91 111 91 112 91 113 91 114 91 115 91 116 91 117 91 118 91 119 91 120 91 121 91 122 91 123 91 124 91 125 91 126 91 127 91 128 91 129 91 130 91 131 91 132 91 133 91 134 91 135 91 136 91 137 91 138 91 139 91 140 91 141 91 142 91 143 91 144 91 145 91 146 91 147 91 148 91 149 91 150 91 151 91 152 91 153 91 154 91 155 91 156 91 157 91 158 91 159 91 160 91 161 91 162 91 163 91 164 91 165 91 166 91 167 91 168 91 169 91 170 91 171 91 172 91 173 91 174 91 175 91 176 91 177 91 178 91 179 91 180 91 181 91 182 91 183 91 184 91 185 91 186 91 187 91 188 91 189 91 190 91 191 91 192 91 193 91 194 91 195 91 196 91 197 91 198 91 199 91 200 91 201 91 202 91 203 91 204 91 205 91 206 91 207 91 208 91 209 91 210 91 211 91 212 91 213 91 214 91 215 91 216 91 217 91 218 91 219 91 220 91 221 91 222 91 223 91 224 91 225 91 226 91 227 91 228 91 229 91 230 91 231 91 232 91 233 91 234 91 235 91 236 91 237 91 238 91 239 91 240 91 241 91 242 91 243 91 244 91 245 91 246 91 247 91 248 91 249 91 250 91 251 91 252 91 253 91 254 91 255 91 256 91 257 91 258 91 259 91 260 91 261 91 262 91 263 91 264 91 265 91 266 91 267 91 268 91 269 91 270 91 271 91 272 91 273 91 274 91 275 91 276 91 277 91 278 91 279 91 280 91 281 91 282 91 283 91 284 91 285 91 286 91 287 91 288 91 289 91 290 91 291 91 292 91 293 91 294 91 295 91 296 91 297 91 298 91 299 92 0 92 1 92 2 92 3 92 4 92 5 92 6 92 7 92 8 92 9 92 10 92 11 92 12 92 13 92 14 92 15 92 16 92 17 92 18 92 19 92 20 92 21 92 22 92 23 92 24 92 25 92 26 92 27 92 28 92 29 92 30 92 31 92 32 92 33 92 34 92 35 92 36 92 37 92 38 92 39 92 40 92 41 92 42 92 43 92 44 92 45 92 46 92 47 92 48 92 49 92 50 92 51 92 52 92 53 92 54 92 55 92 56 92 57 92 58 92 59 92 60 92 61 92 62 92 63 92 64 92 65 92 66 92 67 92 68 92 69 92 70 92 71 92 72 92 73 92 74 92 75 92 76 92 77 92 78 92 79 92 80 92 81 92 82 92 83 92 84 92 85 92 86 92 87 92 88 92 89 92 90 92 91 92 92 92 93 92 94 92 95 92 96 92 97 92 98 92 99 92 100 92 101 92 102 92 103 92 104 92 105 92 106 92 107 92 108 92 109 92 110 92 111 92 112 92 113 92 114 92 115 92 116 92 117 92 118 92 119 92 120 92 121 92 122 92 123 92 124 92 125 92 126 92 127 92 128 92 129 92 130 92 131 92 132 92 133 92 134 92 135 92 136 92 137 92 138 92 139 92 140 92 141 92 142 92 143 92 144 92 145 92 146 92 147 92 148 92 149 92 150 92 151 92 152 92 153 92 154 92 155 92 156 92 157 92 158 92 159 92 160 92 161 92 162 92 163 92 164 92 165 92 166 92 167 92 168 92 169 92 170 92 171 92 172 92 173 92 174 92 175 92 176 92 177 92 178 92 179 92 180 92 181 92 182 92 183 92 184 92 185 92 186 92 187 92 188 92 189 92 190 92 191 92 192 92 193 92 194 92 195 92 196 92 197 92 198 92 199 92 200 92 201 92 202 92 203 92 204 92 205 92 206 92 207 92 208 92 209 92 210 92 211 92 212 92 213 92 214 92 215 92 216 92 217 92 218 92 219 92 220 92 221 92 222 92 223 92 224 92 225 92 226 92 227 92 228 92 229 92 230 92 231 92 232 92 233 92 234 92 235 92 236 92 237 92 238 92 239 92 240 92 241 92 242 92 243 92 244 92 245 92 246 92 247 92 248 92 249 92 250 92 251 92 252 92 253 92 254 92 255 92 256 92 257 92 258 92 259 92 260 92 261 92 262 92 263 92 264 92 265 92 266 92 267 92 268 92 269 92 270 92 271 92 272 92 273 92 274 92 275 92 276 92 277 92 278 92 279 92 280 92 281 92 282 92 283 92 284 92 285 92 286 92 287 92 288 92 289 92 290 92 291 92 292 92 293 92 294 92 295 92 296 92 297 92 298 92 299 93 0 93 1 93 2 93 3 93 4 93 5 93 6 93 7 93 8 93 9 93 10 93 11 93 12 93 13 93 14 93 15 93 16 93 17 93 18 93 19 93 20 93 21 93 22 93 23 93 24 93 25 93 26 93 27 93 28 93 29 93 30 93 31 93 32 93 33 93 34 93 35 93 36 93 37 93 38 93 39 93 40 93 41 93 42 93 43 93 44 93 45 93 46 93 47 93 48 93 49 93 50 93 51 93 52 93 53 93 54 93 55 93 56 93 57 93 58 93 59 93 60 93 61 93 62 93 63 93 64 93 65 93 66 93 67 93 68 93 69 93 70 93 71 93 72 93 73 93 74 93 75 93 76 93 77 93 78 93 79 93 80 93 81 93 82 93 83 93 84 93 85 93 86 93 87 93 88 93 89 93 90 93 91 93 92 93 93 93 94 93 95 93 96 93 97 93 98 93 99 93 100 93 101 93 102 93 103 93 104 93 105 93 106 93 107 93 108 93 109 93 110 93 111 93 112 93 113 93 114 93 115 93 116 93 117 93 118 93 119 93 120 93 121 93 122 93 123 93 124 93 125 93 126 93 127 93 128 93 129 93 130 93 131 93 132 93 133 93 134 93 135 93 136 93 137 93 138 93 139 93 140 93 141 93 142 93 143 93 144 93 145 93 146 93 147 93 148 93 149 93 150 93 151 93 152 93 153 93 154 93 155 93 156 93 157 93 158 93 159 93 160 93 161 93 162 93 163 93 164 93 165 93 166 93 167 93 168 93 169 93 170 93 171 93 172 93 173 93 174 93 175 93 176 93 177 93 178 93 179 93 180 93 181 93 182 93 183 93 184 93 185 93 186 93 187 93 188 93 189 93 190 93 191 93 192 93 193 93 194 93 195 93 196 93 197 93 198 93 199 93 200 93 201 93 202 93 203 93 204 93 205 93 206 93 207 93 208 93 209 93 210 93 211 93 212 93 213 93 214 93 215 93 216 93 217 93 218 93 219 93 220 93 221 93 222 93 223 93 224 93 225 93 226 93 227 93 228 93 229 93 230 93 231 93 232 93 233 93 234 93 235 93 236 93 237 93 238 93 239 93 240 93 241 93 242 93 243 93 244 93 245 93 246 93 247 93 248 93 249 93 250 93 251 93 252 93 253 93 254 93 255 93 256 93 257 93 258 93 259 93 260 93 261 93 262 93 263 93 264 93 265 93 266 93 267 93 268 93 269 93 270 93 271 93 272 93 273 93 274 93 275 93 276 93 277 93 278 93 279 93 280 93 281 93 282 93 283 93 284 93 285 93 286 93 287 93 288 93 289 93 290 93 291 93 292 93 293 93 294 93 295 93 296 93 297 93 298 93 299 94 0 94 1 94 2 94 3 94 4 94 5 94 6 94 7 94 8 94 9 94 10 94 11 94 12 94 13 94 14 94 15 94 16 94 17 94 18 94 19 94 20 94 21 94 22 94 23 94 24 94 25 94 26 94 27 94 28 94 29 94 30 94 31 94 32 94 33 94 34 94 35 94 36 94 37 94 38 94 39 94 40 94 41 94 42 94 43 94 44 94 45 94 46 94 47 94 48 94 49 94 50 94 51 94 52 94 53 94 54 94 55 94 56 94 57 94 58 94 59 94 60 94 61 94 62 94 63 94 64 94 65 94 66 94 67 94 68 94 69 94 70 94 71 94 72 94 73 94 74 94 75 94 76 94 77 94 78 94 79 94 80 94 81 94 82 94 83 94 84 94 85 94 86 94 87 94 88 94 89 94 90 94 91 94 92 94 93 94 94 94 95 94 96 94 97 94 98 94 99 94 100 94 101 94 102 94 103 94 104 94 105 94 106 94 107 94 108 94 109 94 110 94 111 94 112 94 113 94 114 94 115 94 116 94 117 94 118 94 119 94 120 94 121 94 122 94 123 94 124 94 125 94 126 94 127 94 128 94 129 94 130 94 131 94 132 94 133 94 134 94 135 94 136 94 137 94 138 94 139 94 140 94 141 94 142 94 143 94 144 94 145 94 146 94 147 94 148 94 149 94 150 94 151 94 152 94 153 94 154 94 155 94 156 94 157 94 158 94 159 94 160 94 161 94 162 94 163 94 164 94 165 94 166 94 167 94 168 94 169 94 170 94 171 94 172 94 173 94 174 94 175 94 176 94 177 94 178 94 179 94 180 94 181 94 182 94 183 94 184 94 185 94 186 94 187 94 188 94 189 94 190 94 191 94 192 94 193 94 194 94 195 94 196 94 197 94 198 94 199 94 200 94 201 94 202 94 203 94 204 94 205 94 206 94 207 94 208 94 209 94 210 94 211 94 212 94 213 94 214 94 215 94 216 94 217 94 218 94 219 94 220 94 221 94 222 94 223 94 224 94 225 94 226 94 227 94 228 94 229 94 230 94 231 94 232 94 233 94 234 94 235 94 236 94 237 94 238 94 239 94 240 94 241 94 242 94 243 94 244 94 245 94 246 94 247 94 248 94 249 94 250 94 251 94 252 94 253 94 254 94 255 94 256 94 257 94 258 94 259 94 260 94 261 94 262 94 263 94 264 94 265 94 266 94 267 94 268 94 269 94 270 94 271 94 272 94 273 94 274 94 275 94 276 94 277 94 278 94 279 94 280 94 281 94 282 94 283 94 284 94 285 94 286 94 287 94 288 94 289 94 290 94 291 94 292 94 293 94 294 94 295 94 296 94 297 94 298 94 299 95 0 95 1 95 2 95 3 95 4 95 5 95 6 95 7 95 8 95 9 95 10 95 11 95 12 95 13 95 14 95 15 95 16 95 17 95 18 95 19 95 20 95 21 95 22 95 23 95 24 95 25 95 26 95 27 95 28 95 29 95 30 95 31 95 32 95 33 95 34 95 35 95 36 95 37 95 38 95 39 95 40 95 41 95 42 95 43 95 44 95 45 95 46 95 47 95 48 95 49 95 50 95 51 95 52 95 53 95 54 95 55 95 56 95 57 95 58 95 59 95 60 95 61 95 62 95 63 95 64 95 65 95 66 95 67 95 68 95 69 95 70 95 71 95 72 95 73 95 74 95 75 95 76 95 77 95 78 95 79 95 80 95 81 95 82 95 83 95 84 95 85 95 86 95 87 95 88 95 89 95 90 95 91 95 92 95 93 95 94 95 95 95 96 95 97 95 98 95 99 95 100 95 101 95 102 95 103 95 104 95 105 95 106 95 107 95 108 95 109 95 110 95 111 95 112 95 113 95 114 95 115 95 116 95 117 95 118 95 119 95 120 95 121 95 122 95 123 95 124 95 125 95 126 95 127 95 128 95 129 95 130 95 131 95 132 95 133 95 134 95 135 95 136 95 137 95 138 95 139 95 140 95 141 95 142 95 143 95 144 95 145 95 146 95 147 95 148 95 149 95 150 95 151 95 152 95 153 95 154 95 155 95 156 95 157 95 158 95 159 95 160 95 161 95 162 95 163 95 164 95 165 95 166 95 167 95 168 95 169 95 170 95 171 95 172 95 173 95 174 95 175 95 176 95 177 95 178 95 179 95 180 95 181 95 182 95 183 95 184 95 185 95 186 95 187 95 188 95 189 95 190 95 191 95 192 95 193 95 194 95 195 95 196 95 197 95 198 95 199 95 200 95 201 95 202 95 203 95 204 95 205 95 206 95 207 95 208 95 209 95 210 95 211 95 212 95 213 95 214 95 215 95 216 95 217 95 218 95 219 95 220 95 221 95 222 95 223 95 224 95 225 95 226 95 227 95 228 95 229 95 230 95 231 95 232 95 233 95 234 95 235 95 236 95 237 95 238 95 239 95 240 95 241 95 242 95 243 95 244 95 245 95 246 95 247 95 248 95 249 95 250 95 251 95 252 95 253 95 254 95 255 95 256 95 257 95 258 95 259 95 260 95 261 95 262 95 263 95 264 95 265 95 266 95 267 95 268 95 269 95 270 95 271 95 272 95 273 95 274 95 275 95 276 95 277 95 278 95 279 95 280 95 281 95 282 95 283 95 284 95 285 95 286 95 287 95 288 95 289 95 290 95 291 95 292 95 293 95 294 95 295 95 296 95 297 95 298 95 299 96 0 96 1 96 2 96 3 96 4 96 5 96 6 96 7 96 8 96 9 96 10 96 11 96 12 96 13 96 14 96 15 96 16 96 17 96 18 96 19 96 20 96 21 96 22 96 23 96 24 96 25 96 26 96 27 96 28 96 29 96 30 96 31 96 32 96 33 96 34 96 35 96 36 96 37 96 38 96 39 96 40 96 41 96 42 96 43 96 44 96 45 96 46 96 47 96 48 96 49 96 50 96 51 96 52 96 53 96 54 96 55 96 56 96 57 96 58 96 59 96 60 96 61 96 62 96 63 96 64 96 65 96 66 96 67 96 68 96 69 96 70 96 71 96 72 96 73 96 74 96 75 96 76 96 77 96 78 96 79 96 80 96 81 96 82 96 83 96 84 96 85 96 86 96 87 96 88 96 89 96 90 96 91 96 92 96 93 96 94 96 95 96 96 96 97 96 98 96 99 96 100 96 101 96 102 96 103 96 104 96 105 96 106 96 107 96 108 96 109 96 110 96 111 96 112 96 113 96 114 96 115 96 116 96 117 96 118 96 119 96 120 96 121 96 122 96 123 96 124 96 125 96 126 96 127 96 128 96 129 96 130 96 131 96 132 96 133 96 134 96 135 96 136 96 137 96 138 96 139 96 140 96 141 96 142 96 143 96 144 96 145 96 146 96 147 96 148 96 149 96 150 96 151 96 152 96 153 96 154 96 155 96 156 96 157 96 158 96 159 96 160 96 161 96 162 96 163 96 164 96 165 96 166 96 167 96 168 96 169 96 170 96 171 96 172 96 173 96 174 96 175 96 176 96 177 96 178 96 179 96 180 96 181 96 182 96 183 96 184 96 185 96 186 96 187 96 188 96 189 96 190 96 191 96 192 96 193 96 194 96 195 96 196 96 197 96 198 96 199 96 200 96 201 96 202 96 203 96 204 96 205 96 206 96 207 96 208 96 209 96 210 96 211 96 212 96 213 96 214 96 215 96 216 96 217 96 218 96 219 96 220 96 221 96 222 96 223 96 224 96 225 96 226 96 227 96 228 96 229 96 230 96 231 96 232 96 233 96 234 96 235 96 236 96 237 96 238 96 239 96 240 96 241 96 242 96 243 96 244 96 245 96 246 96 247 96 248 96 249 96 250 96 251 96 252 96 253 96 254 96 255 96 256 96 257 96 258 96 259 96 260 96 261 96 262 96 263 96 264 96 265 96 266 96 267 96 268 96 269 96 270 96 271 96 272 96 273 96 274 96 275 96 276 96 277 96 278 96 279 96 280 96 281 96 282 96 283 96 284 96 285 96 286 96 287 96 288 96 289 96 290 96 291 96 292 96 293 96 294 96 295 96 296 96 297 96 298 96 299 97 0 97 1 97 2 97 3 97 4 97 5 97 6 97 7 97 8 97 9 97 10 97 11 97 12 97 13 97 14 97 15 97 16 97 17 97 18 97 19 97 20 97 21 97 22 97 23 97 24 97 25 97 26 97 27 97 28 97 29 97 30 97 31 97 32 97 33 97 34 97 35 97 36 97 37 97 38 97 39 97 40 97 41 97 42 97 43 97 44 97 45 97 46 97 47 97 48 97 49 97 50 97 51 97 52 97 53 97 54 97 55 97 56 97 57 97 58 97 59 97 60 97 61 97 62 97 63 97 64 97 65 97 66 97 67 97 68 97 69 97 70 97 71 97 72 97 73 97 74 97 75 97 76 97 77 97 78 97 79 97 80 97 81 97 82 97 83 97 84 97 85 97 86 97 87 97 88 97 89 97 90 97 91 97 92 97 93 97 94 97 95 97 96 97 97 97 98 97 99 97 100 97 101 97 102 97 103 97 104 97 105 97 106 97 107 97 108 97 109 97 110 97 111 97 112 97 113 97 114 97 115 97 116 97 117 97 118 97 119 97 120 97 121 97 122 97 123 97 124 97 125 97 126 97 127 97 128 97 129 97 130 97 131 97 132 97 133 97 134 97 135 97 136 97 137 97 138 97 139 97 140 97 141 97 142 97 143 97 144 97 145 97 146 97 147 97 148 97 149 97 150 97 151 97 152 97 153 97 154 97 155 97 156 97 157 97 158 97 159 97 160 97 161 97 162 97 163 97 164 97 165 97 166 97 167 97 168 97 169 97 170 97 171 97 172 97 173 97 174 97 175 97 176 97 177 97 178 97 179 97 180 97 181 97 182 97 183 97 184 97 185 97 186 97 187 97 188 97 189 97 190 97 191 97 192 97 193 97 194 97 195 97 196 97 197 97 198 97 199 97 200 97 201 97 202 97 203 97 204 97 205 97 206 97 207 97 208 97 209 97 210 97 211 97 212 97 213 97 214 97 215 97 216 97 217 97 218 97 219 97 220 97 221 97 222 97 223 97 224 97 225 97 226 97 227 97 228 97 229 97 230 97 231 97 232 97 233 97 234 97 235 97 236 97 237 97 238 97 239 97 240 97 241 97 242 97 243 97 244 97 245 97 246 97 247 97 248 97 249 97 250 97 251 97 252 97 253 97 254 97 255 97 256 97 257 97 258 97 259 97 260 97 261 97 262 97 263 97 264 97 265 97 266 97 267 97 268 97 269 97 270 97 271 97 272 97 273 97 274 97 275 97 276 97 277 97 278 97 279 97 280 97 281 97 282 97 283 97 284 97 285 97 286 97 287 97 288 97 289 97 290 97 291 97 292 97 293 97 294 97 295 97 296 97 297 97 298 97 299 98 0 98 1 98 2 98 3 98 4 98 5 98 6 98 7 98 8 98 9 98 10 98 11 98 12 98 13 98 14 98 15 98 16 98 17 98 18 98 19 98 20 98 21 98 22 98 23 98 24 98 25 98 26 98 27 98 28 98 29 98 30 98 31 98 32 98 33 98 34 98 35 98 36 98 37 98 38 98 39 98 40 98 41 98 42 98 43 98 44 98 45 98 46 98 47 98 48 98 49 98 50 98 51 98 52 98 53 98 54 98 55 98 56 98 57 98 58 98 59 98 60 98 61 98 62 98 63 98 64 98 65 98 66 98 67 98 68 98 69 98 70 98 71 98 72 98 73 98 74 98 75 98 76 98 77 98 78 98 79 98 80 98 81 98 82 98 83 98 84 98 85 98 86 98 87 98 88 98 89 98 90 98 91 98 92 98 93 98 94 98 95 98 96 98 97 98 98 98 99 98 100 98 101 98 102 98 103 98 104 98 105 98 106 98 107 98 108 98 109 98 110 98 111 98 112 98 113 98 114 98 115 98 116 98 117 98 118 98 119 98 120 98 121 98 122 98 123 98 124 98 125 98 126 98 127 98 128 98 129 98 130 98 131 98 132 98 133 98 134 98 135 98 136 98 137 98 138 98 139 98 140 98 141 98 142 98 143 98 144 98 145 98 146 98 147 98 148 98 149 98 150 98 151 98 152 98 153 98 154 98 155 98 156 98 157 98 158 98 159 98 160 98 161 98 162 98 163 98 164 98 165 98 166 98 167 98 168 98 169 98 170 98 171 98 172 98 173 98 174 98 175 98 176 98 177 98 178 98 179 98 180 98 181 98 182 98 183 98 184 98 185 98 186 98 187 98 188 98 189 98 190 98 191 98 192 98 193 98 194 98 195 98 196 98 197 98 198 98 199 98 200 98 201 98 202 98 203 98 204 98 205 98 206 98 207 98 208 98 209 98 210 98 211 98 212 98 213 98 214 98 215 98 216 98 217 98 218 98 219 98 220 98 221 98 222 98 223 98 224 98 225 98 226 98 227 98 228 98 229 98 230 98 231 98 232 98 233 98 234 98 235 98 236 98 237 98 238 98 239 98 240 98 241 98 242 98 243 98 244 98 245 98 246 98 247 98 248 98 249 98 250 98 251 98 252 98 253 98 254 98 255 98 256 98 257 98 258 98 259 98 260 98 261 98 262 98 263 98 264 98 265 98 266 98 267 98 268 98 269 98 270 98 271 98 272 98 273 98 274 98 275 98 276 98 277 98 278 98 279 98 280 98 281 98 282 98 283 98 284 98 285 98 286 98 287 98 288 98 289 98 290 98 291 98 292 98 293 98 294 98 295 98 296 98 297 98 298 98 299 99 0 99 1 99 2 99 3 99 4 99 5 99 6 99 7 99 8 99 9 99 10 99 11 99 12 99 13 99 14 99 15 99 16 99 17 99 18 99 19 99 20 99 21 99 22 99 23 99 24 99 25 99 26 99 27 99 28 99 29 99 30 99 31 99 32 99 33 99 34 99 35 99 36 99 37 99 38 99 39 99 40 99 41 99 42 99 43 99 44 99 45 99 46 99 47 99 48 99 49 99 50 99 51 99 52 99 53 99 54 99 55 99 56 99 57 99 58 99 59 99 60 99 61 99 62 99 63 99 64 99 65 99 66 99 67 99 68 99 69 99 70 99 71 99 72 99 73 99 74 99 75 99 76 99 77 99 78 99 79 99 80 99 81 99 82 99 83 99 84 99 85 99 86 99 87 99 88 99 89 99 90 99 91 99 92 99 93 99 94 99 95 99 96 99 97 99 98 99 99 99 100 99 101 99 102 99 103 99 104 99 105 99 106 99 107 99 108 99 109 99 110 99 111 99 112 99 113 99 114 99 115 99 116 99 117 99 118 99 119 99 120 99 121 99 122 99 123 99 124 99 125 99 126 99 127 99 128 99 129 99 130 99 131 99 132 99 133 99 134 99 135 99 136 99 137 99 138 99 139 99 140 99 141 99 142 99 143 99 144 99 145 99 146 99 147 99 148 99 149 99 150 99 151 99 152 99 153 99 154 99 155 99 156 99 157 99 158 99 159 99 160 99 161 99 162 99 163 99 164 99 165 99 166 99 167 99 168 99 169 99 170 99 171 99 172 99 173 99 174 99 175 99 176 99 177 99 178 99 179 99 180 99 181 99 182 99 183 99 184 99 185 99 186 99 187 99 188 99 189 99 190 99 191 99 192 99 193 99 194 99 195 99 196 99 197 99 198 99 199 99 200 99 201 99 202 99 203 99 204 99 205 99 206 99 207 99 208 99 209 99 210 99 211 99 212 99 213 99 214 99 215 99 216 99 217 99 218 99 219 99 220 99 221 99 222 99 223 99 224 99 225 99 226 99 227 99 228 99 229 99 230 99 231 99 232 99 233 99 234 99 235 99 236 99 237 99 238 99 239 99 240 99 241 99 242 99 243 99 244 99 245 99 246 99 247 99 248 99 249 99 250 99 251 99 252 99 253 99 254 99 255 99 256 99 257 99 258 99 259 99 260 99 261 99 262 99 263 99 264 99 265 99 266 99 267 99 268 99 269 99 270 99 271 99 272 99 273 99 274 99 275 99 276 99 277 99 278 99 279 99 280 99 281 99 282 99 283 99 284 99 285 99 286 99 287 99 288 99 289 99 290 99 291 99 292 99 293 99 294 99 295 99 296 99 297 99 298 99 299 100 0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 23 100 24 100 25 100 26 100 27 100 28 100 29 100 30 100 31 100 32 100 33 100 34 100 35 100 36 100 37 100 38 100 39 100 40 100 41 100 42 100 43 100 44 100 45 100 46 100 47 100 48 100 49 100 50 100 51 100 52 100 53 100 54 100 55 100 56 100 57 100 58 100 59 100 60 100 61 100 62 100 63 100 64 100 65 100 66 100 67 100 68 100 69 100 70 100 71 100 72 100 73 100 74 100 75 100 76 100 77 100 78 100 79 100 80 100 81 100 82 100 83 100 84 100 85 100 86 100 87 100 88 100 89 100 90 100 91 100 92 100 93 100 94 100 95 100 96 100 97 100 98 100 99 100 100 100 101 100 102 100 103 100 104 100 105 100 106 100 107 100 108 100 109 100 110 100 111 100 112 100 113 100 114 100 115 100 116 100 117 100 118 100 119 100 120 100 121 100 122 100 123 100 124 100 125 100 126 100 127 100 128 100 129 100 130 100 131 100 132 100 133 100 134 100 135 100 136 100 137 100 138 100 139 100 140 100 141 100 142 100 143 100 144 100 145 100 146 100 147 100 148 100 149 100 150 100 151 100 152 100 153 100 154 100 155 100 156 100 157 100 158 100 159 100 160 100 161 100 162 100 163 100 164 100 165 100 166 100 167 100 168 100 169 100 170 100 171 100 172 100 173 100 174 100 175 100 176 100 177 100 178 100 179 100 180 100 181 100 182 100 183 100 184 100 185 100 186 100 187 100 188 100 189 100 190 100 191 100 192 100 193 100 194 100 195 100 196 100 197 100 198 100 199 100 200 100 201 100 202 100 203 100 204 100 205 100 206 100 207 100 208 100 209 100 210 100 211 100 212 100 213 100 214 100 215 100 216 100 217 100 218 100 219 100 220 100 221 100 222 100 223 100 224 100 225 100 226 100 227 100 228 100 229 100 230 100 231 100 232 100 233 100 234 100 235 100 236 100 237 100 238 100 239 100 240 100 241 100 242 100 243 100 244 100 245 100 246 100 247 100 248 100 249 100 250 100 251 100 252 100 253 100 254 100 255 100 256 100 257 100 258 100 259 100 260 100 261 100 262 100 263 100 264 100 265 100 266 100 267 100 268 100 269 100 270 100 271 100 272 100 273 100 274 100 275 100 276 100 277 100 278 100 279 100 280 100 281 100 282 100 283 100 284 100 285 100 286 100 287 100 288 100 289 100 290 100 291 100 292 100 293 100 294 100 295 100 296 100 297 100 298 100 299 101 0 101 1 101 2 101 3 101 4 101 5 101 6 101 7 101 8 101 9 101 10 101 11 101 12 101 13 101 14 101 15 101 16 101 17 101 18 101 19 101 20 101 21 101 22 101 23 101 24 101 25 101 26 101 27 101 28 101 29 101 30 101 31 101 32 101 33 101 34 101 35 101 36 101 37 101 38 101 39 101 40 101 41 101 42 101 43 101 44 101 45 101 46 101 47 101 48 101 49 101 50 101 51 101 52 101 53 101 54 101 55 101 56 101 57 101 58 101 59 101 60 101 61 101 62 101 63 101 64 101 65 101 66 101 67 101 68 101 69 101 70 101 71 101 72 101 73 101 74 101 75 101 76 101 77 101 78 101 79 101 80 101 81 101 82 101 83 101 84 101 85 101 86 101 87 101 88 101 89 101 90 101 91 101 92 101 93 101 94 101 95 101 96 101 97 101 98 101 99 101 100 101 101 101 102 101 103 101 104 101 105 101 106 101 107 101 108 101 109 101 110 101 111 101 112 101 113 101 114 101 115 101 116 101 117 101 118 101 119 101 120 101 121 101 122 101 123 101 124 101 125 101 126 101 127 101 128 101 129 101 130 101 131 101 132 101 133 101 134 101 135 101 136 101 137 101 138 101 139 101 140 101 141 101 142 101 143 101 144 101 145 101 146 101 147 101 148 101 149 101 150 101 151 101 152 101 153 101 154 101 155 101 156 101 157 101 158 101 159 101 160 101 161 101 162 101 163 101 164 101 165 101 166 101 167 101 168 101 169 101 170 101 171 101 172 101 173 101 174 101 175 101 176 101 177 101 178 101 179 101 180 101 181 101 182 101 183 101 184 101 185 101 186 101 187 101 188 101 189 101 190 101 191 101 192 101 193 101 194 101 195 101 196 101 197 101 198 101 199 101 200 101 201 101 202 101 203 101 204 101 205 101 206 101 207 101 208 101 209 101 210 101 211 101 212 101 213 101 214 101 215 101 216 101 217 101 218 101 219 101 220 101 221 101 222 101 223 101 224 101 225 101 226 101 227 101 228 101 229 101 230 101 231 101 232 101 233 101 234 101 235 101 236 101 237 101 238 101 239 101 240 101 241 101 242 101 243 101 244 101 245 101 246 101 247 101 248 101 249 101 250 101 251 101 252 101 253 101 254 101 255 101 256 101 257 101 258 101 259 101 260 101 261 101 262 101 263 101 264 101 265 101 266 101 267 101 268 101 269 101 270 101 271 101 272 101 273 101 274 101 275 101 276 101 277 101 278 101 279 101 280 101 281 101 282 101 283 101 284 101 285 101 286 101 287 101 288 101 289 101 290 101 291 101 292 101 293 101 294 101 295 101 296 101 297 101 298 101 299 102 0 102 1 102 2 102 3 102 4 102 5 102 6 102 7 102 8 102 9 102 10 102 11 102 12 102 13 102 14 102 15 102 16 102 17 102 18 102 19 102 20 102 21 102 22 102 23 102 24 102 25 102 26 102 27 102 28 102 29 102 30 102 31 102 32 102 33 102 34 102 35 102 36 102 37 102 38 102 39 102 40 102 41 102 42 102 43 102 44 102 45 102 46 102 47 102 48 102 49 102 50 102 51 102 52 102 53 102 54 102 55 102 56 102 57 102 58 102 59 102 60 102 61 102 62 102 63 102 64 102 65 102 66 102 67 102 68 102 69 102 70 102 71 102 72 102 73 102 74 102 75 102 76 102 77 102 78 102 79 102 80 102 81 102 82 102 83 102 84 102 85 102 86 102 87 102 88 102 89 102 90 102 91 102 92 102 93 102 94 102 95 102 96 102 97 102 98 102 99 102 100 102 101 102 102 102 103 102 104 102 105 102 106 102 107 102 108 102 109 102 110 102 111 102 112 102 113 102 114 102 115 102 116 102 117 102 118 102 119 102 120 102 121 102 122 102 123 102 124 102 125 102 126 102 127 102 128 102 129 102 130 102 131 102 132 102 133 102 134 102 135 102 136 102 137 102 138 102 139 102 140 102 141 102 142 102 143 102 144 102 145 102 146 102 147 102 148 102 149 102 150 102 151 102 152 102 153 102 154 102 155 102 156 102 157 102 158 102 159 102 160 102 161 102 162 102 163 102 164 102 165 102 166 102 167 102 168 102 169 102 170 102 171 102 172 102 173 102 174 102 175 102 176 102 177 102 178 102 179 102 180 102 181 102 182 102 183 102 184 102 185 102 186 102 187 102 188 102 189 102 190 102 191 102 192 102 193 102 194 102 195 102 196 102 197 102 198 102 199 102 200 102 201 102 202 102 203 102 204 102 205 102 206 102 207 102 208 102 209 102 210 102 211 102 212 102 213 102 214 102 215 102 216 102 217 102 218 102 219 102 220 102 221 102 222 102 223 102 224 102 225 102 226 102 227 102 228 102 229 102 230 102 231 102 232 102 233 102 234 102 235 102 236 102 237 102 238 102 239 102 240 102 241 102 242 102 243 102 244 102 245 102 246 102 247 102 248 102 249 102 250 102 251 102 252 102 253 102 254 102 255 102 256 102 257 102 258 102 259 102 260 102 261 102 262 102 263 102 264 102 265 102 266 102 267 102 268 102 269 102 270 102 271 102 272 102 273 102 274 102 275 102 276 102 277 102 278 102 279 102 280 102 281 102 282 102 283 102 284 102 285 102 286 102 287 102 288 102 289 102 290 102 291 102 292 102 293 102 294 102 295 102 296 102 297 102 298 102 299 103 0 103 1 103 2 103 3 103 4 103 5 103 6 103 7 103 8 103 9 103 10 103 11 103 12 103 13 103 14 103 15 103 16 103 17 103 18 103 19 103 20 103 21 103 22 103 23 103 24 103 25 103 26 103 27 103 28 103 29 103 30 103 31 103 32 103 33 103 34 103 35 103 36 103 37 103 38 103 39 103 40 103 41 103 42 103 43 103 44 103 45 103 46 103 47 103 48 103 49 103 50 103 51 103 52 103 53 103 54 103 55 103 56 103 57 103 58 103 59 103 60 103 61 103 62 103 63 103 64 103 65 103 66 103 67 103 68 103 69 103 70 103 71 103 72 103 73 103 74 103 75 103 76 103 77 103 78 103 79 103 80 103 81 103 82 103 83 103 84 103 85 103 86 103 87 103 88 103 89 103 90 103 91 103 92 103 93 103 94 103 95 103 96 103 97 103 98 103 99 103 100 103 101 103 102 103 103 103 104 103 105 103 106 103 107 103 108 103 109 103 110 103 111 103 112 103 113 103 114 103 115 103 116 103 117 103 118 103 119 103 120 103 121 103 122 103 123 103 124 103 125 103 126 103 127 103 128 103 129 103 130 103 131 103 132 103 133 103 134 103 135 103 136 103 137 103 138 103 139 103 140 103 141 103 142 103 143 103 144 103 145 103 146 103 147 103 148 103 149 103 150 103 151 103 152 103 153 103 154 103 155 103 156 103 157 103 158 103 159 103 160 103 161 103 162 103 163 103 164 103 165 103 166 103 167 103 168 103 169 103 170 103 171 103 172 103 173 103 174 103 175 103 176 103 177 103 178 103 179 103 180 103 181 103 182 103 183 103 184 103 185 103 186 103 187 103 188 103 189 103 190 103 191 103 192 103 193 103 194 103 195 103 196 103 197 103 198 103 199 103 200 103 201 103 202 103 203 103 204 103 205 103 206 103 207 103 208 103 209 103 210 103 211 103 212 103 213 103 214 103 215 103 216 103 217 103 218 103 219 103 220 103 221 103 222 103 223 103 224 103 225 103 226 103 227 103 228 103 229 103 230 103 231 103 232 103 233 103 234 103 235 103 236 103 237 103 238 103 239 103 240 103 241 103 242 103 243 103 244 103 245 103 246 103 247 103 248 103 249 103 250 103 251 103 252 103 253 103 254 103 255 103 256 103 257 103 258 103 259 103 260 103 261 103 262 103 263 103 264 103 265 103 266 103 267 103 268 103 269 103 270 103 271 103 272 103 273 103 274 103 275 103 276 103 277 103 278 103 279 103 280 103 281 103 282 103 283 103 284 103 285 103 286 103 287 103 288 103 289 103 290 103 291 103 292 103 293 103 294 103 295 103 296 103 297 103 298 103 299 104 0 104 1 104 2 104 3 104 4 104 5 104 6 104 7 104 8 104 9 104 10 104 11 104 12 104 13 104 14 104 15 104 16 104 17 104 18 104 19 104 20 104 21 104 22 104 23 104 24 104 25 104 26 104 27 104 28 104 29 104 30 104 31 104 32 104 33 104 34 104 35 104 36 104 37 104 38 104 39 104 40 104 41 104 42 104 43 104 44 104 45 104 46 104 47 104 48 104 49 104 50 104 51 104 52 104 53 104 54 104 55 104 56 104 57 104 58 104 59 104 60 104 61 104 62 104 63 104 64 104 65 104 66 104 67 104 68 104 69 104 70 104 71 104 72 104 73 104 74 104 75 104 76 104 77 104 78 104 79 104 80 104 81 104 82 104 83 104 84 104 85 104 86 104 87 104 88 104 89 104 90 104 91 104 92 104 93 104 94 104 95 104 96 104 97 104 98 104 99 104 100 104 101 104 102 104 103 104 104 104 105 104 106 104 107 104 108 104 109 104 110 104 111 104 112 104 113 104 114 104 115 104 116 104 117 104 118 104 119 104 120 104 121 104 122 104 123 104 124 104 125 104 126 104 127 104 128 104 129 104 130 104 131 104 132 104 133 104 134 104 135 104 136 104 137 104 138 104 139 104 140 104 141 104 142 104 143 104 144 104 145 104 146 104 147 104 148 104 149 104 150 104 151 104 152 104 153 104 154 104 155 104 156 104 157 104 158 104 159 104 160 104 161 104 162 104 163 104 164 104 165 104 166 104 167 104 168 104 169 104 170 104 171 104 172 104 173 104 174 104 175 104 176 104 177 104 178 104 179 104 180 104 181 104 182 104 183 104 184 104 185 104 186 104 187 104 188 104 189 104 190 104 191 104 192 104 193 104 194 104 195 104 196 104 197 104 198 104 199 104 200 104 201 104 202 104 203 104 204 104 205 104 206 104 207 104 208 104 209 104 210 104 211 104 212 104 213 104 214 104 215 104 216 104 217 104 218 104 219 104 220 104 221 104 222 104 223 104 224 104 225 104 226 104 227 104 228 104 229 104 230 104 231 104 232 104 233 104 234 104 235 104 236 104 237 104 238 104 239 104 240 104 241 104 242 104 243 104 244 104 245 104 246 104 247 104 248 104 249 104 250 104 251 104 252 104 253 104 254 104 255 104 256 104 257 104 258 104 259 104 260 104 261 104 262 104 263 104 264 104 265 104 266 104 267 104 268 104 269 104 270 104 271 104 272 104 273 104 274 104 275 104 276 104 277 104 278 104 279 104 280 104 281 104 282 104 283 104 284 104 285 104 286 104 287 104 288 104 289 104 290 104 291 104 292 104 293 104 294 104 295 104 296 104 297 104 298 104 299 105 0 105 1 105 2 105 3 105 4 105 5 105 6 105 7 105 8 105 9 105 10 105 11 105 12 105 13 105 14 105 15 105 16 105 17 105 18 105 19 105 20 105 21 105 22 105 23 105 24 105 25 105 26 105 27 105 28 105 29 105 30 105 31 105 32 105 33 105 34 105 35 105 36 105 37 105 38 105 39 105 40 105 41 105 42 105 43 105 44 105 45 105 46 105 47 105 48 105 49 105 50 105 51 105 52 105 53 105 54 105 55 105 56 105 57 105 58 105 59 105 60 105 61 105 62 105 63 105 64 105 65 105 66 105 67 105 68 105 69 105 70 105 71 105 72 105 73 105 74 105 75 105 76 105 77 105 78 105 79 105 80 105 81 105 82 105 83 105 84 105 85 105 86 105 87 105 88 105 89 105 90 105 91 105 92 105 93 105 94 105 95 105 96 105 97 105 98 105 99 105 100 105 101 105 102 105 103 105 104 105 105 105 106 105 107 105 108 105 109 105 110 105 111 105 112 105 113 105 114 105 115 105 116 105 117 105 118 105 119 105 120 105 121 105 122 105 123 105 124 105 125 105 126 105 127 105 128 105 129 105 130 105 131 105 132 105 133 105 134 105 135 105 136 105 137 105 138 105 139 105 140 105 141 105 142 105 143 105 144 105 145 105 146 105 147 105 148 105 149 105 150 105 151 105 152 105 153 105 154 105 155 105 156 105 157 105 158 105 159 105 160 105 161 105 162 105 163 105 164 105 165 105 166 105 167 105 168 105 169 105 170 105 171 105 172 105 173 105 174 105 175 105 176 105 177 105 178 105 179 105 180 105 181 105 182 105 183 105 184 105 185 105 186 105 187 105 188 105 189 105 190 105 191 105 192 105 193 105 194 105 195 105 196 105 197 105 198 105 199 105 200 105 201 105 202 105 203 105 204 105 205 105 206 105 207 105 208 105 209 105 210 105 211 105 212 105 213 105 214 105 215 105 216 105 217 105 218 105 219 105 220 105 221 105 222 105 223 105 224 105 225 105 226 105 227 105 228 105 229 105 230 105 231 105 232 105 233 105 234 105 235 105 236 105 237 105 238 105 239 105 240 105 241 105 242 105 243 105 244 105 245 105 246 105 247 105 248 105 249 105 250 105 251 105 252 105 253 105 254 105 255 105 256 105 257 105 258 105 259 105 260 105 261 105 262 105 263 105 264 105 265 105 266 105 267 105 268 105 269 105 270 105 271 105 272 105 273 105 274 105 275 105 276 105 277 105 278 105 279 105 280 105 281 105 282 105 283 105 284 105 285 105 286 105 287 105 288 105 289 105 290 105 291 105 292 105 293 105 294 105 295 105 296 105 297 105 298 105 299 106 0 106 1 106 2 106 3 106 4 106 5 106 6 106 7 106 8 106 9 106 10 106 11 106 12 106 13 106 14 106 15 106 16 106 17 106 18 106 19 106 20 106 21 106 22 106 23 106 24 106 25 106 26 106 27 106 28 106 29 106 30 106 31 106 32 106 33 106 34 106 35 106 36 106 37 106 38 106 39 106 40 106 41 106 42 106 43 106 44 106 45 106 46 106 47 106 48 106 49 106 50 106 51 106 52 106 53 106 54 106 55 106 56 106 57 106 58 106 59 106 60 106 61 106 62 106 63 106 64 106 65 106 66 106 67 106 68 106 69 106 70 106 71 106 72 106 73 106 74 106 75 106 76 106 77 106 78 106 79 106 80 106 81 106 82 106 83 106 84 106 85 106 86 106 87 106 88 106 89 106 90 106 91 106 92 106 93 106 94 106 95 106 96 106 97 106 98 106 99 106 100 106 101 106 102 106 103 106 104 106 105 106 106 106 107 106 108 106 109 106 110 106 111 106 112 106 113 106 114 106 115 106 116 106 117 106 118 106 119 106 120 106 121 106 122 106 123 106 124 106 125 106 126 106 127 106 128 106 129 106 130 106 131 106 132 106 133 106 134 106 135 106 136 106 137 106 138 106 139 106 140 106 141 106 142 106 143 106 144 106 145 106 146 106 147 106 148 106 149 106 150 106 151 106 152 106 153 106 154 106 155 106 156 106 157 106 158 106 159 106 160 106 161 106 162 106 163 106 164 106 165 106 166 106 167 106 168 106 169 106 170 106 171 106 172 106 173 106 174 106 175 106 176 106 177 106 178 106 179 106 180 106 181 106 182 106 183 106 184 106 185 106 186 106 187 106 188 106 189 106 190 106 191 106 192 106 193 106 194 106 195 106 196 106 197 106 198 106 199 106 200 106 201 106 202 106 203 106 204 106 205 106 206 106 207 106 208 106 209 106 210 106 211 106 212 106 213 106 214 106 215 106 216 106 217 106 218 106 219 106 220 106 221 106 222 106 223 106 224 106 225 106 226 106 227 106 228 106 229 106 230 106 231 106 232 106 233 106 234 106 235 106 236 106 237 106 238 106 239 106 240 106 241 106 242 106 243 106 244 106 245 106 246 106 247 106 248 106 249 106 250 106 251 106 252 106 253 106 254 106 255 106 256 106 257 106 258 106 259 106 260 106 261 106 262 106 263 106 264 106 265 106 266 106 267 106 268 106 269 106 270 106 271 106 272 106 273 106 274 106 275 106 276 106 277 106 278 106 279 106 280 106 281 106 282 106 283 106 284 106 285 106 286 106 287 106 288 106 289 106 290 106 291 106 292 106 293 106 294 106 295 106 296 106 297 106 298 106 299 107 0 107 1 107 2 107 3 107 4 107 5 107 6 107 7 107 8 107 9 107 10 107 11 107 12 107 13 107 14 107 15 107 16 107 17 107 18 107 19 107 20 107 21 107 22 107 23 107 24 107 25 107 26 107 27 107 28 107 29 107 30 107 31 107 32 107 33 107 34 107 35 107 36 107 37 107 38 107 39 107 40 107 41 107 42 107 43 107 44 107 45 107 46 107 47 107 48 107 49 107 50 107 51 107 52 107 53 107 54 107 55 107 56 107 57 107 58 107 59 107 60 107 61 107 62 107 63 107 64 107 65 107 66 107 67 107 68 107 69 107 70 107 71 107 72 107 73 107 74 107 75 107 76 107 77 107 78 107 79 107 80 107 81 107 82 107 83 107 84 107 85 107 86 107 87 107 88 107 89 107 90 107 91 107 92 107 93 107 94 107 95 107 96 107 97 107 98 107 99 107 100 107 101 107 102 107 103 107 104 107 105 107 106 107 107 107 108 107 109 107 110 107 111 107 112 107 113 107 114 107 115 107 116 107 117 107 118 107 119 107 120 107 121 107 122 107 123 107 124 107 125 107 126 107 127 107 128 107 129 107 130 107 131 107 132 107 133 107 134 107 135 107 136 107 137 107 138 107 139 107 140 107 141 107 142 107 143 107 144 107 145 107 146 107 147 107 148 107 149 107 150 107 151 107 152 107 153 107 154 107 155 107 156 107 157 107 158 107 159 107 160 107 161 107 162 107 163 107 164 107 165 107 166 107 167 107 168 107 169 107 170 107 171 107 172 107 173 107 174 107 175 107 176 107 177 107 178 107 179 107 180 107 181 107 182 107 183 107 184 107 185 107 186 107 187 107 188 107 189 107 190 107 191 107 192 107 193 107 194 107 195 107 196 107 197 107 198 107 199 107 200 107 201 107 202 107 203 107 204 107 205 107 206 107 207 107 208 107 209 107 210 107 211 107 212 107 213 107 214 107 215 107 216 107 217 107 218 107 219 107 220 107 221 107 222 107 223 107 224 107 225 107 226 107 227 107 228 107 229 107 230 107 231 107 232 107 233 107 234 107 235 107 236 107 237 107 238 107 239 107 240 107 241 107 242 107 243 107 244 107 245 107 246 107 247 107 248 107 249 107 250 107 251 107 252 107 253 107 254 107 255 107 256 107 257 107 258 107 259 107 260 107 261 107 262 107 263 107 264 107 265 107 266 107 267 107 268 107 269 107 270 107 271 107 272 107 273 107 274 107 275 107 276 107 277 107 278 107 279 107 280 107 281 107 282 107 283 107 284 107 285 107 286 107 287 107 288 107 289 107 290 107 291 107 292 107 293 107 294 107 295 107 296 107 297 107 298 107 299 108 0 108 1 108 2 108 3 108 4 108 5 108 6 108 7 108 8 108 9 108 10 108 11 108 12 108 13 108 14 108 15 108 16 108 17 108 18 108 19 108 20 108 21 108 22 108 23 108 24 108 25 108 26 108 27 108 28 108 29 108 30 108 31 108 32 108 33 108 34 108 35 108 36 108 37 108 38 108 39 108 40 108 41 108 42 108 43 108 44 108 45 108 46 108 47 108 48 108 49 108 50 108 51 108 52 108 53 108 54 108 55 108 56 108 57 108 58 108 59 108 60 108 61 108 62 108 63 108 64 108 65 108 66 108 67 108 68 108 69 108 70 108 71 108 72 108 73 108 74 108 75 108 76 108 77 108 78 108 79 108 80 108 81 108 82 108 83 108 84 108 85 108 86 108 87 108 88 108 89 108 90 108 91 108 92 108 93 108 94 108 95 108 96 108 97 108 98 108 99 108 100 108 101 108 102 108 103 108 104 108 105 108 106 108 107 108 108 108 109 108 110 108 111 108 112 108 113 108 114 108 115 108 116 108 117 108 118 108 119 108 120 108 121 108 122 108 123 108 124 108 125 108 126 108 127 108 128 108 129 108 130 108 131 108 132 108 133 108 134 108 135 108 136 108 137 108 138 108 139 108 140 108 141 108 142 108 143 108 144 108 145 108 146 108 147 108 148 108 149 108 150 108 151 108 152 108 153 108 154 108 155 108 156 108 157 108 158 108 159 108 160 108 161 108 162 108 163 108 164 108 165 108 166 108 167 108 168 108 169 108 170 108 171 108 172 108 173 108 174 108 175 108 176 108 177 108 178 108 179 108 180 108 181 108 182 108 183 108 184 108 185 108 186 108 187 108 188 108 189 108 190 108 191 108 192 108 193 108 194 108 195 108 196 108 197 108 198 108 199 108 200 108 201 108 202 108 203 108 204 108 205 108 206 108 207 108 208 108 209 108 210 108 211 108 212 108 213 108 214 108 215 108 216 108 217 108 218 108 219 108 220 108 221 108 222 108 223 108 224 108 225 108 226 108 227 108 228 108 229 108 230 108 231 108 232 108 233 108 234 108 235 108 236 108 237 108 238 108 239 108 240 108 241 108 242 108 243 108 244 108 245 108 246 108 247 108 248 108 249 108 250 108 251 108 252 108 253 108 254 108 255 108 256 108 257 108 258 108 259 108 260 108 261 108 262 108 263 108 264 108 265 108 266 108 267 108 268 108 269 108 270 108 271 108 272 108 273 108 274 108 275 108 276 108 277 108 278 108 279 108 280 108 281 108 282 108 283 108 284 108 285 108 286 108 287 108 288 108 289 108 290 108 291 108 292 108 293 108 294 108 295 108 296 108 297 108 298 108 299 109 0 109 1 109 2 109 3 109 4 109 5 109 6 109 7 109 8 109 9 109 10 109 11 109 12 109 13 109 14 109 15 109 16 109 17 109 18 109 19 109 20 109 21 109 22 109 23 109 24 109 25 109 26 109 27 109 28 109 29 109 30 109 31 109 32 109 33 109 34 109 35 109 36 109 37 109 38 109 39 109 40 109 41 109 42 109 43 109 44 109 45 109 46 109 47 109 48 109 49 109 50 109 51 109 52 109 53 109 54 109 55 109 56 109 57 109 58 109 59 109 60 109 61 109 62 109 63 109 64 109 65 109 66 109 67 109 68 109 69 109 70 109 71 109 72 109 73 109 74 109 75 109 76 109 77 109 78 109 79 109 80 109 81 109 82 109 83 109 84 109 85 109 86 109 87 109 88 109 89 109 90 109 91 109 92 109 93 109 94 109 95 109 96 109 97 109 98 109 99 109 100 109 101 109 102 109 103 109 104 109 105 109 106 109 107 109 108 109 109 109 110 109 111 109 112 109 113 109 114 109 115 109 116 109 117 109 118 109 119 109 120 109 121 109 122 109 123 109 124 109 125 109 126 109 127 109 128 109 129 109 130 109 131 109 132 109 133 109 134 109 135 109 136 109 137 109 138 109 139 109 140 109 141 109 142 109 143 109 144 109 145 109 146 109 147 109 148 109 149 109 150 109 151 109 152 109 153 109 154 109 155 109 156 109 157 109 158 109 159 109 160 109 161 109 162 109 163 109 164 109 165 109 166 109 167 109 168 109 169 109 170 109 171 109 172 109 173 109 174 109 175 109 176 109 177 109 178 109 179 109 180 109 181 109 182 109 183 109 184 109 185 109 186 109 187 109 188 109 189 109 190 109 191 109 192 109 193 109 194 109 195 109 196 109 197 109 198 109 199 109 200 109 201 109 202 109 203 109 204 109 205 109 206 109 207 109 208 109 209 109 210 109 211 109 212 109 213 109 214 109 215 109 216 109 217 109 218 109 219 109 220 109 221 109 222 109 223 109 224 109 225 109 226 109 227 109 228 109 229 109 230 109 231 109 232 109 233 109 234 109 235 109 236 109 237 109 238 109 239 109 240 109 241 109 242 109 243 109 244 109 245 109 246 109 247 109 248 109 249 109 250 109 251 109 252 109 253 109 254 109 255 109 256 109 257 109 258 109 259 109 260 109 261 109 262 109 263 109 264 109 265 109 266 109 267 109 268 109 269 109 270 109 271 109 272 109 273 109 274 109 275 109 276 109 277 109 278 109 279 109 280 109 281 109 282 109 283 109 284 109 285 109 286 109 287 109 288 109 289 109 290 109 291 109 292 109 293 109 294 109 295 109 296 109 297 109 298 109 299 110 0 110 1 110 2 110 3 110 4 110 5 110 6 110 7 110 8 110 9 110 10 110 11 110 12 110 13 110 14 110 15 110 16 110 17 110 18 110 19 110 20 110 21 110 22 110 23 110 24 110 25 110 26 110 27 110 28 110 29 110 30 110 31 110 32 110 33 110 34 110 35 110 36 110 37 110 38 110 39 110 40 110 41 110 42 110 43 110 44 110 45 110 46 110 47 110 48 110 49 110 50 110 51 110 52 110 53 110 54 110 55 110 56 110 57 110 58 110 59 110 60 110 61 110 62 110 63 110 64 110 65 110 66 110 67 110 68 110 69 110 70 110 71 110 72 110 73 110 74 110 75 110 76 110 77 110 78 110 79 110 80 110 81 110 82 110 83 110 84 110 85 110 86 110 87 110 88 110 89 110 90 110 91 110 92 110 93 110 94 110 95 110 96 110 97 110 98 110 99 110 100 110 101 110 102 110 103 110 104 110 105 110 106 110 107 110 108 110 109 110 110 110 111 110 112 110 113 110 114 110 115 110 116 110 117 110 118 110 119 110 120 110 121 110 122 110 123 110 124 110 125 110 126 110 127 110 128 110 129 110 130 110 131 110 132 110 133 110 134 110 135 110 136 110 137 110 138 110 139 110 140 110 141 110 142 110 143 110 144 110 145 110 146 110 147 110 148 110 149 110 150 110 151 110 152 110 153 110 154 110 155 110 156 110 157 110 158 110 159 110 160 110 161 110 162 110 163 110 164 110 165 110 166 110 167 110 168 110 169 110 170 110 171 110 172 110 173 110 174 110 175 110 176 110 177 110 178 110 179 110 180 110 181 110 182 110 183 110 184 110 185 110 186 110 187 110 188 110 189 110 190 110 191 110 192 110 193 110 194 110 195 110 196 110 197 110 198 110 199 110 200 110 201 110 202 110 203 110 204 110 205 110 206 110 207 110 208 110 209 110 210 110 211 110 212 110 213 110 214 110 215 110 216 110 217 110 218 110 219 110 220 110 221 110 222 110 223 110 224 110 225 110 226 110 227 110 228 110 229 110 230 110 231 110 232 110 233 110 234 110 235 110 236 110 237 110 238 110 239 110 240 110 241 110 242 110 243 110 244 110 245 110 246 110 247 110 248 110 249 110 250 110 251 110 252 110 253 110 254 110 255 110 256 110 257 110 258 110 259 110 260 110 261 110 262 110 263 110 264 110 265 110 266 110 267 110 268 110 269 110 270 110 271 110 272 110 273 110 274 110 275 110 276 110 277 110 278 110 279 110 280 110 281 110 282 110 283 110 284 110 285 110 286 110 287 110 288 110 289 110 290 110 291 110 292 110 293 110 294 110 295 110 296 110 297 110 298 110 299 111 0 111 1 111 2 111 3 111 4 111 5 111 6 111 7 111 8 111 9 111 10 111 11 111 12 111 13 111 14 111 15 111 16 111 17 111 18 111 19 111 20 111 21 111 22 111 23 111 24 111 25 111 26 111 27 111 28 111 29 111 30 111 31 111 32 111 33 111 34 111 35 111 36 111 37 111 38 111 39 111 40 111 41 111 42 111 43 111 44 111 45 111 46 111 47 111 48 111 49 111 50 111 51 111 52 111 53 111 54 111 55 111 56 111 57 111 58 111 59 111 60 111 61 111 62 111 63 111 64 111 65 111 66 111 67 111 68 111 69 111 70 111 71 111 72 111 73 111 74 111 75 111 76 111 77 111 78 111 79 111 80 111 81 111 82 111 83 111 84 111 85 111 86 111 87 111 88 111 89 111 90 111 91 111 92 111 93 111 94 111 95 111 96 111 97 111 98 111 99 111 100 111 101 111 102 111 103 111 104 111 105 111 106 111 107 111 108 111 109 111 110 111 111 111 112 111 113 111 114 111 115 111 116 111 117 111 118 111 119 111 120 111 121 111 122 111 123 111 124 111 125 111 126 111 127 111 128 111 129 111 130 111 131 111 132 111 133 111 134 111 135 111 136 111 137 111 138 111 139 111 140 111 141 111 142 111 143 111 144 111 145 111 146 111 147 111 148 111 149 111 150 111 151 111 152 111 153 111 154 111 155 111 156 111 157 111 158 111 159 111 160 111 161 111 162 111 163 111 164 111 165 111 166 111 167 111 168 111 169 111 170 111 171 111 172 111 173 111 174 111 175 111 176 111 177 111 178 111 179 111 180 111 181 111 182 111 183 111 184 111 185 111 186 111 187 111 188 111 189 111 190 111 191 111 192 111 193 111 194 111 195 111 196 111 197 111 198 111 199 111 200 111 201 111 202 111 203 111 204 111 205 111 206 111 207 111 208 111 209 111 210 111 211 111 212 111 213 111 214 111 215 111 216 111 217 111 218 111 219 111 220 111 221 111 222 111 223 111 224 111 225 111 226 111 227 111 228 111 229 111 230 111 231 111 232 111 233 111 234 111 235 111 236 111 237 111 238 111 239 111 240 111 241 111 242 111 243 111 244 111 245 111 246 111 247 111 248 111 249 111 250 111 251 111 252 111 253 111 254 111 255 111 256 111 257 111 258 111 259 111 260 111 261 111 262 111 263 111 264 111 265 111 266 111 267 111 268 111 269 111 270 111 271 111 272 111 273 111 274 111 275 111 276 111 277 111 278 111 279 111 280 111 281 111 282 111 283 111 284 111 285 111 286 111 287 111 288 111 289 111 290 111 291 111 292 111 293 111 294 111 295 111 296 111 297 111 298 111 299 112 0 112 1 112 2 112 3 112 4 112 5 112 6 112 7 112 8 112 9 112 10 112 11 112 12 112 13 112 14 112 15 112 16 112 17 112 18 112 19 112 20 112 21 112 22 112 23 112 24 112 25 112 26 112 27 112 28 112 29 112 30 112 31 112 32 112 33 112 34 112 35 112 36 112 37 112 38 112 39 112 40 112 41 112 42 112 43 112 44 112 45 112 46 112 47 112 48 112 49 112 50 112 51 112 52 112 53 112 54 112 55 112 56 112 57 112 58 112 59 112 60 112 61 112 62 112 63 112 64 112 65 112 66 112 67 112 68 112 69 112 70 112 71 112 72 112 73 112 74 112 75 112 76 112 77 112 78 112 79 112 80 112 81 112 82 112 83 112 84 112 85 112 86 112 87 112 88 112 89 112 90 112 91 112 92 112 93 112 94 112 95 112 96 112 97 112 98 112 99 112 100 112 101 112 102 112 103 112 104 112 105 112 106 112 107 112 108 112 109 112 110 112 111 112 112 112 113 112 114 112 115 112 116 112 117 112 118 112 119 112 120 112 121 112 122 112 123 112 124 112 125 112 126 112 127 112 128 112 129 112 130 112 131 112 132 112 133 112 134 112 135 112 136 112 137 112 138 112 139 112 140 112 141 112 142 112 143 112 144 112 145 112 146 112 147 112 148 112 149 112 150 112 151 112 152 112 153 112 154 112 155 112 156 112 157 112 158 112 159 112 160 112 161 112 162 112 163 112 164 112 165 112 166 112 167 112 168 112 169 112 170 112 171 112 172 112 173 112 174 112 175 112 176 112 177 112 178 112 179 112 180 112 181 112 182 112 183 112 184 112 185 112 186 112 187 112 188 112 189 112 190 112 191 112 192 112 193 112 194 112 195 112 196 112 197 112 198 112 199 112 200 112 201 112 202 112 203 112 204 112 205 112 206 112 207 112 208 112 209 112 210 112 211 112 212 112 213 112 214 112 215 112 216 112 217 112 218 112 219 112 220 112 221 112 222 112 223 112 224 112 225 112 226 112 227 112 228 112 229 112 230 112 231 112 232 112 233 112 234 112 235 112 236 112 237 112 238 112 239 112 240 112 241 112 242 112 243 112 244 112 245 112 246 112 247 112 248 112 249 112 250 112 251 112 252 112 253 112 254 112 255 112 256 112 257 112 258 112 259 112 260 112 261 112 262 112 263 112 264 112 265 112 266 112 267 112 268 112 269 112 270 112 271 112 272 112 273 112 274 112 275 112 276 112 277 112 278 112 279 112 280 112 281 112 282 112 283 112 284 112 285 112 286 112 287 112 288 112 289 112 290 112 291 112 292 112 293 112 294 112 295 112 296 112 297 112 298 112 299 113 0 113 1 113 2 113 3 113 4 113 5 113 6 113 7 113 8 113 9 113 10 113 11 113 12 113 13 113 14 113 15 113 16 113 17 113 18 113 19 113 20 113 21 113 22 113 23 113 24 113 25 113 26 113 27 113 28 113 29 113 30 113 31 113 32 113 33 113 34 113 35 113 36 113 37 113 38 113 39 113 40 113 41 113 42 113 43 113 44 113 45 113 46 113 47 113 48 113 49 113 50 113 51 113 52 113 53 113 54 113 55 113 56 113 57 113 58 113 59 113 60 113 61 113 62 113 63 113 64 113 65 113 66 113 67 113 68 113 69 113 70 113 71 113 72 113 73 113 74 113 75 113 76 113 77 113 78 113 79 113 80 113 81 113 82 113 83 113 84 113 85 113 86 113 87 113 88 113 89 113 90 113 91 113 92 113 93 113 94 113 95 113 96 113 97 113 98 113 99 113 100 113 101 113 102 113 103 113 104 113 105 113 106 113 107 113 108 113 109 113 110 113 111 113 112 113 113 113 114 113 115 113 116 113 117 113 118 113 119 113 120 113 121 113 122 113 123 113 124 113 125 113 126 113 127 113 128 113 129 113 130 113 131 113 132 113 133 113 134 113 135 113 136 113 137 113 138 113 139 113 140 113 141 113 142 113 143 113 144 113 145 113 146 113 147 113 148 113 149 113 150 113 151 113 152 113 153 113 154 113 155 113 156 113 157 113 158 113 159 113 160 113 161 113 162 113 163 113 164 113 165 113 166 113 167 113 168 113 169 113 170 113 171 113 172 113 173 113 174 113 175 113 176 113 177 113 178 113 179 113 180 113 181 113 182 113 183 113 184 113 185 113 186 113 187 113 188 113 189 113 190 113 191 113 192 113 193 113 194 113 195 113 196 113 197 113 198 113 199 113 200 113 201 113 202 113 203 113 204 113 205 113 206 113 207 113 208 113 209 113 210 113 211 113 212 113 213 113 214 113 215 113 216 113 217 113 218 113 219 113 220 113 221 113 222 113 223 113 224 113 225 113 226 113 227 113 228 113 229 113 230 113 231 113 232 113 233 113 234 113 235 113 236 113 237 113 238 113 239 113 240 113 241 113 242 113 243 113 244 113 245 113 246 113 247 113 248 113 249 113 250 113 251 113 252 113 253 113 254 113 255 113 256 113 257 113 258 113 259 113 260 113 261 113 262 113 263 113 264 113 265 113 266 113 267 113 268 113 269 113 270 113 271 113 272 113 273 113 274 113 275 113 276 113 277 113 278 113 279 113 280 113 281 113 282 113 283 113 284 113 285 113 286 113 287 113 288 113 289 113 290 113 291 113 292 113 293 113 294 113 295 113 296 113 297 113 298 113 299 114 0 114 1 114 2 114 3 114 4 114 5 114 6 114 7 114 8 114 9 114 10 114 11 114 12 114 13 114 14 114 15 114 16 114 17 114 18 114 19 114 20 114 21 114 22 114 23 114 24 114 25 114 26 114 27 114 28 114 29 114 30 114 31 114 32 114 33 114 34 114 35 114 36 114 37 114 38 114 39 114 40 114 41 114 42 114 43 114 44 114 45 114 46 114 47 114 48 114 49 114 50 114 51 114 52 114 53 114 54 114 55 114 56 114 57 114 58 114 59 114 60 114 61 114 62 114 63 114 64 114 65 114 66 114 67 114 68 114 69 114 70 114 71 114 72 114 73 114 74 114 75 114 76 114 77 114 78 114 79 114 80 114 81 114 82 114 83 114 84 114 85 114 86 114 87 114 88 114 89 114 90 114 91 114 92 114 93 114 94 114 95 114 96 114 97 114 98 114 99 114 100 114 101 114 102 114 103 114 104 114 105 114 106 114 107 114 108 114 109 114 110 114 111 114 112 114 113 114 114 114 115 114 116 114 117 114 118 114 119 114 120 114 121 114 122 114 123 114 124 114 125 114 126 114 127 114 128 114 129 114 130 114 131 114 132 114 133 114 134 114 135 114 136 114 137 114 138 114 139 114 140 114 141 114 142 114 143 114 144 114 145 114 146 114 147 114 148 114 149 114 150 114 151 114 152 114 153 114 154 114 155 114 156 114 157 114 158 114 159 114 160 114 161 114 162 114 163 114 164 114 165 114 166 114 167 114 168 114 169 114 170 114 171 114 172 114 173 114 174 114 175 114 176 114 177 114 178 114 179 114 180 114 181 114 182 114 183 114 184 114 185 114 186 114 187 114 188 114 189 114 190 114 191 114 192 114 193 114 194 114 195 114 196 114 197 114 198 114 199 114 200 114 201 114 202 114 203 114 204 114 205 114 206 114 207 114 208 114 209 114 210 114 211 114 212 114 213 114 214 114 215 114 216 114 217 114 218 114 219 114 220 114 221 114 222 114 223 114 224 114 225 114 226 114 227 114 228 114 229 114 230 114 231 114 232 114 233 114 234 114 235 114 236 114 237 114 238 114 239 114 240 114 241 114 242 114 243 114 244 114 245 114 246 114 247 114 248 114 249 114 250 114 251 114 252 114 253 114 254 114 255 114 256 114 257 114 258 114 259 114 260 114 261 114 262 114 263 114 264 114 265 114 266 114 267 114 268 114 269 114 270 114 271 114 272 114 273 114 274 114 275 114 276 114 277 114 278 114 279 114 280 114 281 114 282 114 283 114 284 114 285 114 286 114 287 114 288 114 289 114 290 114 291 114 292 114 293 114 294 114 295 114 296 114 297 114 298 114 299 115 0 115 1 115 2 115 3 115 4 115 5 115 6 115 7 115 8 115 9 115 10 115 11 115 12 115 13 115 14 115 15 115 16 115 17 115 18 115 19 115 20 115 21 115 22 115 23 115 24 115 25 115 26 115 27 115 28 115 29 115 30 115 31 115 32 115 33 115 34 115 35 115 36 115 37 115 38 115 39 115 40 115 41 115 42 115 43 115 44 115 45 115 46 115 47 115 48 115 49 115 50 115 51 115 52 115 53 115 54 115 55 115 56 115 57 115 58 115 59 115 60 115 61 115 62 115 63 115 64 115 65 115 66 115 67 115 68 115 69 115 70 115 71 115 72 115 73 115 74 115 75 115 76 115 77 115 78 115 79 115 80 115 81 115 82 115 83 115 84 115 85 115 86 115 87 115 88 115 89 115 90 115 91 115 92 115 93 115 94 115 95 115 96 115 97 115 98 115 99 115 100 115 101 115 102 115 103 115 104 115 105 115 106 115 107 115 108 115 109 115 110 115 111 115 112 115 113 115 114 115 115 115 116 115 117 115 118 115 119 115 120 115 121 115 122 115 123 115 124 115 125 115 126 115 127 115 128 115 129 115 130 115 131 115 132 115 133 115 134 115 135 115 136 115 137 115 138 115 139 115 140 115 141 115 142 115 143 115 144 115 145 115 146 115 147 115 148 115 149 115 150 115 151 115 152 115 153 115 154 115 155 115 156 115 157 115 158 115 159 115 160 115 161 115 162 115 163 115 164 115 165 115 166 115 167 115 168 115 169 115 170 115 171 115 172 115 173 115 174 115 175 115 176 115 177 115 178 115 179 115 180 115 181 115 182 115 183 115 184 115 185 115 186 115 187 115 188 115 189 115 190 115 191 115 192 115 193 115 194 115 195 115 196 115 197 115 198 115 199 115 200 115 201 115 202 115 203 115 204 115 205 115 206 115 207 115 208 115 209 115 210 115 211 115 212 115 213 115 214 115 215 115 216 115 217 115 218 115 219 115 220 115 221 115 222 115 223 115 224 115 225 115 226 115 227 115 228 115 229 115 230 115 231 115 232 115 233 115 234 115 235 115 236 115 237 115 238 115 239 115 240 115 241 115 242 115 243 115 244 115 245 115 246 115 247 115 248 115 249 115 250 115 251 115 252 115 253 115 254 115 255 115 256 115 257 115 258 115 259 115 260 115 261 115 262 115 263 115 264 115 265 115 266 115 267 115 268 115 269 115 270 115 271 115 272 115 273 115 274 115 275 115 276 115 277 115 278 115 279 115 280 115 281 115 282 115 283 115 284 115 285 115 286 115 287 115 288 115 289 115 290 115 291 115 292 115 293 115 294 115 295 115 296 115 297 115 298 115 299 116 0 116 1 116 2 116 3 116 4 116 5 116 6 116 7 116 8 116 9 116 10 116 11 116 12 116 13 116 14 116 15 116 16 116 17 116 18 116 19 116 20 116 21 116 22 116 23 116 24 116 25 116 26 116 27 116 28 116 29 116 30 116 31 116 32 116 33 116 34 116 35 116 36 116 37 116 38 116 39 116 40 116 41 116 42 116 43 116 44 116 45 116 46 116 47 116 48 116 49 116 50 116 51 116 52 116 53 116 54 116 55 116 56 116 57 116 58 116 59 116 60 116 61 116 62 116 63 116 64 116 65 116 66 116 67 116 68 116 69 116 70 116 71 116 72 116 73 116 74 116 75 116 76 116 77 116 78 116 79 116 80 116 81 116 82 116 83 116 84 116 85 116 86 116 87 116 88 116 89 116 90 116 91 116 92 116 93 116 94 116 95 116 96 116 97 116 98 116 99 116 100 116 101 116 102 116 103 116 104 116 105 116 106 116 107 116 108 116 109 116 110 116 111 116 112 116 113 116 114 116 115 116 116 116 117 116 118 116 119 116 120 116 121 116 122 116 123 116 124 116 125 116 126 116 127 116 128 116 129 116 130 116 131 116 132 116 133 116 134 116 135 116 136 116 137 116 138 116 139 116 140 116 141 116 142 116 143 116 144 116 145 116 146 116 147 116 148 116 149 116 150 116 151 116 152 116 153 116 154 116 155 116 156 116 157 116 158 116 159 116 160 116 161 116 162 116 163 116 164 116 165 116 166 116 167 116 168 116 169 116 170 116 171 116 172 116 173 116 174 116 175 116 176 116 177 116 178 116 179 116 180 116 181 116 182 116 183 116 184 116 185 116 186 116 187 116 188 116 189 116 190 116 191 116 192 116 193 116 194 116 195 116 196 116 197 116 198 116 199 116 200 116 201 116 202 116 203 116 204 116 205 116 206 116 207 116 208 116 209 116 210 116 211 116 212 116 213 116 214 116 215 116 216 116 217 116 218 116 219 116 220 116 221 116 222 116 223 116 224 116 225 116 226 116 227 116 228 116 229 116 230 116 231 116 232 116 233 116 234 116 235 116 236 116 237 116 238 116 239 116 240 116 241 116 242 116 243 116 244 116 245 116 246 116 247 116 248 116 249 116 250 116 251 116 252 116 253 116 254 116 255 116 256 116 257 116 258 116 259 116 260 116 261 116 262 116 263 116 264 116 265 116 266 116 267 116 268 116 269 116 270 116 271 116 272 116 273 116 274 116 275 116 276 116 277 116 278 116 279 116 280 116 281 116 282 116 283 116 284 116 285 116 286 116 287 116 288 116 289 116 290 116 291 116 292 116 293 116 294 116 295 116 296 116 297 116 298 116 299 117 0 117 1 117 2 117 3 117 4 117 5 117 6 117 7 117 8 117 9 117 10 117 11 117 12 117 13 117 14 117 15 117 16 117 17 117 18 117 19 117 20 117 21 117 22 117 23 117 24 117 25 117 26 117 27 117 28 117 29 117 30 117 31 117 32 117 33 117 34 117 35 117 36 117 37 117 38 117 39 117 40 117 41 117 42 117 43 117 44 117 45 117 46 117 47 117 48 117 49 117 50 117 51 117 52 117 53 117 54 117 55 117 56 117 57 117 58 117 59 117 60 117 61 117 62 117 63 117 64 117 65 117 66 117 67 117 68 117 69 117 70 117 71 117 72 117 73 117 74 117 75 117 76 117 77 117 78 117 79 117 80 117 81 117 82 117 83 117 84 117 85 117 86 117 87 117 88 117 89 117 90 117 91 117 92 117 93 117 94 117 95 117 96 117 97 117 98 117 99 117 100 117 101 117 102 117 103 117 104 117 105 117 106 117 107 117 108 117 109 117 110 117 111 117 112 117 113 117 114 117 115 117 116 117 117 117 118 117 119 117 120 117 121 117 122 117 123 117 124 117 125 117 126 117 127 117 128 117 129 117 130 117 131 117 132 117 133 117 134 117 135 117 136 117 137 117 138 117 139 117 140 117 141 117 142 117 143 117 144 117 145 117 146 117 147 117 148 117 149 117 150 117 151 117 152 117 153 117 154 117 155 117 156 117 157 117 158 117 159 117 160 117 161 117 162 117 163 117 164 117 165 117 166 117 167 117 168 117 169 117 170 117 171 117 172 117 173 117 174 117 175 117 176 117 177 117 178 117 179 117 180 117 181 117 182 117 183 117 184 117 185 117 186 117 187 117 188 117 189 117 190 117 191 117 192 117 193 117 194 117 195 117 196 117 197 117 198 117 199 117 200 117 201 117 202 117 203 117 204 117 205 117 206 117 207 117 208 117 209 117 210 117 211 117 212 117 213 117 214 117 215 117 216 117 217 117 218 117 219 117 220 117 221 117 222 117 223 117 224 117 225 117 226 117 227 117 228 117 229 117 230 117 231 117 232 117 233 117 234 117 235 117 236 117 237 117 238 117 239 117 240 117 241 117 242 117 243 117 244 117 245 117 246 117 247 117 248 117 249 117 250 117 251 117 252 117 253 117 254 117 255 117 256 117 257 117 258 117 259 117 260 117 261 117 262 117 263 117 264 117 265 117 266 117 267 117 268 117 269 117 270 117 271 117 272 117 273 117 274 117 275 117 276 117 277 117 278 117 279 117 280 117 281 117 282 117 283 117 284 117 285 117 286 117 287 117 288 117 289 117 290 117 291 117 292 117 293 117 294 117 295 117 296 117 297 117 298 117 299 118 0 118 1 118 2 118 3 118 4 118 5 118 6 118 7 118 8 118 9 118 10 118 11 118 12 118 13 118 14 118 15 118 16 118 17 118 18 118 19 118 20 118 21 118 22 118 23 118 24 118 25 118 26 118 27 118 28 118 29 118 30 118 31 118 32 118 33 118 34 118 35 118 36 118 37 118 38 118 39 118 40 118 41 118 42 118 43 118 44 118 45 118 46 118 47 118 48 118 49 118 50 118 51 118 52 118 53 118 54 118 55 118 56 118 57 118 58 118 59 118 60 118 61 118 62 118 63 118 64 118 65 118 66 118 67 118 68 118 69 118 70 118 71 118 72 118 73 118 74 118 75 118 76 118 77 118 78 118 79 118 80 118 81 118 82 118 83 118 84 118 85 118 86 118 87 118 88 118 89 118 90 118 91 118 92 118 93 118 94 118 95 118 96 118 97 118 98 118 99 118 100 118 101 118 102 118 103 118 104 118 105 118 106 118 107 118 108 118 109 118 110 118 111 118 112 118 113 118 114 118 115 118 116 118 117 118 118 118 119 118 120 118 121 118 122 118 123 118 124 118 125 118 126 118 127 118 128 118 129 118 130 118 131 118 132 118 133 118 134 118 135 118 136 118 137 118 138 118 139 118 140 118 141 118 142 118 143 118 144 118 145 118 146 118 147 118 148 118 149 118 150 118 151 118 152 118 153 118 154 118 155 118 156 118 157 118 158 118 159 118 160 118 161 118 162 118 163 118 164 118 165 118 166 118 167 118 168 118 169 118 170 118 171 118 172 118 173 118 174 118 175 118 176 118 177 118 178 118 179 118 180 118 181 118 182 118 183 118 184 118 185 118 186 118 187 118 188 118 189 118 190 118 191 118 192 118 193 118 194 118 195 118 196 118 197 118 198 118 199 118 200 118 201 118 202 118 203 118 204 118 205 118 206 118 207 118 208 118 209 118 210 118 211 118 212 118 213 118 214 118 215 118 216 118 217 118 218 118 219 118 220 118 221 118 222 118 223 118 224 118 225 118 226 118 227 118 228 118 229 118 230 118 231 118 232 118 233 118 234 118 235 118 236 118 237 118 238 118 239 118 240 118 241 118 242 118 243 118 244 118 245 118 246 118 247 118 248 118 249 118 250 118 251 118 252 118 253 118 254 118 255 118 256 118 257 118 258 118 259 118 260 118 261 118 262 118 263 118 264 118 265 118 266 118 267 118 268 118 269 118 270 118 271 118 272 118 273 118 274 118 275 118 276 118 277 118 278 118 279 118 280 118 281 118 282 118 283 118 284 118 285 118 286 118 287 118 288 118 289 118 290 118 291 118 292 118 293 118 294 118 295 118 296 118 297 118 298 118 299 119 0 119 1 119 2 119 3 119 4 119 5 119 6 119 7 119 8 119 9 119 10 119 11 119 12 119 13 119 14 119 15 119 16 119 17 119 18 119 19 119 20 119 21 119 22 119 23 119 24 119 25 119 26 119 27 119 28 119 29 119 30 119 31 119 32 119 33 119 34 119 35 119 36 119 37 119 38 119 39 119 40 119 41 119 42 119 43 119 44 119 45 119 46 119 47 119 48 119 49 119 50 119 51 119 52 119 53 119 54 119 55 119 56 119 57 119 58 119 59 119 60 119 61 119 62 119 63 119 64 119 65 119 66 119 67 119 68 119 69 119 70 119 71 119 72 119 73 119 74 119 75 119 76 119 77 119 78 119 79 119 80 119 81 119 82 119 83 119 84 119 85 119 86 119 87 119 88 119 89 119 90 119 91 119 92 119 93 119 94 119 95 119 96 119 97 119 98 119 99 119 100 119 101 119 102 119 103 119 104 119 105 119 106 119 107 119 108 119 109 119 110 119 111 119 112 119 113 119 114 119 115 119 116 119 117 119 118 119 119 119 120 119 121 119 122 119 123 119 124 119 125 119 126 119 127 119 128 119 129 119 130 119 131 119 132 119 133 119 134 119 135 119 136 119 137 119 138 119 139 119 140 119 141 119 142 119 143 119 144 119 145 119 146 119 147 119 148 119 149 119 150 119 151 119 152 119 153 119 154 119 155 119 156 119 157 119 158 119 159 119 160 119 161 119 162 119 163 119 164 119 165 119 166 119 167 119 168 119 169 119 170 119 171 119 172 119 173 119 174 119 175 119 176 119 177 119 178 119 179 119 180 119 181 119 182 119 183 119 184 119 185 119 186 119 187 119 188 119 189 119 190 119 191 119 192 119 193 119 194 119 195 119 196 119 197 119 198 119 199 119 200 119 201 119 202 119 203 119 204 119 205 119 206 119 207 119 208 119 209 119 210 119 211 119 212 119 213 119 214 119 215 119 216 119 217 119 218 119 219 119 220 119 221 119 222 119 223 119 224 119 225 119 226 119 227 119 228 119 229 119 230 119 231 119 232 119 233 119 234 119 235 119 236 119 237 119 238 119 239 119 240 119 241 119 242 119 243 119 244 119 245 119 246 119 247 119 248 119 249 119 250 119 251 119 252 119 253 119 254 119 255 119 256 119 257 119 258 119 259 119 260 119 261 119 262 119 263 119 264 119 265 119 266 119 267 119 268 119 269 119 270 119 271 119 272 119 273 119 274 119 275 119 276 119 277 119 278 119 279 119 280 119 281 119 282 119 283 119 284 119 285 119 286 119 287 119 288 119 289 119 290 119 291 119 292 119 293 119 294 119 295 119 296 119 297 119 298 119 299 120 0 120 1 120 2 120 3 120 4 120 5 120 6 120 7 120 8 120 9 120 10 120 11 120 12 120 13 120 14 120 15 120 16 120 17 120 18 120 19 120 20 120 21 120 22 120 23 120 24 120 25 120 26 120 27 120 28 120 29 120 30 120 31 120 32 120 33 120 34 120 35 120 36 120 37 120 38 120 39 120 40 120 41 120 42 120 43 120 44 120 45 120 46 120 47 120 48 120 49 120 50 120 51 120 52 120 53 120 54 120 55 120 56 120 57 120 58 120 59 120 60 120 61 120 62 120 63 120 64 120 65 120 66 120 67 120 68 120 69 120 70 120 71 120 72 120 73 120 74 120 75 120 76 120 77 120 78 120 79 120 80 120 81 120 82 120 83 120 84 120 85 120 86 120 87 120 88 120 89 120 90 120 91 120 92 120 93 120 94 120 95 120 96 120 97 120 98 120 99 120 100 120 101 120 102 120 103 120 104 120 105 120 106 120 107 120 108 120 109 120 110 120 111 120 112 120 113 120 114 120 115 120 116 120 117 120 118 120 119 120 120 120 121 120 122 120 123 120 124 120 125 120 126 120 127 120 128 120 129 120 130 120 131 120 132 120 133 120 134 120 135 120 136 120 137 120 138 120 139 120 140 120 141 120 142 120 143 120 144 120 145 120 146 120 147 120 148 120 149 120 150 120 151 120 152 120 153 120 154 120 155 120 156 120 157 120 158 120 159 120 160 120 161 120 162 120 163 120 164 120 165 120 166 120 167 120 168 120 169 120 170 120 171 120 172 120 173 120 174 120 175 120 176 120 177 120 178 120 179 120 180 120 181 120 182 120 183 120 184 120 185 120 186 120 187 120 188 120 189 120 190 120 191 120 192 120 193 120 194 120 195 120 196 120 197 120 198 120 199 120 200 120 201 120 202 120 203 120 204 120 205 120 206 120 207 120 208 120 209 120 210 120 211 120 212 120 213 120 214 120 215 120 216 120 217 120 218 120 219 120 220 120 221 120 222 120 223 120 224 120 225 120 226 120 227 120 228 120 229 120 230 120 231 120 232 120 233 120 234 120 235 120 236 120 237 120 238 120 239 120 240 120 241 120 242 120 243 120 244 120 245 120 246 120 247 120 248 120 249 120 250 120 251 120 252 120 253 120 254 120 255 120 256 120 257 120 258 120 259 120 260 120 261 120 262 120 263 120 264 120 265 120 266 120 267 120 268 120 269 120 270 120 271 120 272 120 273 120 274 120 275 120 276 120 277 120 278 120 279 120 280 120 281 120 282 120 283 120 284 120 285 120 286 120 287 120 288 120 289 120 290 120 291 120 292 120 293 120 294 120 295 120 296 120 297 120 298 120 299 121 0 121 1 121 2 121 3 121 4 121 5 121 6 121 7 121 8 121 9 121 10 121 11 121 12 121 13 121 14 121 15 121 16 121 17 121 18 121 19 121 20 121 21 121 22 121 23 121 24 121 25 121 26 121 27 121 28 121 29 121 30 121 31 121 32 121 33 121 34 121 35 121 36 121 37 121 38 121 39 121 40 121 41 121 42 121 43 121 44 121 45 121 46 121 47 121 48 121 49 121 50 121 51 121 52 121 53 121 54 121 55 121 56 121 57 121 58 121 59 121 60 121 61 121 62 121 63 121 64 121 65 121 66 121 67 121 68 121 69 121 70 121 71 121 72 121 73 121 74 121 75 121 76 121 77 121 78 121 79 121 80 121 81 121 82 121 83 121 84 121 85 121 86 121 87 121 88 121 89 121 90 121 91 121 92 121 93 121 94 121 95 121 96 121 97 121 98 121 99 121 100 121 101 121 102 121 103 121 104 121 105 121 106 121 107 121 108 121 109 121 110 121 111 121 112 121 113 121 114 121 115 121 116 121 117 121 118 121 119 121 120 121 121 121 122 121 123 121 124 121 125 121 126 121 127 121 128 121 129 121 130 121 131 121 132 121 133 121 134 121 135 121 136 121 137 121 138 121 139 121 140 121 141 121 142 121 143 121 144 121 145 121 146 121 147 121 148 121 149 121 150 121 151 121 152 121 153 121 154 121 155 121 156 121 157 121 158 121 159 121 160 121 161 121 162 121 163 121 164 121 165 121 166 121 167 121 168 121 169 121 170 121 171 121 172 121 173 121 174 121 175 121 176 121 177 121 178 121 179 121 180 121 181 121 182 121 183 121 184 121 185 121 186 121 187 121 188 121 189 121 190 121 191 121 192 121 193 121 194 121 195 121 196 121 197 121 198 121 199 121 200 121 201 121 202 121 203 121 204 121 205 121 206 121 207 121 208 121 209 121 210 121 211 121 212 121 213 121 214 121 215 121 216 121 217 121 218 121 219 121 220 121 221 121 222 121 223 121 224 121 225 121 226 121 227 121 228 121 229 121 230 121 231 121 232 121 233 121 234 121 235 121 236 121 237 121 238 121 239 121 240 121 241 121 242 121 243 121 244 121 245 121 246 121 247 121 248 121 249 121 250 121 251 121 252 121 253 121 254 121 255 121 256 121 257 121 258 121 259 121 260 121 261 121 262 121 263 121 264 121 265 121 266 121 267 121 268 121 269 121 270 121 271 121 272 121 273 121 274 121 275 121 276 121 277 121 278 121 279 121 280 121 281 121 282 121 283 121 284 121 285 121 286 121 287 121 288 121 289 121 290 121 291 121 292 121 293 121 294 121 295 121 296 121 297 121 298 121 299 122 0 122 1 122 2 122 3 122 4 122 5 122 6 122 7 122 8 122 9 122 10 122 11 122 12 122 13 122 14 122 15 122 16 122 17 122 18 122 19 122 20 122 21 122 22 122 23 122 24 122 25 122 26 122 27 122 28 122 29 122 30 122 31 122 32 122 33 122 34 122 35 122 36 122 37 122 38 122 39 122 40 122 41 122 42 122 43 122 44 122 45 122 46 122 47 122 48 122 49 122 50 122 51 122 52 122 53 122 54 122 55 122 56 122 57 122 58 122 59 122 60 122 61 122 62 122 63 122 64 122 65 122 66 122 67 122 68 122 69 122 70 122 71 122 72 122 73 122 74 122 75 122 76 122 77 122 78 122 79 122 80 122 81 122 82 122 83 122 84 122 85 122 86 122 87 122 88 122 89 122 90 122 91 122 92 122 93 122 94 122 95 122 96 122 97 122 98 122 99 122 100 122 101 122 102 122 103 122 104 122 105 122 106 122 107 122 108 122 109 122 110 122 111 122 112 122 113 122 114 122 115 122 116 122 117 122 118 122 119 122 120 122 121 122 122 122 123 122 124 122 125 122 126 122 127 122 128 122 129 122 130 122 131 122 132 122 133 122 134 122 135 122 136 122 137 122 138 122 139 122 140 122 141 122 142 122 143 122 144 122 145 122 146 122 147 122 148 122 149 122 150 122 151 122 152 122 153 122 154 122 155 122 156 122 157 122 158 122 159 122 160 122 161 122 162 122 163 122 164 122 165 122 166 122 167 122 168 122 169 122 170 122 171 122 172 122 173 122 174 122 175 122 176 122 177 122 178 122 179 122 180 122 181 122 182 122 183 122 184 122 185 122 186 122 187 122 188 122 189 122 190 122 191 122 192 122 193 122 194 122 195 122 196 122 197 122 198 122 199 122 200 122 201 122 202 122 203 122 204 122 205 122 206 122 207 122 208 122 209 122 210 122 211 122 212 122 213 122 214 122 215 122 216 122 217 122 218 122 219 122 220 122 221 122 222 122 223 122 224 122 225 122 226 122 227 122 228 122 229 122 230 122 231 122 232 122 233 122 234 122 235 122 236 122 237 122 238 122 239 122 240 122 241 122 242 122 243 122 244 122 245 122 246 122 247 122 248 122 249 122 250 122 251 122 252 122 253 122 254 122 255 122 256 122 257 122 258 122 259 122 260 122 261 122 262 122 263 122 264 122 265 122 266 122 267 122 268 122 269 122 270 122 271 122 272 122 273 122 274 122 275 122 276 122 277 122 278 122 279 122 280 122 281 122 282 122 283 122 284 122 285 122 286 122 287 122 288 122 289 122 290 122 291 122 292 122 293 122 294 122 295 122 296 122 297 122 298 122 299 123 0 123 1 123 2 123 3 123 4 123 5 123 6 123 7 123 8 123 9 123 10 123 11 123 12 123 13 123 14 123 15 123 16 123 17 123 18 123 19 123 20 123 21 123 22 123 23 123 24 123 25 123 26 123 27 123 28 123 29 123 30 123 31 123 32 123 33 123 34 123 35 123 36 123 37 123 38 123 39 123 40 123 41 123 42 123 43 123 44 123 45 123 46 123 47 123 48 123 49 123 50 123 51 123 52 123 53 123 54 123 55 123 56 123 57 123 58 123 59 123 60 123 61 123 62 123 63 123 64 123 65 123 66 123 67 123 68 123 69 123 70 123 71 123 72 123 73 123 74 123 75 123 76 123 77 123 78 123 79 123 80 123 81 123 82 123 83 123 84 123 85 123 86 123 87 123 88 123 89 123 90 123 91 123 92 123 93 123 94 123 95 123 96 123 97 123 98 123 99 123 100 123 101 123 102 123 103 123 104 123 105 123 106 123 107 123 108 123 109 123 110 123 111 123 112 123 113 123 114 123 115 123 116 123 117 123 118 123 119 123 120 123 121 123 122 123 123 123 124 123 125 123 126 123 127 123 128 123 129 123 130 123 131 123 132 123 133 123 134 123 135 123 136 123 137 123 138 123 139 123 140 123 141 123 142 123 143 123 144 123 145 123 146 123 147 123 148 123 149 123 150 123 151 123 152 123 153 123 154 123 155 123 156 123 157 123 158 123 159 123 160 123 161 123 162 123 163 123 164 123 165 123 166 123 167 123 168 123 169 123 170 123 171 123 172 123 173 123 174 123 175 123 176 123 177 123 178 123 179 123 180 123 181 123 182 123 183 123 184 123 185 123 186 123 187 123 188 123 189 123 190 123 191 123 192 123 193 123 194 123 195 123 196 123 197 123 198 123 199 123 200 123 201 123 202 123 203 123 204 123 205 123 206 123 207 123 208 123 209 123 210 123 211 123 212 123 213 123 214 123 215 123 216 123 217 123 218 123 219 123 220 123 221 123 222 123 223 123 224 123 225 123 226 123 227 123 228 123 229 123 230 123 231 123 232 123 233 123 234 123 235 123 236 123 237 123 238 123 239 123 240 123 241 123 242 123 243 123 244 123 245 123 246 123 247 123 248 123 249 123 250 123 251 123 252 123 253 123 254 123 255 123 256 123 257 123 258 123 259 123 260 123 261 123 262 123 263 123 264 123 265 123 266 123 267 123 268 123 269 123 270 123 271 123 272 123 273 123 274 123 275 123 276 123 277 123 278 123 279 123 280 123 281 123 282 123 283 123 284 123 285 123 286 123 287 123 288 123 289 123 290 123 291 123 292 123 293 123 294 123 295 123 296 123 297 123 298 123 299 124 0 124 1 124 2 124 3 124 4 124 5 124 6 124 7 124 8 124 9 124 10 124 11 124 12 124 13 124 14 124 15 124 16 124 17 124 18 124 19 124 20 124 21 124 22 124 23 124 24 124 25 124 26 124 27 124 28 124 29 124 30 124 31 124 32 124 33 124 34 124 35 124 36 124 37 124 38 124 39 124 40 124 41 124 42 124 43 124 44 124 45 124 46 124 47 124 48 124 49 124 50 124 51 124 52 124 53 124 54 124 55 124 56 124 57 124 58 124 59 124 60 124 61 124 62 124 63 124 64 124 65 124 66 124 67 124 68 124 69 124 70 124 71 124 72 124 73 124 74 124 75 124 76 124 77 124 78 124 79 124 80 124 81 124 82 124 83 124 84 124 85 124 86 124 87 124 88 124 89 124 90 124 91 124 92 124 93 124 94 124 95 124 96 124 97 124 98 124 99 124 100 124 101 124 102 124 103 124 104 124 105 124 106 124 107 124 108 124 109 124 110 124 111 124 112 124 113 124 114 124 115 124 116 124 117 124 118 124 119 124 120 124 121 124 122 124 123 124 124 124 125 124 126 124 127 124 128 124 129 124 130 124 131 124 132 124 133 124 134 124 135 124 136 124 137 124 138 124 139 124 140 124 141 124 142 124 143 124 144 124 145 124 146 124 147 124 148 124 149 124 150 124 151 124 152 124 153 124 154 124 155 124 156 124 157 124 158 124 159 124 160 124 161 124 162 124 163 124 164 124 165 124 166 124 167 124 168 124 169 124 170 124 171 124 172 124 173 124 174 124 175 124 176 124 177 124 178 124 179 124 180 124 181 124 182 124 183 124 184 124 185 124 186 124 187 124 188 124 189 124 190 124 191 124 192 124 193 124 194 124 195 124 196 124 197 124 198 124 199 124 200 124 201 124 202 124 203 124 204 124 205 124 206 124 207 124 208 124 209 124 210 124 211 124 212 124 213 124 214 124 215 124 216 124 217 124 218 124 219 124 220 124 221 124 222 124 223 124 224 124 225 124 226 124 227 124 228 124 229 124 230 124 231 124 232 124 233 124 234 124 235 124 236 124 237 124 238 124 239 124 240 124 241 124 242 124 243 124 244 124 245 124 246 124 247 124 248 124 249 124 250 124 251 124 252 124 253 124 254 124 255 124 256 124 257 124 258 124 259 124 260 124 261 124 262 124 263 124 264 124 265 124 266 124 267 124 268 124 269 124 270 124 271 124 272 124 273 124 274 124 275 124 276 124 277 124 278 124 279 124 280 124 281 124 282 124 283 124 284 124 285 124 286 124 287 124 288 124 289 124 290 124 291 124 292 124 293 124 294 124 295 124 296 124 297 124 298 124 299 125 0 125 1 125 2 125 3 125 4 125 5 125 6 125 7 125 8 125 9 125 10 125 11 125 12 125 13 125 14 125 15 125 16 125 17 125 18 125 19 125 20 125 21 125 22 125 23 125 24 125 25 125 26 125 27 125 28 125 29 125 30 125 31 125 32 125 33 125 34 125 35 125 36 125 37 125 38 125 39 125 40 125 41 125 42 125 43 125 44 125 45 125 46 125 47 125 48 125 49 125 50 125 51 125 52 125 53 125 54 125 55 125 56 125 57 125 58 125 59 125 60 125 61 125 62 125 63 125 64 125 65 125 66 125 67 125 68 125 69 125 70 125 71 125 72 125 73 125 74 125 75 125 76 125 77 125 78 125 79 125 80 125 81 125 82 125 83 125 84 125 85 125 86 125 87 125 88 125 89 125 90 125 91 125 92 125 93 125 94 125 95 125 96 125 97 125 98 125 99 125 100 125 101 125 102 125 103 125 104 125 105 125 106 125 107 125 108 125 109 125 110 125 111 125 112 125 113 125 114 125 115 125 116 125 117 125 118 125 119 125 120 125 121 125 122 125 123 125 124 125 125 125 126 125 127 125 128 125 129 125 130 125 131 125 132 125 133 125 134 125 135 125 136 125 137 125 138 125 139 125 140 125 141 125 142 125 143 125 144 125 145 125 146 125 147 125 148 125 149 125 150 125 151 125 152 125 153 125 154 125 155 125 156 125 157 125 158 125 159 125 160 125 161 125 162 125 163 125 164 125 165 125 166 125 167 125 168 125 169 125 170 125 171 125 172 125 173 125 174 125 175 125 176 125 177 125 178 125 179 125 180 125 181 125 182 125 183 125 184 125 185 125 186 125 187 125 188 125 189 125 190 125 191 125 192 125 193 125 194 125 195 125 196 125 197 125 198 125 199 125 200 125 201 125 202 125 203 125 204 125 205 125 206 125 207 125 208 125 209 125 210 125 211 125 212 125 213 125 214 125 215 125 216 125 217 125 218 125 219 125 220 125 221 125 222 125 223 125 224 125 225 125 226 125 227 125 228 125 229 125 230 125 231 125 232 125 233 125 234 125 235 125 236 125 237 125 238 125 239 125 240 125 241 125 242 125 243 125 244 125 245 125 246 125 247 125 248 125 249 125 250 125 251 125 252 125 253 125 254 125 255 125 256 125 257 125 258 125 259 125 260 125 261 125 262 125 263 125 264 125 265 125 266 125 267 125 268 125 269 125 270 125 271 125 272 125 273 125 274 125 275 125 276 125 277 125 278 125 279 125 280 125 281 125 282 125 283 125 284 125 285 125 286 125 287 125 288 125 289 125 290 125 291 125 292 125 293 125 294 125 295 125 296 125 297 125 298 125 299 126 0 126 1 126 2 126 3 126 4 126 5 126 6 126 7 126 8 126 9 126 10 126 11 126 12 126 13 126 14 126 15 126 16 126 17 126 18 126 19 126 20 126 21 126 22 126 23 126 24 126 25 126 26 126 27 126 28 126 29 126 30 126 31 126 32 126 33 126 34 126 35 126 36 126 37 126 38 126 39 126 40 126 41 126 42 126 43 126 44 126 45 126 46 126 47 126 48 126 49 126 50 126 51 126 52 126 53 126 54 126 55 126 56 126 57 126 58 126 59 126 60 126 61 126 62 126 63 126 64 126 65 126 66 126 67 126 68 126 69 126 70 126 71 126 72 126 73 126 74 126 75 126 76 126 77 126 78 126 79 126 80 126 81 126 82 126 83 126 84 126 85 126 86 126 87 126 88 126 89 126 90 126 91 126 92 126 93 126 94 126 95 126 96 126 97 126 98 126 99 126 100 126 101 126 102 126 103 126 104 126 105 126 106 126 107 126 108 126 109 126 110 126 111 126 112 126 113 126 114 126 115 126 116 126 117 126 118 126 119 126 120 126 121 126 122 126 123 126 124 126 125 126 126 126 127 126 128 126 129 126 130 126 131 126 132 126 133 126 134 126 135 126 136 126 137 126 138 126 139 126 140 126 141 126 142 126 143 126 144 126 145 126 146 126 147 126 148 126 149 126 150 126 151 126 152 126 153 126 154 126 155 126 156 126 157 126 158 126 159 126 160 126 161 126 162 126 163 126 164 126 165 126 166 126 167 126 168 126 169 126 170 126 171 126 172 126 173 126 174 126 175 126 176 126 177 126 178 126 179 126 180 126 181 126 182 126 183 126 184 126 185 126 186 126 187 126 188 126 189 126 190 126 191 126 192 126 193 126 194 126 195 126 196 126 197 126 198 126 199 126 200 126 201 126 202 126 203 126 204 126 205 126 206 126 207 126 208 126 209 126 210 126 211 126 212 126 213 126 214 126 215 126 216 126 217 126 218 126 219 126 220 126 221 126 222 126 223 126 224 126 225 126 226 126 227 126 228 126 229 126 230 126 231 126 232 126 233 126 234 126 235 126 236 126 237 126 238 126 239 126 240 126 241 126 242 126 243 126 244 126 245 126 246 126 247 126 248 126 249 126 250 126 251 126 252 126 253 126 254 126 255 126 256 126 257 126 258 126 259 126 260 126 261 126 262 126 263 126 264 126 265 126 266 126 267 126 268 126 269 126 270 126 271 126 272 126 273 126 274 126 275 126 276 126 277 126 278 126 279 126 280 126 281 126 282 126 283 126 284 126 285 126 286 126 287 126 288 126 289 126 290 126 291 126 292 126 293 126 294 126 295 126 296 126 297 126 298 126 299 127 0 127 1 127 2 127 3 127 4 127 5 127 6 127 7 127 8 127 9 127 10 127 11 127 12 127 13 127 14 127 15 127 16 127 17 127 18 127 19 127 20 127 21 127 22 127 23 127 24 127 25 127 26 127 27 127 28 127 29 127 30 127 31 127 32 127 33 127 34 127 35 127 36 127 37 127 38 127 39 127 40 127 41 127 42 127 43 127 44 127 45 127 46 127 47 127 48 127 49 127 50 127 51 127 52 127 53 127 54 127 55 127 56 127 57 127 58 127 59 127 60 127 61 127 62 127 63 127 64 127 65 127 66 127 67 127 68 127 69 127 70 127 71 127 72 127 73 127 74 127 75 127 76 127 77 127 78 127 79 127 80 127 81 127 82 127 83 127 84 127 85 127 86 127 87 127 88 127 89 127 90 127 91 127 92 127 93 127 94 127 95 127 96 127 97 127 98 127 99 127 100 127 101 127 102 127 103 127 104 127 105 127 106 127 107 127 108 127 109 127 110 127 111 127 112 127 113 127 114 127 115 127 116 127 117 127 118 127 119 127 120 127 121 127 122 127 123 127 124 127 125 127 126 127 127 127 128 127 129 127 130 127 131 127 132 127 133 127 134 127 135 127 136 127 137 127 138 127 139 127 140 127 141 127 142 127 143 127 144 127 145 127 146 127 147 127 148 127 149 127 150 127 151 127 152 127 153 127 154 127 155 127 156 127 157 127 158 127 159 127 160 127 161 127 162 127 163 127 164 127 165 127 166 127 167 127 168 127 169 127 170 127 171 127 172 127 173 127 174 127 175 127 176 127 177 127 178 127 179 127 180 127 181 127 182 127 183 127 184 127 185 127 186 127 187 127 188 127 189 127 190 127 191 127 192 127 193 127 194 127 195 127 196 127 197 127 198 127 199 127 200 127 201 127 202 127 203 127 204 127 205 127 206 127 207 127 208 127 209 127 210 127 211 127 212 127 213 127 214 127 215 127 216 127 217 127 218 127 219 127 220 127 221 127 222 127 223 127 224 127 225 127 226 127 227 127 228 127 229 127 230 127 231 127 232 127 233 127 234 127 235 127 236 127 237 127 238 127 239 127 240 127 241 127 242 127 243 127 244 127 245 127 246 127 247 127 248 127 249 127 250 127 251 127 252 127 253 127 254 127 255 127 256 127 257 127 258 127 259 127 260 127 261 127 262 127 263 127 264 127 265 127 266 127 267 127 268 127 269 127 270 127 271 127 272 127 273 127 274 127 275 127 276 127 277 127 278 127 279 127 280 127 281 127 282 127 283 127 284 127 285 127 286 127 287 127 288 127 289 127 290 127 291 127 292 127 293 127 294 127 295 127 296 127 297 127 298 127 299 128 0 128 1 128 2 128 3 128 4 128 5 128 6 128 7 128 8 128 9 128 10 128 11 128 12 128 13 128 14 128 15 128 16 128 17 128 18 128 19 128 20 128 21 128 22 128 23 128 24 128 25 128 26 128 27 128 28 128 29 128 30 128 31 128 32 128 33 128 34 128 35 128 36 128 37 128 38 128 39 128 40 128 41 128 42 128 43 128 44 128 45 128 46 128 47 128 48 128 49 128 50 128 51 128 52 128 53 128 54 128 55 128 56 128 57 128 58 128 59 128 60 128 61 128 62 128 63 128 64 128 65 128 66 128 67 128 68 128 69 128 70 128 71 128 72 128 73 128 74 128 75 128 76 128 77 128 78 128 79 128 80 128 81 128 82 128 83 128 84 128 85 128 86 128 87 128 88 128 89 128 90 128 91 128 92 128 93 128 94 128 95 128 96 128 97 128 98 128 99 128 100 128 101 128 102 128 103 128 104 128 105 128 106 128 107 128 108 128 109 128 110 128 111 128 112 128 113 128 114 128 115 128 116 128 117 128 118 128 119 128 120 128 121 128 122 128 123 128 124 128 125 128 126 128 127 128 128 128 129 128 130 128 131 128 132 128 133 128 134 128 135 128 136 128 137 128 138 128 139 128 140 128 141 128 142 128 143 128 144 128 145 128 146 128 147 128 148 128 149 128 150 128 151 128 152 128 153 128 154 128 155 128 156 128 157 128 158 128 159 128 160 128 161 128 162 128 163 128 164 128 165 128 166 128 167 128 168 128 169 128 170 128 171 128 172 128 173 128 174 128 175 128 176 128 177 128 178 128 179 128 180 128 181 128 182 128 183 128 184 128 185 128 186 128 187 128 188 128 189 128 190 128 191 128 192 128 193 128 194 128 195 128 196 128 197 128 198 128 199 128 200 128 201 128 202 128 203 128 204 128 205 128 206 128 207 128 208 128 209 128 210 128 211 128 212 128 213 128 214 128 215 128 216 128 217 128 218 128 219 128 220 128 221 128 222 128 223 128 224 128 225 128 226 128 227 128 228 128 229 128 230 128 231 128 232 128 233 128 234 128 235 128 236 128 237 128 238 128 239 128 240 128 241 128 242 128 243 128 244 128 245 128 246 128 247 128 248 128 249 128 250 128 251 128 252 128 253 128 254 128 255 128 256 128 257 128 258 128 259 128 260 128 261 128 262 128 263 128 264 128 265 128 266 128 267 128 268 128 269 128 270 128 271 128 272 128 273 128 274 128 275 128 276 128 277 128 278 128 279 128 280 128 281 128 282 128 283 128 284 128 285 128 286 128 287 128 288 128 289 128 290 128 291 128 292 128 293 128 294 128 295 128 296 128 297 128 298 128 299 129 0 129 1 129 2 129 3 129 4 129 5 129 6 129 7 129 8 129 9 129 10 129 11 129 12 129 13 129 14 129 15 129 16 129 17 129 18 129 19 129 20 129 21 129 22 129 23 129 24 129 25 129 26 129 27 129 28 129 29 129 30 129 31 129 32 129 33 129 34 129 35 129 36 129 37 129 38 129 39 129 40 129 41 129 42 129 43 129 44 129 45 129 46 129 47 129 48 129 49 129 50 129 51 129 52 129 53 129 54 129 55 129 56 129 57 129 58 129 59 129 60 129 61 129 62 129 63 129 64 129 65 129 66 129 67 129 68 129 69 129 70 129 71 129 72 129 73 129 74 129 75 129 76 129 77 129 78 129 79 129 80 129 81 129 82 129 83 129 84 129 85 129 86 129 87 129 88 129 89 129 90 129 91 129 92 129 93 129 94 129 95 129 96 129 97 129 98 129 99 129 100 129 101 129 102 129 103 129 104 129 105 129 106 129 107 129 108 129 109 129 110 129 111 129 112 129 113 129 114 129 115 129 116 129 117 129 118 129 119 129 120 129 121 129 122 129 123 129 124 129 125 129 126 129 127 129 128 129 129 129 130 129 131 129 132 129 133 129 134 129 135 129 136 129 137 129 138 129 139 129 140 129 141 129 142 129 143 129 144 129 145 129 146 129 147 129 148 129 149 129 150 129 151 129 152 129 153 129 154 129 155 129 156 129 157 129 158 129 159 129 160 129 161 129 162 129 163 129 164 129 165 129 166 129 167 129 168 129 169 129 170 129 171 129 172 129 173 129 174 129 175 129 176 129 177 129 178 129 179 129 180 129 181 129 182 129 183 129 184 129 185 129 186 129 187 129 188 129 189 129 190 129 191 129 192 129 193 129 194 129 195 129 196 129 197 129 198 129 199 129 200 129 201 129 202 129 203 129 204 129 205 129 206 129 207 129 208 129 209 129 210 129 211 129 212 129 213 129 214 129 215 129 216 129 217 129 218 129 219 129 220 129 221 129 222 129 223 129 224 129 225 129 226 129 227 129 228 129 229 129 230 129 231 129 232 129 233 129 234 129 235 129 236 129 237 129 238 129 239 129 240 129 241 129 242 129 243 129 244 129 245 129 246 129 247 129 248 129 249 129 250 129 251 129 252 129 253 129 254 129 255 129 256 129 257 129 258 129 259 129 260 129 261 129 262 129 263 129 264 129 265 129 266 129 267 129 268 129 269 129 270 129 271 129 272 129 273 129 274 129 275 129 276 129 277 129 278 129 279 129 280 129 281 129 282 129 283 129 284 129 285 129 286 129 287 129 288 129 289 129 290 129 291 129 292 129 293 129 294 129 295 129 296 129 297 129 298 129 299 130 0 130 1 130 2 130 3 130 4 130 5 130 6 130 7 130 8 130 9 130 10 130 11 130 12 130 13 130 14 130 15 130 16 130 17 130 18 130 19 130 20 130 21 130 22 130 23 130 24 130 25 130 26 130 27 130 28 130 29 130 30 130 31 130 32 130 33 130 34 130 35 130 36 130 37 130 38 130 39 130 40 130 41 130 42 130 43 130 44 130 45 130 46 130 47 130 48 130 49 130 50 130 51 130 52 130 53 130 54 130 55 130 56 130 57 130 58 130 59 130 60 130 61 130 62 130 63 130 64 130 65 130 66 130 67 130 68 130 69 130 70 130 71 130 72 130 73 130 74 130 75 130 76 130 77 130 78 130 79 130 80 130 81 130 82 130 83 130 84 130 85 130 86 130 87 130 88 130 89 130 90 130 91 130 92 130 93 130 94 130 95 130 96 130 97 130 98 130 99 130 100 130 101 130 102 130 103 130 104 130 105 130 106 130 107 130 108 130 109 130 110 130 111 130 112 130 113 130 114 130 115 130 116 130 117 130 118 130 119 130 120 130 121 130 122 130 123 130 124 130 125 130 126 130 127 130 128 130 129 130 130 130 131 130 132 130 133 130 134 130 135 130 136 130 137 130 138 130 139 130 140 130 141 130 142 130 143 130 144 130 145 130 146 130 147 130 148 130 149 130 150 130 151 130 152 130 153 130 154 130 155 130 156 130 157 130 158 130 159 130 160 130 161 130 162 130 163 130 164 130 165 130 166 130 167 130 168 130 169 130 170 130 171 130 172 130 173 130 174 130 175 130 176 130 177 130 178 130 179 130 180 130 181 130 182 130 183 130 184 130 185 130 186 130 187 130 188 130 189 130 190 130 191 130 192 130 193 130 194 130 195 130 196 130 197 130 198 130 199 130 200 130 201 130 202 130 203 130 204 130 205 130 206 130 207 130 208 130 209 130 210 130 211 130 212 130 213 130 214 130 215 130 216 130 217 130 218 130 219 130 220 130 221 130 222 130 223 130 224 130 225 130 226 130 227 130 228 130 229 130 230 130 231 130 232 130 233 130 234 130 235 130 236 130 237 130 238 130 239 130 240 130 241 130 242 130 243 130 244 130 245 130 246 130 247 130 248 130 249 130 250 130 251 130 252 130 253 130 254 130 255 130 256 130 257 130 258 130 259 130 260 130 261 130 262 130 263 130 264 130 265 130 266 130 267 130 268 130 269 130 270 130 271 130 272 130 273 130 274 130 275 130 276 130 277 130 278 130 279 130 280 130 281 130 282 130 283 130 284 130 285 130 286 130 287 130 288 130 289 130 290 130 291 130 292 130 293 130 294 130 295 130 296 130 297 130 298 130 299 131 0 131 1 131 2 131 3 131 4 131 5 131 6 131 7 131 8 131 9 131 10 131 11 131 12 131 13 131 14 131 15 131 16 131 17 131 18 131 19 131 20 131 21 131 22 131 23 131 24 131 25 131 26 131 27 131 28 131 29 131 30 131 31 131 32 131 33 131 34 131 35 131 36 131 37 131 38 131 39 131 40 131 41 131 42 131 43 131 44 131 45 131 46 131 47 131 48 131 49 131 50 131 51 131 52 131 53 131 54 131 55 131 56 131 57 131 58 131 59 131 60 131 61 131 62 131 63 131 64 131 65 131 66 131 67 131 68 131 69 131 70 131 71 131 72 131 73 131 74 131 75 131 76 131 77 131 78 131 79 131 80 131 81 131 82 131 83 131 84 131 85 131 86 131 87 131 88 131 89 131 90 131 91 131 92 131 93 131 94 131 95 131 96 131 97 131 98 131 99 131 100 131 101 131 102 131 103 131 104 131 105 131 106 131 107 131 108 131 109 131 110 131 111 131 112 131 113 131 114 131 115 131 116 131 117 131 118 131 119 131 120 131 121 131 122 131 123 131 124 131 125 131 126 131 127 131 128 131 129 131 130 131 131 131 132 131 133 131 134 131 135 131 136 131 137 131 138 131 139 131 140 131 141 131 142 131 143 131 144 131 145 131 146 131 147 131 148 131 149 131 150 131 151 131 152 131 153 131 154 131 155 131 156 131 157 131 158 131 159 131 160 131 161 131 162 131 163 131 164 131 165 131 166 131 167 131 168 131 169 131 170 131 171 131 172 131 173 131 174 131 175 131 176 131 177 131 178 131 179 131 180 131 181 131 182 131 183 131 184 131 185 131 186 131 187 131 188 131 189 131 190 131 191 131 192 131 193 131 194 131 195 131 196 131 197 131 198 131 199 131 200 131 201 131 202 131 203 131 204 131 205 131 206 131 207 131 208 131 209 131 210 131 211 131 212 131 213 131 214 131 215 131 216 131 217 131 218 131 219 131 220 131 221 131 222 131 223 131 224 131 225 131 226 131 227 131 228 131 229 131 230 131 231 131 232 131 233 131 234 131 235 131 236 131 237 131 238 131 239 131 240 131 241 131 242 131 243 131 244 131 245 131 246 131 247 131 248 131 249 131 250 131 251 131 252 131 253 131 254 131 255 131 256 131 257 131 258 131 259 131 260 131 261 131 262 131 263 131 264 131 265 131 266 131 267 131 268 131 269 131 270 131 271 131 272 131 273 131 274 131 275 131 276 131 277 131 278 131 279 131 280 131 281 131 282 131 283 131 284 131 285 131 286 131 287 131 288 131 289 131 290 131 291 131 292 131 293 131 294 131 295 131 296 131 297 131 298 131 299 132 0 132 1 132 2 132 3 132 4 132 5 132 6 132 7 132 8 132 9 132 10 132 11 132 12 132 13 132 14 132 15 132 16 132 17 132 18 132 19 132 20 132 21 132 22 132 23 132 24 132 25 132 26 132 27 132 28 132 29 132 30 132 31 132 32 132 33 132 34 132 35 132 36 132 37 132 38 132 39 132 40 132 41 132 42 132 43 132 44 132 45 132 46 132 47 132 48 132 49 132 50 132 51 132 52 132 53 132 54 132 55 132 56 132 57 132 58 132 59 132 60 132 61 132 62 132 63 132 64 132 65 132 66 132 67 132 68 132 69 132 70 132 71 132 72 132 73 132 74 132 75 132 76 132 77 132 78 132 79 132 80 132 81 132 82 132 83 132 84 132 85 132 86 132 87 132 88 132 89 132 90 132 91 132 92 132 93 132 94 132 95 132 96 132 97 132 98 132 99 132 100 132 101 132 102 132 103 132 104 132 105 132 106 132 107 132 108 132 109 132 110 132 111 132 112 132 113 132 114 132 115 132 116 132 117 132 118 132 119 132 120 132 121 132 122 132 123 132 124 132 125 132 126 132 127 132 128 132 129 132 130 132 131 132 132 132 133 132 134 132 135 132 136 132 137 132 138 132 139 132 140 132 141 132 142 132 143 132 144 132 145 132 146 132 147 132 148 132 149 132 150 132 151 132 152 132 153 132 154 132 155 132 156 132 157 132 158 132 159 132 160 132 161 132 162 132 163 132 164 132 165 132 166 132 167 132 168 132 169 132 170 132 171 132 172 132 173 132 174 132 175 132 176 132 177 132 178 132 179 132 180 132 181 132 182 132 183 132 184 132 185 132 186 132 187 132 188 132 189 132 190 132 191 132 192 132 193 132 194 132 195 132 196 132 197 132 198 132 199 132 200 132 201 132 202 132 203 132 204 132 205 132 206 132 207 132 208 132 209 132 210 132 211 132 212 132 213 132 214 132 215 132 216 132 217 132 218 132 219 132 220 132 221 132 222 132 223 132 224 132 225 132 226 132 227 132 228 132 229 132 230 132 231 132 232 132 233 132 234 132 235 132 236 132 237 132 238 132 239 132 240 132 241 132 242 132 243 132 244 132 245 132 246 132 247 132 248 132 249 132 250 132 251 132 252 132 253 132 254 132 255 132 256 132 257 132 258 132 259 132 260 132 261 132 262 132 263 132 264 132 265 132 266 132 267 132 268 132 269 132 270 132 271 132 272 132 273 132 274 132 275 132 276 132 277 132 278 132 279 132 280 132 281 132 282 132 283 132 284 132 285 132 286 132 287 132 288 132 289 132 290 132 291 132 292 132 293 132 294 132 295 132 296 132 297 132 298 132 299 133 0 133 1 133 2 133 3 133 4 133 5 133 6 133 7 133 8 133 9 133 10 133 11 133 12 133 13 133 14 133 15 133 16 133 17 133 18 133 19 133 20 133 21 133 22 133 23 133 24 133 25 133 26 133 27 133 28 133 29 133 30 133 31 133 32 133 33 133 34 133 35 133 36 133 37 133 38 133 39 133 40 133 41 133 42 133 43 133 44 133 45 133 46 133 47 133 48 133 49 133 50 133 51 133 52 133 53 133 54 133 55 133 56 133 57 133 58 133 59 133 60 133 61 133 62 133 63 133 64 133 65 133 66 133 67 133 68 133 69 133 70 133 71 133 72 133 73 133 74 133 75 133 76 133 77 133 78 133 79 133 80 133 81 133 82 133 83 133 84 133 85 133 86 133 87 133 88 133 89 133 90 133 91 133 92 133 93 133 94 133 95 133 96 133 97 133 98 133 99 133 100 133 101 133 102 133 103 133 104 133 105 133 106 133 107 133 108 133 109 133 110 133 111 133 112 133 113 133 114 133 115 133 116 133 117 133 118 133 119 133 120 133 121 133 122 133 123 133 124 133 125 133 126 133 127 133 128 133 129 133 130 133 131 133 132 133 133 133 134 133 135 133 136 133 137 133 138 133 139 133 140 133 141 133 142 133 143 133 144 133 145 133 146 133 147 133 148 133 149 133 150 133 151 133 152 133 153 133 154 133 155 133 156 133 157 133 158 133 159 133 160 133 161 133 162 133 163 133 164 133 165 133 166 133 167 133 168 133 169 133 170 133 171 133 172 133 173 133 174 133 175 133 176 133 177 133 178 133 179 133 180 133 181 133 182 133 183 133 184 133 185 133 186 133 187 133 188 133 189 133 190 133 191 133 192 133 193 133 194 133 195 133 196 133 197 133 198 133 199 133 200 133 201 133 202 133 203 133 204 133 205 133 206 133 207 133 208 133 209 133 210 133 211 133 212 133 213 133 214 133 215 133 216 133 217 133 218 133 219 133 220 133 221 133 222 133 223 133 224 133 225 133 226 133 227 133 228 133 229 133 230 133 231 133 232 133 233 133 234 133 235 133 236 133 237 133 238 133 239 133 240 133 241 133 242 133 243 133 244 133 245 133 246 133 247 133 248 133 249 133 250 133 251 133 252 133 253 133 254 133 255 133 256 133 257 133 258 133 259 133 260 133 261 133 262 133 263 133 264 133 265 133 266 133 267 133 268 133 269 133 270 133 271 133 272 133 273 133 274 133 275 133 276 133 277 133 278 133 279 133 280 133 281 133 282 133 283 133 284 133 285 133 286 133 287 133 288 133 289 133 290 133 291 133 292 133 293 133 294 133 295 133 296 133 297 133 298 133 299 134 0 134 1 134 2 134 3 134 4 134 5 134 6 134 7 134 8 134 9 134 10 134 11 134 12 134 13 134 14 134 15 134 16 134 17 134 18 134 19 134 20 134 21 134 22 134 23 134 24 134 25 134 26 134 27 134 28 134 29 134 30 134 31 134 32 134 33 134 34 134 35 134 36 134 37 134 38 134 39 134 40 134 41 134 42 134 43 134 44 134 45 134 46 134 47 134 48 134 49 134 50 134 51 134 52 134 53 134 54 134 55 134 56 134 57 134 58 134 59 134 60 134 61 134 62 134 63 134 64 134 65 134 66 134 67 134 68 134 69 134 70 134 71 134 72 134 73 134 74 134 75 134 76 134 77 134 78 134 79 134 80 134 81 134 82 134 83 134 84 134 85 134 86 134 87 134 88 134 89 134 90 134 91 134 92 134 93 134 94 134 95 134 96 134 97 134 98 134 99 134 100 134 101 134 102 134 103 134 104 134 105 134 106 134 107 134 108 134 109 134 110 134 111 134 112 134 113 134 114 134 115 134 116 134 117 134 118 134 119 134 120 134 121 134 122 134 123 134 124 134 125 134 126 134 127 134 128 134 129 134 130 134 131 134 132 134 133 134 134 134 135 134 136 134 137 134 138 134 139 134 140 134 141 134 142 134 143 134 144 134 145 134 146 134 147 134 148 134 149 134 150 134 151 134 152 134 153 134 154 134 155 134 156 134 157 134 158 134 159 134 160 134 161 134 162 134 163 134 164 134 165 134 166 134 167 134 168 134 169 134 170 134 171 134 172 134 173 134 174 134 175 134 176 134 177 134 178 134 179 134 180 134 181 134 182 134 183 134 184 134 185 134 186 134 187 134 188 134 189 134 190 134 191 134 192 134 193 134 194 134 195 134 196 134 197 134 198 134 199 134 200 134 201 134 202 134 203 134 204 134 205 134 206 134 207 134 208 134 209 134 210 134 211 134 212 134 213 134 214 134 215 134 216 134 217 134 218 134 219 134 220 134 221 134 222 134 223 134 224 134 225 134 226 134 227 134 228 134 229 134 230 134 231 134 232 134 233 134 234 134 235 134 236 134 237 134 238 134 239 134 240 134 241 134 242 134 243 134 244 134 245 134 246 134 247 134 248 134 249 134 250 134 251 134 252 134 253 134 254 134 255 134 256 134 257 134 258 134 259 134 260 134 261 134 262 134 263 134 264 134 265 134 266 134 267 134 268 134 269 134 270 134 271 134 272 134 273 134 274 134 275 134 276 134 277 134 278 134 279 134 280 134 281 134 282 134 283 134 284 134 285 134 286 134 287 134 288 134 289 134 290 134 291 134 292 134 293 134 294 134 295 134 296 134 297 134 298 134 299 135 0 135 1 135 2 135 3 135 4 135 5 135 6 135 7 135 8 135 9 135 10 135 11 135 12 135 13 135 14 135 15 135 16 135 17 135 18 135 19 135 20 135 21 135 22 135 23 135 24 135 25 135 26 135 27 135 28 135 29 135 30 135 31 135 32 135 33 135 34 135 35 135 36 135 37 135 38 135 39 135 40 135 41 135 42 135 43 135 44 135 45 135 46 135 47 135 48 135 49 135 50 135 51 135 52 135 53 135 54 135 55 135 56 135 57 135 58 135 59 135 60 135 61 135 62 135 63 135 64 135 65 135 66 135 67 135 68 135 69 135 70 135 71 135 72 135 73 135 74 135 75 135 76 135 77 135 78 135 79 135 80 135 81 135 82 135 83 135 84 135 85 135 86 135 87 135 88 135 89 135 90 135 91 135 92 135 93 135 94 135 95 135 96 135 97 135 98 135 99 135 100 135 101 135 102 135 103 135 104 135 105 135 106 135 107 135 108 135 109 135 110 135 111 135 112 135 113 135 114 135 115 135 116 135 117 135 118 135 119 135 120 135 121 135 122 135 123 135 124 135 125 135 126 135 127 135 128 135 129 135 130 135 131 135 132 135 133 135 134 135 135 135 136 135 137 135 138 135 139 135 140 135 141 135 142 135 143 135 144 135 145 135 146 135 147 135 148 135 149 135 150 135 151 135 152 135 153 135 154 135 155 135 156 135 157 135 158 135 159 135 160 135 161 135 162 135 163 135 164 135 165 135 166 135 167 135 168 135 169 135 170 135 171 135 172 135 173 135 174 135 175 135 176 135 177 135 178 135 179 135 180 135 181 135 182 135 183 135 184 135 185 135 186 135 187 135 188 135 189 135 190 135 191 135 192 135 193 135 194 135 195 135 196 135 197 135 198 135 199 135 200 135 201 135 202 135 203 135 204 135 205 135 206 135 207 135 208 135 209 135 210 135 211 135 212 135 213 135 214 135 215 135 216 135 217 135 218 135 219 135 220 135 221 135 222 135 223 135 224 135 225 135 226 135 227 135 228 135 229 135 230 135 231 135 232 135 233 135 234 135 235 135 236 135 237 135 238 135 239 135 240 135 241 135 242 135 243 135 244 135 245 135 246 135 247 135 248 135 249 135 250 135 251 135 252 135 253 135 254 135 255 135 256 135 257 135 258 135 259 135 260 135 261 135 262 135 263 135 264 135 265 135 266 135 267 135 268 135 269 135 270 135 271 135 272 135 273 135 274 135 275 135 276 135 277 135 278 135 279 135 280 135 281 135 282 135 283 135 284 135 285 135 286 135 287 135 288 135 289 135 290 135 291 135 292 135 293 135 294 135 295 135 296 135 297 135 298 135 299 136 0 136 1 136 2 136 3 136 4 136 5 136 6 136 7 136 8 136 9 136 10 136 11 136 12 136 13 136 14 136 15 136 16 136 17 136 18 136 19 136 20 136 21 136 22 136 23 136 24 136 25 136 26 136 27 136 28 136 29 136 30 136 31 136 32 136 33 136 34 136 35 136 36 136 37 136 38 136 39 136 40 136 41 136 42 136 43 136 44 136 45 136 46 136 47 136 48 136 49 136 50 136 51 136 52 136 53 136 54 136 55 136 56 136 57 136 58 136 59 136 60 136 61 136 62 136 63 136 64 136 65 136 66 136 67 136 68 136 69 136 70 136 71 136 72 136 73 136 74 136 75 136 76 136 77 136 78 136 79 136 80 136 81 136 82 136 83 136 84 136 85 136 86 136 87 136 88 136 89 136 90 136 91 136 92 136 93 136 94 136 95 136 96 136 97 136 98 136 99 136 100 136 101 136 102 136 103 136 104 136 105 136 106 136 107 136 108 136 109 136 110 136 111 136 112 136 113 136 114 136 115 136 116 136 117 136 118 136 119 136 120 136 121 136 122 136 123 136 124 136 125 136 126 136 127 136 128 136 129 136 130 136 131 136 132 136 133 136 134 136 135 136 136 136 137 136 138 136 139 136 140 136 141 136 142 136 143 136 144 136 145 136 146 136 147 136 148 136 149 136 150 136 151 136 152 136 153 136 154 136 155 136 156 136 157 136 158 136 159 136 160 136 161 136 162 136 163 136 164 136 165 136 166 136 167 136 168 136 169 136 170 136 171 136 172 136 173 136 174 136 175 136 176 136 177 136 178 136 179 136 180 136 181 136 182 136 183 136 184 136 185 136 186 136 187 136 188 136 189 136 190 136 191 136 192 136 193 136 194 136 195 136 196 136 197 136 198 136 199 136 200 136 201 136 202 136 203 136 204 136 205 136 206 136 207 136 208 136 209 136 210 136 211 136 212 136 213 136 214 136 215 136 216 136 217 136 218 136 219 136 220 136 221 136 222 136 223 136 224 136 225 136 226 136 227 136 228 136 229 136 230 136 231 136 232 136 233 136 234 136 235 136 236 136 237 136 238 136 239 136 240 136 241 136 242 136 243 136 244 136 245 136 246 136 247 136 248 136 249 136 250 136 251 136 252 136 253 136 254 136 255 136 256 136 257 136 258 136 259 136 260 136 261 136 262 136 263 136 264 136 265 136 266 136 267 136 268 136 269 136 270 136 271 136 272 136 273 136 274 136 275 136 276 136 277 136 278 136 279 136 280 136 281 136 282 136 283 136 284 136 285 136 286 136 287 136 288 136 289 136 290 136 291 136 292 136 293 136 294 136 295 136 296 136 297 136 298 136 299 137 0 137 1 137 2 137 3 137 4 137 5 137 6 137 7 137 8 137 9 137 10 137 11 137 12 137 13 137 14 137 15 137 16 137 17 137 18 137 19 137 20 137 21 137 22 137 23 137 24 137 25 137 26 137 27 137 28 137 29 137 30 137 31 137 32 137 33 137 34 137 35 137 36 137 37 137 38 137 39 137 40 137 41 137 42 137 43 137 44 137 45 137 46 137 47 137 48 137 49 137 50 137 51 137 52 137 53 137 54 137 55 137 56 137 57 137 58 137 59 137 60 137 61 137 62 137 63 137 64 137 65 137 66 137 67 137 68 137 69 137 70 137 71 137 72 137 73 137 74 137 75 137 76 137 77 137 78 137 79 137 80 137 81 137 82 137 83 137 84 137 85 137 86 137 87 137 88 137 89 137 90 137 91 137 92 137 93 137 94 137 95 137 96 137 97 137 98 137 99 137 100 137 101 137 102 137 103 137 104 137 105 137 106 137 107 137 108 137 109 137 110 137 111 137 112 137 113 137 114 137 115 137 116 137 117 137 118 137 119 137 120 137 121 137 122 137 123 137 124 137 125 137 126 137 127 137 128 137 129 137 130 137 131 137 132 137 133 137 134 137 135 137 136 137 137 137 138 137 139 137 140 137 141 137 142 137 143 137 144 137 145 137 146 137 147 137 148 137 149 137 150 137 151 137 152 137 153 137 154 137 155 137 156 137 157 137 158 137 159 137 160 137 161 137 162 137 163 137 164 137 165 137 166 137 167 137 168 137 169 137 170 137 171 137 172 137 173 137 174 137 175 137 176 137 177 137 178 137 179 137 180 137 181 137 182 137 183 137 184 137 185 137 186 137 187 137 188 137 189 137 190 137 191 137 192 137 193 137 194 137 195 137 196 137 197 137 198 137 199 137 200 137 201 137 202 137 203 137 204 137 205 137 206 137 207 137 208 137 209 137 210 137 211 137 212 137 213 137 214 137 215 137 216 137 217 137 218 137 219 137 220 137 221 137 222 137 223 137 224 137 225 137 226 137 227 137 228 137 229 137 230 137 231 137 232 137 233 137 234 137 235 137 236 137 237 137 238 137 239 137 240 137 241 137 242 137 243 137 244 137 245 137 246 137 247 137 248 137 249 137 250 137 251 137 252 137 253 137 254 137 255 137 256 137 257 137 258 137 259 137 260 137 261 137 262 137 263 137 264 137 265 137 266 137 267 137 268 137 269 137 270 137 271 137 272 137 273 137 274 137 275 137 276 137 277 137 278 137 279 137 280 137 281 137 282 137 283 137 284 137 285 137 286 137 287 137 288 137 289 137 290 137 291 137 292 137 293 137 294 137 295 137 296 137 297 137 298 137 299 138 0 138 1 138 2 138 3 138 4 138 5 138 6 138 7 138 8 138 9 138 10 138 11 138 12 138 13 138 14 138 15 138 16 138 17 138 18 138 19 138 20 138 21 138 22 138 23 138 24 138 25 138 26 138 27 138 28 138 29 138 30 138 31 138 32 138 33 138 34 138 35 138 36 138 37 138 38 138 39 138 40 138 41 138 42 138 43 138 44 138 45 138 46 138 47 138 48 138 49 138 50 138 51 138 52 138 53 138 54 138 55 138 56 138 57 138 58 138 59 138 60 138 61 138 62 138 63 138 64 138 65 138 66 138 67 138 68 138 69 138 70 138 71 138 72 138 73 138 74 138 75 138 76 138 77 138 78 138 79 138 80 138 81 138 82 138 83 138 84 138 85 138 86 138 87 138 88 138 89 138 90 138 91 138 92 138 93 138 94 138 95 138 96 138 97 138 98 138 99 138 100 138 101 138 102 138 103 138 104 138 105 138 106 138 107 138 108 138 109 138 110 138 111 138 112 138 113 138 114 138 115 138 116 138 117 138 118 138 119 138 120 138 121 138 122 138 123 138 124 138 125 138 126 138 127 138 128 138 129 138 130 138 131 138 132 138 133 138 134 138 135 138 136 138 137 138 138 138 139 138 140 138 141 138 142 138 143 138 144 138 145 138 146 138 147 138 148 138 149 138 150 138 151 138 152 138 153 138 154 138 155 138 156 138 157 138 158 138 159 138 160 138 161 138 162 138 163 138 164 138 165 138 166 138 167 138 168 138 169 138 170 138 171 138 172 138 173 138 174 138 175 138 176 138 177 138 178 138 179 138 180 138 181 138 182 138 183 138 184 138 185 138 186 138 187 138 188 138 189 138 190 138 191 138 192 138 193 138 194 138 195 138 196 138 197 138 198 138 199 138 200 138 201 138 202 138 203 138 204 138 205 138 206 138 207 138 208 138 209 138 210 138 211 138 212 138 213 138 214 138 215 138 216 138 217 138 218 138 219 138 220 138 221 138 222 138 223 138 224 138 225 138 226 138 227 138 228 138 229 138 230 138 231 138 232 138 233 138 234 138 235 138 236 138 237 138 238 138 239 138 240 138 241 138 242 138 243 138 244 138 245 138 246 138 247 138 248 138 249 138 250 138 251 138 252 138 253 138 254 138 255 138 256 138 257 138 258 138 259 138 260 138 261 138 262 138 263 138 264 138 265 138 266 138 267 138 268 138 269 138 270 138 271 138 272 138 273 138 274 138 275 138 276 138 277 138 278 138 279 138 280 138 281 138 282 138 283 138 284 138 285 138 286 138 287 138 288 138 289 138 290 138 291 138 292 138 293 138 294 138 295 138 296 138 297 138 298 138 299 139 0 139 1 139 2 139 3 139 4 139 5 139 6 139 7 139 8 139 9 139 10 139 11 139 12 139 13 139 14 139 15 139 16 139 17 139 18 139 19 139 20 139 21 139 22 139 23 139 24 139 25 139 26 139 27 139 28 139 29 139 30 139 31 139 32 139 33 139 34 139 35 139 36 139 37 139 38 139 39 139 40 139 41 139 42 139 43 139 44 139 45 139 46 139 47 139 48 139 49 139 50 139 51 139 52 139 53 139 54 139 55 139 56 139 57 139 58 139 59 139 60 139 61 139 62 139 63 139 64 139 65 139 66 139 67 139 68 139 69 139 70 139 71 139 72 139 73 139 74 139 75 139 76 139 77 139 78 139 79 139 80 139 81 139 82 139 83 139 84 139 85 139 86 139 87 139 88 139 89 139 90 139 91 139 92 139 93 139 94 139 95 139 96 139 97 139 98 139 99 139 100 139 101 139 102 139 103 139 104 139 105 139 106 139 107 139 108 139 109 139 110 139 111 139 112 139 113 139 114 139 115 139 116 139 117 139 118 139 119 139 120 139 121 139 122 139 123 139 124 139 125 139 126 139 127 139 128 139 129 139 130 139 131 139 132 139 133 139 134 139 135 139 136 139 137 139 138 139 139 139 140 139 141 139 142 139 143 139 144 139 145 139 146 139 147 139 148 139 149 139 150 139 151 139 152 139 153 139 154 139 155 139 156 139 157 139 158 139 159 139 160 139 161 139 162 139 163 139 164 139 165 139 166 139 167 139 168 139 169 139 170 139 171 139 172 139 173 139 174 139 175 139 176 139 177 139 178 139 179 139 180 139 181 139 182 139 183 139 184 139 185 139 186 139 187 139 188 139 189 139 190 139 191 139 192 139 193 139 194 139 195 139 196 139 197 139 198 139 199 139 200 139 201 139 202 139 203 139 204 139 205 139 206 139 207 139 208 139 209 139 210 139 211 139 212 139 213 139 214 139 215 139 216 139 217 139 218 139 219 139 220 139 221 139 222 139 223 139 224 139 225 139 226 139 227 139 228 139 229 139 230 139 231 139 232 139 233 139 234 139 235 139 236 139 237 139 238 139 239 139 240 139 241 139 242 139 243 139 244 139 245 139 246 139 247 139 248 139 249 139 250 139 251 139 252 139 253 139 254 139 255 139 256 139 257 139 258 139 259 139 260 139 261 139 262 139 263 139 264 139 265 139 266 139 267 139 268 139 269 139 270 139 271 139 272 139 273 139 274 139 275 139 276 139 277 139 278 139 279 139 280 139 281 139 282 139 283 139 284 139 285 139 286 139 287 139 288 139 289 139 290 139 291 139 292 139 293 139 294 139 295 139 296 139 297 139 298 139 299 140 0 140 1 140 2 140 3 140 4 140 5 140 6 140 7 140 8 140 9 140 10 140 11 140 12 140 13 140 14 140 15 140 16 140 17 140 18 140 19 140 20 140 21 140 22 140 23 140 24 140 25 140 26 140 27 140 28 140 29 140 30 140 31 140 32 140 33 140 34 140 35 140 36 140 37 140 38 140 39 140 40 140 41 140 42 140 43 140 44 140 45 140 46 140 47 140 48 140 49 140 50 140 51 140 52 140 53 140 54 140 55 140 56 140 57 140 58 140 59 140 60 140 61 140 62 140 63 140 64 140 65 140 66 140 67 140 68 140 69 140 70 140 71 140 72 140 73 140 74 140 75 140 76 140 77 140 78 140 79 140 80 140 81 140 82 140 83 140 84 140 85 140 86 140 87 140 88 140 89 140 90 140 91 140 92 140 93 140 94 140 95 140 96 140 97 140 98 140 99 140 100 140 101 140 102 140 103 140 104 140 105 140 106 140 107 140 108 140 109 140 110 140 111 140 112 140 113 140 114 140 115 140 116 140 117 140 118 140 119 140 120 140 121 140 122 140 123 140 124 140 125 140 126 140 127 140 128 140 129 140 130 140 131 140 132 140 133 140 134 140 135 140 136 140 137 140 138 140 139 140 140 140 141 140 142 140 143 140 144 140 145 140 146 140 147 140 148 140 149 140 150 140 151 140 152 140 153 140 154 140 155 140 156 140 157 140 158 140 159 140 160 140 161 140 162 140 163 140 164 140 165 140 166 140 167 140 168 140 169 140 170 140 171 140 172 140 173 140 174 140 175 140 176 140 177 140 178 140 179 140 180 140 181 140 182 140 183 140 184 140 185 140 186 140 187 140 188 140 189 140 190 140 191 140 192 140 193 140 194 140 195 140 196 140 197 140 198 140 199 140 200 140 201 140 202 140 203 140 204 140 205 140 206 140 207 140 208 140 209 140 210 140 211 140 212 140 213 140 214 140 215 140 216 140 217 140 218 140 219 140 220 140 221 140 222 140 223 140 224 140 225 140 226 140 227 140 228 140 229 140 230 140 231 140 232 140 233 140 234 140 235 140 236 140 237 140 238 140 239 140 240 140 241 140 242 140 243 140 244 140 245 140 246 140 247 140 248 140 249 140 250 140 251 140 252 140 253 140 254 140 255 140 256 140 257 140 258 140 259 140 260 140 261 140 262 140 263 140 264 140 265 140 266 140 267 140 268 140 269 140 270 140 271 140 272 140 273 140 274 140 275 140 276 140 277 140 278 140 279 140 280 140 281 140 282 140 283 140 284 140 285 140 286 140 287 140 288 140 289 140 290 140 291 140 292 140 293 140 294 140 295 140 296 140 297 140 298 140 299 141 0 141 1 141 2 141 3 141 4 141 5 141 6 141 7 141 8 141 9 141 10 141 11 141 12 141 13 141 14 141 15 141 16 141 17 141 18 141 19 141 20 141 21 141 22 141 23 141 24 141 25 141 26 141 27 141 28 141 29 141 30 141 31 141 32 141 33 141 34 141 35 141 36 141 37 141 38 141 39 141 40 141 41 141 42 141 43 141 44 141 45 141 46 141 47 141 48 141 49 141 50 141 51 141 52 141 53 141 54 141 55 141 56 141 57 141 58 141 59 141 60 141 61 141 62 141 63 141 64 141 65 141 66 141 67 141 68 141 69 141 70 141 71 141 72 141 73 141 74 141 75 141 76 141 77 141 78 141 79 141 80 141 81 141 82 141 83 141 84 141 85 141 86 141 87 141 88 141 89 141 90 141 91 141 92 141 93 141 94 141 95 141 96 141 97 141 98 141 99 141 100 141 101 141 102 141 103 141 104 141 105 141 106 141 107 141 108 141 109 141 110 141 111 141 112 141 113 141 114 141 115 141 116 141 117 141 118 141 119 141 120 141 121 141 122 141 123 141 124 141 125 141 126 141 127 141 128 141 129 141 130 141 131 141 132 141 133 141 134 141 135 141 136 141 137 141 138 141 139 141 140 141 141 141 142 141 143 141 144 141 145 141 146 141 147 141 148 141 149 141 150 141 151 141 152 141 153 141 154 141 155 141 156 141 157 141 158 141 159 141 160 141 161 141 162 141 163 141 164 141 165 141 166 141 167 141 168 141 169 141 170 141 171 141 172 141 173 141 174 141 175 141 176 141 177 141 178 141 179 141 180 141 181 141 182 141 183 141 184 141 185 141 186 141 187 141 188 141 189 141 190 141 191 141 192 141 193 141 194 141 195 141 196 141 197 141 198 141 199 141 200 141 201 141 202 141 203 141 204 141 205 141 206 141 207 141 208 141 209 141 210 141 211 141 212 141 213 141 214 141 215 141 216 141 217 141 218 141 219 141 220 141 221 141 222 141 223 141 224 141 225 141 226 141 227 141 228 141 229 141 230 141 231 141 232 141 233 141 234 141 235 141 236 141 237 141 238 141 239 141 240 141 241 141 242 141 243 141 244 141 245 141 246 141 247 141 248 141 249 141 250 141 251 141 252 141 253 141 254 141 255 141 256 141 257 141 258 141 259 141 260 141 261 141 262 141 263 141 264 141 265 141 266 141 267 141 268 141 269 141 270 141 271 141 272 141 273 141 274 141 275 141 276 141 277 141 278 141 279 141 280 141 281 141 282 141 283 141 284 141 285 141 286 141 287 141 288 141 289 141 290 141 291 141 292 141 293 141 294 141 295 141 296 141 297 141 298 141 299 142 0 142 1 142 2 142 3 142 4 142 5 142 6 142 7 142 8 142 9 142 10 142 11 142 12 142 13 142 14 142 15 142 16 142 17 142 18 142 19 142 20 142 21 142 22 142 23 142 24 142 25 142 26 142 27 142 28 142 29 142 30 142 31 142 32 142 33 142 34 142 35 142 36 142 37 142 38 142 39 142 40 142 41 142 42 142 43 142 44 142 45 142 46 142 47 142 48 142 49 142 50 142 51 142 52 142 53 142 54 142 55 142 56 142 57 142 58 142 59 142 60 142 61 142 62 142 63 142 64 142 65 142 66 142 67 142 68 142 69 142 70 142 71 142 72 142 73 142 74 142 75 142 76 142 77 142 78 142 79 142 80 142 81 142 82 142 83 142 84 142 85 142 86 142 87 142 88 142 89 142 90 142 91 142 92 142 93 142 94 142 95 142 96 142 97 142 98 142 99 142 100 142 101 142 102 142 103 142 104 142 105 142 106 142 107 142 108 142 109 142 110 142 111 142 112 142 113 142 114 142 115 142 116 142 117 142 118 142 119 142 120 142 121 142 122 142 123 142 124 142 125 142 126 142 127 142 128 142 129 142 130 142 131 142 132 142 133 142 134 142 135 142 136 142 137 142 138 142 139 142 140 142 141 142 142 142 143 142 144 142 145 142 146 142 147 142 148 142 149 142 150 142 151 142 152 142 153 142 154 142 155 142 156 142 157 142 158 142 159 142 160 142 161 142 162 142 163 142 164 142 165 142 166 142 167 142 168 142 169 142 170 142 171 142 172 142 173 142 174 142 175 142 176 142 177 142 178 142 179 142 180 142 181 142 182 142 183 142 184 142 185 142 186 142 187 142 188 142 189 142 190 142 191 142 192 142 193 142 194 142 195 142 196 142 197 142 198 142 199 142 200 142 201 142 202 142 203 142 204 142 205 142 206 142 207 142 208 142 209 142 210 142 211 142 212 142 213 142 214 142 215 142 216 142 217 142 218 142 219 142 220 142 221 142 222 142 223 142 224 142 225 142 226 142 227 142 228 142 229 142 230 142 231 142 232 142 233 142 234 142 235 142 236 142 237 142 238 142 239 142 240 142 241 142 242 142 243 142 244 142 245 142 246 142 247 142 248 142 249 142 250 142 251 142 252 142 253 142 254 142 255 142 256 142 257 142 258 142 259 142 260 142 261 142 262 142 263 142 264 142 265 142 266 142 267 142 268 142 269 142 270 142 271 142 272 142 273 142 274 142 275 142 276 142 277 142 278 142 279 142 280 142 281 142 282 142 283 142 284 142 285 142 286 142 287 142 288 142 289 142 290 142 291 142 292 142 293 142 294 142 295 142 296 142 297 142 298 142 299 143 0 143 1 143 2 143 3 143 4 143 5 143 6 143 7 143 8 143 9 143 10 143 11 143 12 143 13 143 14 143 15 143 16 143 17 143 18 143 19 143 20 143 21 143 22 143 23 143 24 143 25 143 26 143 27 143 28 143 29 143 30 143 31 143 32 143 33 143 34 143 35 143 36 143 37 143 38 143 39 143 40 143 41 143 42 143 43 143 44 143 45 143 46 143 47 143 48 143 49 143 50 143 51 143 52 143 53 143 54 143 55 143 56 143 57 143 58 143 59 143 60 143 61 143 62 143 63 143 64 143 65 143 66 143 67 143 68 143 69 143 70 143 71 143 72 143 73 143 74 143 75 143 76 143 77 143 78 143 79 143 80 143 81 143 82 143 83 143 84 143 85 143 86 143 87 143 88 143 89 143 90 143 91 143 92 143 93 143 94 143 95 143 96 143 97 143 98 143 99 143 100 143 101 143 102 143 103 143 104 143 105 143 106 143 107 143 108 143 109 143 110 143 111 143 112 143 113 143 114 143 115 143 116 143 117 143 118 143 119 143 120 143 121 143 122 143 123 143 124 143 125 143 126 143 127 143 128 143 129 143 130 143 131 143 132 143 133 143 134 143 135 143 136 143 137 143 138 143 139 143 140 143 141 143 142 143 143 143 144 143 145 143 146 143 147 143 148 143 149 143 150 143 151 143 152 143 153 143 154 143 155 143 156 143 157 143 158 143 159 143 160 143 161 143 162 143 163 143 164 143 165 143 166 143 167 143 168 143 169 143 170 143 171 143 172 143 173 143 174 143 175 143 176 143 177 143 178 143 179 143 180 143 181 143 182 143 183 143 184 143 185 143 186 143 187 143 188 143 189 143 190 143 191 143 192 143 193 143 194 143 195 143 196 143 197 143 198 143 199 143 200 143 201 143 202 143 203 143 204 143 205 143 206 143 207 143 208 143 209 143 210 143 211 143 212 143 213 143 214 143 215 143 216 143 217 143 218 143 219 143 220 143 221 143 222 143 223 143 224 143 225 143 226 143 227 143 228 143 229 143 230 143 231 143 232 143 233 143 234 143 235 143 236 143 237 143 238 143 239 143 240 143 241 143 242 143 243 143 244 143 245 143 246 143 247 143 248 143 249 143 250 143 251 143 252 143 253 143 254 143 255 143 256 143 257 143 258 143 259 143 260 143 261 143 262 143 263 143 264 143 265 143 266 143 267 143 268 143 269 143 270 143 271 143 272 143 273 143 274 143 275 143 276 143 277 143 278 143 279 143 280 143 281 143 282 143 283 143 284 143 285 143 286 143 287 143 288 143 289 143 290 143 291 143 292 143 293 143 294 143 295 143 296 143 297 143 298 143 299 144 0 144 1 144 2 144 3 144 4 144 5 144 6 144 7 144 8 144 9 144 10 144 11 144 12 144 13 144 14 144 15 144 16 144 17 144 18 144 19 144 20 144 21 144 22 144 23 144 24 144 25 144 26 144 27 144 28 144 29 144 30 144 31 144 32 144 33 144 34 144 35 144 36 144 37 144 38 144 39 144 40 144 41 144 42 144 43 144 44 144 45 144 46 144 47 144 48 144 49 144 50 144 51 144 52 144 53 144 54 144 55 144 56 144 57 144 58 144 59 144 60 144 61 144 62 144 63 144 64 144 65 144 66 144 67 144 68 144 69 144 70 144 71 144 72 144 73 144 74 144 75 144 76 144 77 144 78 144 79 144 80 144 81 144 82 144 83 144 84 144 85 144 86 144 87 144 88 144 89 144 90 144 91 144 92 144 93 144 94 144 95 144 96 144 97 144 98 144 99 144 100 144 101 144 102 144 103 144 104 144 105 144 106 144 107 144 108 144 109 144 110 144 111 144 112 144 113 144 114 144 115 144 116 144 117 144 118 144 119 144 120 144 121 144 122 144 123 144 124 144 125 144 126 144 127 144 128 144 129 144 130 144 131 144 132 144 133 144 134 144 135 144 136 144 137 144 138 144 139 144 140 144 141 144 142 144 143 144 144 144 145 144 146 144 147 144 148 144 149 144 150 144 151 144 152 144 153 144 154 144 155 144 156 144 157 144 158 144 159 144 160 144 161 144 162 144 163 144 164 144 165 144 166 144 167 144 168 144 169 144 170 144 171 144 172 144 173 144 174 144 175 144 176 144 177 144 178 144 179 144 180 144 181 144 182 144 183 144 184 144 185 144 186 144 187 144 188 144 189 144 190 144 191 144 192 144 193 144 194 144 195 144 196 144 197 144 198 144 199 144 200 144 201 144 202 144 203 144 204 144 205 144 206 144 207 144 208 144 209 144 210 144 211 144 212 144 213 144 214 144 215 144 216 144 217 144 218 144 219 144 220 144 221 144 222 144 223 144 224 144 225 144 226 144 227 144 228 144 229 144 230 144 231 144 232 144 233 144 234 144 235 144 236 144 237 144 238 144 239 144 240 144 241 144 242 144 243 144 244 144 245 144 246 144 247 144 248 144 249 144 250 144 251 144 252 144 253 144 254 144 255 144 256 144 257 144 258 144 259 144 260 144 261 144 262 144 263 144 264 144 265 144 266 144 267 144 268 144 269 144 270 144 271 144 272 144 273 144 274 144 275 144 276 144 277 144 278 144 279 144 280 144 281 144 282 144 283 144 284 144 285 144 286 144 287 144 288 144 289 144 290 144 291 144 292 144 293 144 294 144 295 144 296 144 297 144 298 144 299 145 0 145 1 145 2 145 3 145 4 145 5 145 6 145 7 145 8 145 9 145 10 145 11 145 12 145 13 145 14 145 15 145 16 145 17 145 18 145 19 145 20 145 21 145 22 145 23 145 24 145 25 145 26 145 27 145 28 145 29 145 30 145 31 145 32 145 33 145 34 145 35 145 36 145 37 145 38 145 39 145 40 145 41 145 42 145 43 145 44 145 45 145 46 145 47 145 48 145 49 145 50 145 51 145 52 145 53 145 54 145 55 145 56 145 57 145 58 145 59 145 60 145 61 145 62 145 63 145 64 145 65 145 66 145 67 145 68 145 69 145 70 145 71 145 72 145 73 145 74 145 75 145 76 145 77 145 78 145 79 145 80 145 81 145 82 145 83 145 84 145 85 145 86 145 87 145 88 145 89 145 90 145 91 145 92 145 93 145 94 145 95 145 96 145 97 145 98 145 99 145 100 145 101 145 102 145 103 145 104 145 105 145 106 145 107 145 108 145 109 145 110 145 111 145 112 145 113 145 114 145 115 145 116 145 117 145 118 145 119 145 120 145 121 145 122 145 123 145 124 145 125 145 126 145 127 145 128 145 129 145 130 145 131 145 132 145 133 145 134 145 135 145 136 145 137 145 138 145 139 145 140 145 141 145 142 145 143 145 144 145 145 145 146 145 147 145 148 145 149 145 150 145 151 145 152 145 153 145 154 145 155 145 156 145 157 145 158 145 159 145 160 145 161 145 162 145 163 145 164 145 165 145 166 145 167 145 168 145 169 145 170 145 171 145 172 145 173 145 174 145 175 145 176 145 177 145 178 145 179 145 180 145 181 145 182 145 183 145 184 145 185 145 186 145 187 145 188 145 189 145 190 145 191 145 192 145 193 145 194 145 195 145 196 145 197 145 198 145 199 145 200 145 201 145 202 145 203 145 204 145 205 145 206 145 207 145 208 145 209 145 210 145 211 145 212 145 213 145 214 145 215 145 216 145 217 145 218 145 219 145 220 145 221 145 222 145 223 145 224 145 225 145 226 145 227 145 228 145 229 145 230 145 231 145 232 145 233 145 234 145 235 145 236 145 237 145 238 145 239 145 240 145 241 145 242 145 243 145 244 145 245 145 246 145 247 145 248 145 249 145 250 145 251 145 252 145 253 145 254 145 255 145 256 145 257 145 258 145 259 145 260 145 261 145 262 145 263 145 264 145 265 145 266 145 267 145 268 145 269 145 270 145 271 145 272 145 273 145 274 145 275 145 276 145 277 145 278 145 279 145 280 145 281 145 282 145 283 145 284 145 285 145 286 145 287 145 288 145 289 145 290 145 291 145 292 145 293 145 294 145 295 145 296 145 297 145 298 145 299 146 0 146 1 146 2 146 3 146 4 146 5 146 6 146 7 146 8 146 9 146 10 146 11 146 12 146 13 146 14 146 15 146 16 146 17 146 18 146 19 146 20 146 21 146 22 146 23 146 24 146 25 146 26 146 27 146 28 146 29 146 30 146 31 146 32 146 33 146 34 146 35 146 36 146 37 146 38 146 39 146 40 146 41 146 42 146 43 146 44 146 45 146 46 146 47 146 48 146 49 146 50 146 51 146 52 146 53 146 54 146 55 146 56 146 57 146 58 146 59 146 60 146 61 146 62 146 63 146 64 146 65 146 66 146 67 146 68 146 69 146 70 146 71 146 72 146 73 146 74 146 75 146 76 146 77 146 78 146 79 146 80 146 81 146 82 146 83 146 84 146 85 146 86 146 87 146 88 146 89 146 90 146 91 146 92 146 93 146 94 146 95 146 96 146 97 146 98 146 99 146 100 146 101 146 102 146 103 146 104 146 105 146 106 146 107 146 108 146 109 146 110 146 111 146 112 146 113 146 114 146 115 146 116 146 117 146 118 146 119 146 120 146 121 146 122 146 123 146 124 146 125 146 126 146 127 146 128 146 129 146 130 146 131 146 132 146 133 146 134 146 135 146 136 146 137 146 138 146 139 146 140 146 141 146 142 146 143 146 144 146 145 146 146 146 147 146 148 146 149 146 150 146 151 146 152 146 153 146 154 146 155 146 156 146 157 146 158 146 159 146 160 146 161 146 162 146 163 146 164 146 165 146 166 146 167 146 168 146 169 146 170 146 171 146 172 146 173 146 174 146 175 146 176 146 177 146 178 146 179 146 180 146 181 146 182 146 183 146 184 146 185 146 186 146 187 146 188 146 189 146 190 146 191 146 192 146 193 146 194 146 195 146 196 146 197 146 198 146 199 146 200 146 201 146 202 146 203 146 204 146 205 146 206 146 207 146 208 146 209 146 210 146 211 146 212 146 213 146 214 146 215 146 216 146 217 146 218 146 219 146 220 146 221 146 222 146 223 146 224 146 225 146 226 146 227 146 228 146 229 146 230 146 231 146 232 146 233 146 234 146 235 146 236 146 237 146 238 146 239 146 240 146 241 146 242 146 243 146 244 146 245 146 246 146 247 146 248 146 249 146 250 146 251 146 252 146 253 146 254 146 255 146 256 146 257 146 258 146 259 146 260 146 261 146 262 146 263 146 264 146 265 146 266 146 267 146 268 146 269 146 270 146 271 146 272 146 273 146 274 146 275 146 276 146 277 146 278 146 279 146 280 146 281 146 282 146 283 146 284 146 285 146 286 146 287 146 288 146 289 146 290 146 291 146 292 146 293 146 294 146 295 146 296 146 297 146 298 146 299 147 0 147 1 147 2 147 3 147 4 147 5 147 6 147 7 147 8 147 9 147 10 147 11 147 12 147 13 147 14 147 15 147 16 147 17 147 18 147 19 147 20 147 21 147 22 147 23 147 24 147 25 147 26 147 27 147 28 147 29 147 30 147 31 147 32 147 33 147 34 147 35 147 36 147 37 147 38 147 39 147 40 147 41 147 42 147 43 147 44 147 45 147 46 147 47 147 48 147 49 147 50 147 51 147 52 147 53 147 54 147 55 147 56 147 57 147 58 147 59 147 60 147 61 147 62 147 63 147 64 147 65 147 66 147 67 147 68 147 69 147 70 147 71 147 72 147 73 147 74 147 75 147 76 147 77 147 78 147 79 147 80 147 81 147 82 147 83 147 84 147 85 147 86 147 87 147 88 147 89 147 90 147 91 147 92 147 93 147 94 147 95 147 96 147 97 147 98 147 99 147 100 147 101 147 102 147 103 147 104 147 105 147 106 147 107 147 108 147 109 147 110 147 111 147 112 147 113 147 114 147 115 147 116 147 117 147 118 147 119 147 120 147 121 147 122 147 123 147 124 147 125 147 126 147 127 147 128 147 129 147 130 147 131 147 132 147 133 147 134 147 135 147 136 147 137 147 138 147 139 147 140 147 141 147 142 147 143 147 144 147 145 147 146 147 147 147 148 147 149 147 150 147 151 147 152 147 153 147 154 147 155 147 156 147 157 147 158 147 159 147 160 147 161 147 162 147 163 147 164 147 165 147 166 147 167 147 168 147 169 147 170 147 171 147 172 147 173 147 174 147 175 147 176 147 177 147 178 147 179 147 180 147 181 147 182 147 183 147 184 147 185 147 186 147 187 147 188 147 189 147 190 147 191 147 192 147 193 147 194 147 195 147 196 147 197 147 198 147 199 147 200 147 201 147 202 147 203 147 204 147 205 147 206 147 207 147 208 147 209 147 210 147 211 147 212 147 213 147 214 147 215 147 216 147 217 147 218 147 219 147 220 147 221 147 222 147 223 147 224 147 225 147 226 147 227 147 228 147 229 147 230 147 231 147 232 147 233 147 234 147 235 147 236 147 237 147 238 147 239 147 240 147 241 147 242 147 243 147 244 147 245 147 246 147 247 147 248 147 249 147 250 147 251 147 252 147 253 147 254 147 255 147 256 147 257 147 258 147 259 147 260 147 261 147 262 147 263 147 264 147 265 147 266 147 267 147 268 147 269 147 270 147 271 147 272 147 273 147 274 147 275 147 276 147 277 147 278 147 279 147 280 147 281 147 282 147 283 147 284 147 285 147 286 147 287 147 288 147 289 147 290 147 291 147 292 147 293 147 294 147 295 147 296 147 297 147 298 147 299 148 0 148 1 148 2 148 3 148 4 148 5 148 6 148 7 148 8 148 9 148 10 148 11 148 12 148 13 148 14 148 15 148 16 148 17 148 18 148 19 148 20 148 21 148 22 148 23 148 24 148 25 148 26 148 27 148 28 148 29 148 30 148 31 148 32 148 33 148 34 148 35 148 36 148 37 148 38 148 39 148 40 148 41 148 42 148 43 148 44 148 45 148 46 148 47 148 48 148 49 148 50 148 51 148 52 148 53 148 54 148 55 148 56 148 57 148 58 148 59 148 60 148 61 148 62 148 63 148 64 148 65 148 66 148 67 148 68 148 69 148 70 148 71 148 72 148 73 148 74 148 75 148 76 148 77 148 78 148 79 148 80 148 81 148 82 148 83 148 84 148 85 148 86 148 87 148 88 148 89 148 90 148 91 148 92 148 93 148 94 148 95 148 96 148 97 148 98 148 99 148 100 148 101 148 102 148 103 148 104 148 105 148 106 148 107 148 108 148 109 148 110 148 111 148 112 148 113 148 114 148 115 148 116 148 117 148 118 148 119 148 120 148 121 148 122 148 123 148 124 148 125 148 126 148 127 148 128 148 129 148 130 148 131 148 132 148 133 148 134 148 135 148 136 148 137 148 138 148 139 148 140 148 141 148 142 148 143 148 144 148 145 148 146 148 147 148 148 148 149 148 150 148 151 148 152 148 153 148 154 148 155 148 156 148 157 148 158 148 159 148 160 148 161 148 162 148 163 148 164 148 165 148 166 148 167 148 168 148 169 148 170 148 171 148 172 148 173 148 174 148 175 148 176 148 177 148 178 148 179 148 180 148 181 148 182 148 183 148 184 148 185 148 186 148 187 148 188 148 189 148 190 148 191 148 192 148 193 148 194 148 195 148 196 148 197 148 198 148 199 148 200 148 201 148 202 148 203 148 204 148 205 148 206 148 207 148 208 148 209 148 210 148 211 148 212 148 213 148 214 148 215 148 216 148 217 148 218 148 219 148 220 148 221 148 222 148 223 148 224 148 225 148 226 148 227 148 228 148 229 148 230 148 231 148 232 148 233 148 234 148 235 148 236 148 237 148 238 148 239 148 240 148 241 148 242 148 243 148 244 148 245 148 246 148 247 148 248 148 249 148 250 148 251 148 252 148 253 148 254 148 255 148 256 148 257 148 258 148 259 148 260 148 261 148 262 148 263 148 264 148 265 148 266 148 267 148 268 148 269 148 270 148 271 148 272 148 273 148 274 148 275 148 276 148 277 148 278 148 279 148 280 148 281 148 282 148 283 148 284 148 285 148 286 148 287 148 288 148 289 148 290 148 291 148 292 148 293 148 294 148 295 148 296 148 297 148 298 148 299 149 0 149 1 149 2 149 3 149 4 149 5 149 6 149 7 149 8 149 9 149 10 149 11 149 12 149 13 149 14 149 15 149 16 149 17 149 18 149 19 149 20 149 21 149 22 149 23 149 24 149 25 149 26 149 27 149 28 149 29 149 30 149 31 149 32 149 33 149 34 149 35 149 36 149 37 149 38 149 39 149 40 149 41 149 42 149 43 149 44 149 45 149 46 149 47 149 48 149 49 149 50 149 51 149 52 149 53 149 54 149 55 149 56 149 57 149 58 149 59 149 60 149 61 149 62 149 63 149 64 149 65 149 66 149 67 149 68 149 69 149 70 149 71 149 72 149 73 149 74 149 75 149 76 149 77 149 78 149 79 149 80 149 81 149 82 149 83 149 84 149 85 149 86 149 87 149 88 149 89 149 90 149 91 149 92 149 93 149 94 149 95 149 96 149 97 149 98 149 99 149 100 149 101 149 102 149 103 149 104 149 105 149 106 149 107 149 108 149 109 149 110 149 111 149 112 149 113 149 114 149 115 149 116 149 117 149 118 149 119 149 120 149 121 149 122 149 123 149 124 149 125 149 126 149 127 149 128 149 129 149 130 149 131 149 132 149 133 149 134 149 135 149 136 149 137 149 138 149 139 149 140 149 141 149 142 149 143 149 144 149 145 149 146 149 147 149 148 149 149 149 150 149 151 149 152 149 153 149 154 149 155 149 156 149 157 149 158 149 159 149 160 149 161 149 162 149 163 149 164 149 165 149 166 149 167 149 168 149 169 149 170 149 171 149 172 149 173 149 174 149 175 149 176 149 177 149 178 149 179 149 180 149 181 149 182 149 183 149 184 149 185 149 186 149 187 149 188 149 189 149 190 149 191 149 192 149 193 149 194 149 195 149 196 149 197 149 198 149 199 149 200 149 201 149 202 149 203 149 204 149 205 149 206 149 207 149 208 149 209 149 210 149 211 149 212 149 213 149 214 149 215 149 216 149 217 149 218 149 219 149 220 149 221 149 222 149 223 149 224 149 225 149 226 149 227 149 228 149 229 149 230 149 231 149 232 149 233 149 234 149 235 149 236 149 237 149 238 149 239 149 240 149 241 149 242 149 243 149 244 149 245 149 246 149 247 149 248 149 249 149 250 149 251 149 252 149 253 149 254 149 255 149 256 149 257 149 258 149 259 149 260 149 261 149 262 149 263 149 264 149 265 149 266 149 267 149 268 149 269 149 270 149 271 149 272 149 273 149 274 149 275 149 276 149 277 149 278 149 279 149 280 149 281 149 282 149 283 149 284 149 285 149 286 149 287 149 288 149 289 149 290 149 291 149 292 149 293 149 294 149 295 149 296 149 297 149 298 149 299 150 0 150 1 150 2 150 3 150 4 150 5 150 6 150 7 150 8 150 9 150 10 150 11 150 12 150 13 150 14 150 15 150 16 150 17 150 18 150 19 150 20 150 21 150 22 150 23 150 24 150 25 150 26 150 27 150 28 150 29 150 30 150 31 150 32 150 33 150 34 150 35 150 36 150 37 150 38 150 39 150 40 150 41 150 42 150 43 150 44 150 45 150 46 150 47 150 48 150 49 150 50 150 51 150 52 150 53 150 54 150 55 150 56 150 57 150 58 150 59 150 60 150 61 150 62 150 63 150 64 150 65 150 66 150 67 150 68 150 69 150 70 150 71 150 72 150 73 150 74 150 75 150 76 150 77 150 78 150 79 150 80 150 81 150 82 150 83 150 84 150 85 150 86 150 87 150 88 150 89 150 90 150 91 150 92 150 93 150 94 150 95 150 96 150 97 150 98 150 99 150 100 150 101 150 102 150 103 150 104 150 105 150 106 150 107 150 108 150 109 150 110 150 111 150 112 150 113 150 114 150 115 150 116 150 117 150 118 150 119 150 120 150 121 150 122 150 123 150 124 150 125 150 126 150 127 150 128 150 129 150 130 150 131 150 132 150 133 150 134 150 135 150 136 150 137 150 138 150 139 150 140 150 141 150 142 150 143 150 144 150 145 150 146 150 147 150 148 150 149 150 150 150 151 150 152 150 153 150 154 150 155 150 156 150 157 150 158 150 159 150 160 150 161 150 162 150 163 150 164 150 165 150 166 150 167 150 168 150 169 150 170 150 171 150 172 150 173 150 174 150 175 150 176 150 177 150 178 150 179 150 180 150 181 150 182 150 183 150 184 150 185 150 186 150 187 150 188 150 189 150 190 150 191 150 192 150 193 150 194 150 195 150 196 150 197 150 198 150 199 150 200 150 201 150 202 150 203 150 204 150 205 150 206 150 207 150 208 150 209 150 210 150 211 150 212 150 213 150 214 150 215 150 216 150 217 150 218 150 219 150 220 150 221 150 222 150 223 150 224 150 225 150 226 150 227 150 228 150 229 150 230 150 231 150 232 150 233 150 234 150 235 150 236 150 237 150 238 150 239 150 240 150 241 150 242 150 243 150 244 150 245 150 246 150 247 150 248 150 249 150 250 150 251 150 252 150 253 150 254 150 255 150 256 150 257 150 258 150 259 150 260 150 261 150 262 150 263 150 264 150 265 150 266 150 267 150 268 150 269 150 270 150 271 150 272 150 273 150 274 150 275 150 276 150 277 150 278 150 279 150 280 150 281 150 282 150 283 150 284 150 285 150 286 150 287 150 288 150 289 150 290 150 291 150 292 150 293 150 294 150 295 150 296 150 297 150 298 150 299 151 0 151 1 151 2 151 3 151 4 151 5 151 6 151 7 151 8 151 9 151 10 151 11 151 12 151 13 151 14 151 15 151 16 151 17 151 18 151 19 151 20 151 21 151 22 151 23 151 24 151 25 151 26 151 27 151 28 151 29 151 30 151 31 151 32 151 33 151 34 151 35 151 36 151 37 151 38 151 39 151 40 151 41 151 42 151 43 151 44 151 45 151 46 151 47 151 48 151 49 151 50 151 51 151 52 151 53 151 54 151 55 151 56 151 57 151 58 151 59 151 60 151 61 151 62 151 63 151 64 151 65 151 66 151 67 151 68 151 69 151 70 151 71 151 72 151 73 151 74 151 75 151 76 151 77 151 78 151 79 151 80 151 81 151 82 151 83 151 84 151 85 151 86 151 87 151 88 151 89 151 90 151 91 151 92 151 93 151 94 151 95 151 96 151 97 151 98 151 99 151 100 151 101 151 102 151 103 151 104 151 105 151 106 151 107 151 108 151 109 151 110 151 111 151 112 151 113 151 114 151 115 151 116 151 117 151 118 151 119 151 120 151 121 151 122 151 123 151 124 151 125 151 126 151 127 151 128 151 129 151 130 151 131 151 132 151 133 151 134 151 135 151 136 151 137 151 138 151 139 151 140 151 141 151 142 151 143 151 144 151 145 151 146 151 147 151 148 151 149 151 150 151 151 151 152 151 153 151 154 151 155 151 156 151 157 151 158 151 159 151 160 151 161 151 162 151 163 151 164 151 165 151 166 151 167 151 168 151 169 151 170 151 171 151 172 151 173 151 174 151 175 151 176 151 177 151 178 151 179 151 180 151 181 151 182 151 183 151 184 151 185 151 186 151 187 151 188 151 189 151 190 151 191 151 192 151 193 151 194 151 195 151 196 151 197 151 198 151 199 151 200 151 201 151 202 151 203 151 204 151 205 151 206 151 207 151 208 151 209 151 210 151 211 151 212 151 213 151 214 151 215 151 216 151 217 151 218 151 219 151 220 151 221 151 222 151 223 151 224 151 225 151 226 151 227 151 228 151 229 151 230 151 231 151 232 151 233 151 234 151 235 151 236 151 237 151 238 151 239 151 240 151 241 151 242 151 243 151 244 151 245 151 246 151 . KeyboardInterrupt Traceback (most recent call last) /mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2023-03-22-DS-space_time_complexity.ipynb Cell 22 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; for i in numbers: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; for j in numbers: -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(i,j) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File ~/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . ![Example of Matrix Multiplication] . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . ![A visualization of calculating the fibonacci sequence] . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) #print(fibonacci(30)) print(fibonacci(40)) . 102334155 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.7330741882324219 seconds 9227465 Time taken: 3.617663860321045 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. . | Why is time and space complexity important when choosing an algorithm? . Space and time complexity are important because they dictate how long it takes a program to run, and how much space it takes up. The more space and time the algorithm requires, the less efficient the code is. It also burns more energy. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? No, an algorithm should be used based on its fit to a problem. Usually, it&#39;s best to use a constant algorithm so the time it takes to run is predictable, but sometimes, an exponential algorithm is the faster option, as it may take a different time to complete anyways. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? Algorithms that have to calculate large amounts, or with lots of code/steps, tend to take longer and have more space/time complexity. Alternatively, shorter algorithms have shorter space/time complexity, and don&#39;t take as long to execute. | . | . Complete the Time and Space Complexity analysis questions linked below. Practice . What is the time, and space complexity of the following code: . O(N * M) time, O(1) space | O(N + M) time, O(N + M) space | O(N + M) time, O(1) space | O(N * M) time, O(N + M) space | | Output: . 3. O(N + M) time, O(1) space; the code loops on O(N) first, then O(M), making the time complexity O(N+M), and the space complexity would be constant because it doesn&#39;t depend on the size of the input, making it O(1). . What is the time complexity of the following code: . O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | | Output: . 4. O(N*N); the code runs 0 times, this is because when a = 0, it causes the whole function to equal 0, regardless of what i and j are. . What is the time complexity of the following code: . O(n) | O(N log N) | O(n^2) | O(n^2Logn) | | Output: . 2. O(nLogn); the code runs to make j double until it&#39;s less than or equal to n, so a number that is less than or equal to n would be logn. . What does it mean when we say that an algorithm X is asymptotically more efficient than Y? . X will always be a better choice for small inputs | X will always be a better choice for large inputs | Y will always be a better choice for small inputs | X will always be a better choice for all inputs | | Output: . 2. X will always be a better choice for large inputs; an algorithm of x is asymptotically better than Y if the runtime for X is smaller than Y, and if all input sizes of n are larger than 0. . What is the time complexity of the following code: . O(N) | O(Sqrt(N)) | O(N / 2) | O(log N) | | Output: . 4. O(log N), need to find the smallest value of X. . Which of the following best describes the useful criterion for comparing the efficiency of algorithms? . Time | Memory | Both of the above | None of the above | | Answer: . 3. Both of the above, the efficiency of an algorithm depends on its time and memory, because an algorithm that takes less time and memory for a large input is more efficient. . How is time complexity measured? . By counting the number of algorithms in an algorithm. | By counting the number of primitive operations performed by the algorithm on a given input size. | By counting the size of data input to the algorithm. | None of the above | | Answer: . 2. By counting the number of primitive operations performed by the algorithm on a given input size. . What will be the time complexity of the following code? . O(n) | O(k) | O(logkn) | O(lognk) | | Output: . 3. O(logkn), the loop loops kn-1 times, so when making it a log it changes to logkn. . What will be the time complexity of the following code? . n | (n+1) | n(n-1) | n(n+1) | | Output: . 3. n(n-1), the first loop will run n times and the other is run for 1 under n times, and for 4 the loop is run more than once, so the answer would be 3. . Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A. . True | False | | Answer: . 2. False, because the notation gives an asymptotic comparison in the running time for the algorithms, and for n&lt;no, algorithm A might run faster than B. .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # This is an object, it basically has the same basic functionality of an object in OOP programming # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$7nXwTw89JYJ0Tq4q$7b72166aa6d1a79ee9234a1fc44434d41dc2ac50597f29c9e1b947ee2ae3fa98&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$PSBa6tiyWHVBli2L$c47cb26af8f96693797908f42524297d47b7fddb613549ffdf83316b98809529&#39;, &#39;2023-03-17&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$NyuUK2fH9I2ebLv4$ac055e9f0a04ca8c910ed0e9b5ebe0fbee816a3f9e228f859f7d2b70f3b21503&#39;, &#39;2023-03-17&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$VNrYfcx0z4BFMVdg$e1fab9b785fab9a81804de8d98fc37a47ab1b8b3ad1b7bdfabd52db88d325d92&#39;, &#39;2023-03-17&#39;) (7, &#39;Mao Isara&#39;, &#39;mao&#39;, &#39;sha256$tlvO5vfRd5VCYEog$5a1661f53d0b59552591c856c1a5d5c79782eded75090e8cd63be66af4953629&#39;, &#39;2000-02-20&#39;) (8, &#39;Ritsu Sakuma&#39;, &#39;ritsu&#39;, &#39;ahdijokad&#39;, &#39;2000-02-20&#39;) (9, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$Z65S70Y73oKZZU0Y$4d4e4e3f6a8de5ee857b1f8cb84ec5da0b8c62f930bc9f99acc8822675f5b2e1&#39;, &#39;1920-10-21&#39;) (10, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$RSlVmlDnsnrnCRlp$efc2c4afb8edfae3cff3ddd17cba3e33514b52eeac85dc9e4297b6602793778b&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Inserts data for name, uid, password, and date of birth, &#39;(?, ?, ?, ?)&#39; is the amount of rows/items there are # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? Yes, different procedures are called to run the program. | . | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. Yes, there is data abstraction when displaying the database, it only shows the file name and not the information in the file, when updating. | . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . import sqlite3 from sqlite3 import Error import datetime def create_connection(db_file): &quot;&quot;&quot; create a database connection to the SQLite database specified by db_file :param db_file: database file :return: Connection object or None &quot;&quot;&quot; conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): &quot;&quot;&quot; create a table from the create_table_sql statement :param conn: Connection object :param create_table_sql: a CREATE TABLE statement :return: &quot;&quot;&quot; try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &#39;pythonsqlite.db&#39; # sends command to sqlite, tells sqlite to create a table if one does not already exist sql_create_people_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS people ( socSecNum integer PRIMARY KEY, name text NOT NULL, birth_date text, age integer ); &quot;&quot;&quot; # create a database connection conn = create_connection(database) # create tables if conn is not None: # create projects table create_table(conn, sql_create_people_table) else: print(&quot;Error! cannot create the database connection.&quot;) current_datetime=datetime.datetime.now() ssn = int(current_datetime.strftime(&quot;%f%M%S&quot;)) # Uses datetime to randomly generate a social security num names = [&#39;Mayoi Ayase&#39;, &#39;Yuzuru Fushimi&#39;] # Names that are added into the table with conn: # create a new project for i in range(len(names)): # loops data adding n = ssn + i person1 = (str(n), names[i], &#39;2004-06-06&#39;, &#39;18&#39;) # ands the date of birth and age person_id = create_person(conn, person1) print(&#39;Created person &#39;, person_id) #person2 = (&#39;7841956&#39;, &#39;Yuzuru Fushimi&#39;, &#39;2004-08-18&#39;, &#39;18&#39;) #person_id = create_person(conn, person2) # create person #create_person(conn, person1) # create_person(conn, person2) def create_person(conn, person): # creates a new person &quot;&quot;&quot; Create a new person into the people table :param conn: :param people: :return: person id &quot;&quot;&quot; sql = &#39;&#39;&#39; INSERT INTO people(socSecNum, name, birth_date, age) VALUES(?,?,?,?) &#39;&#39;&#39; cur = conn.cursor() # connects to cursor cur.execute(sql, person) conn.commit() return cur.lastrowid # puts data into the table if __name__ == &#39;__main__&#39;: main() . Created person 6638940109 Created person 6638940110 . Answers, Notes, etc. . What is a connection object? After you google it, what do you think it does? Connection objects are unique sessions with a datasource. These make it so that each action is a unique instance. | . | Same for cursor object? The object used to make a connection between the code and the SQLite database, and send commands to it. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? The objects are used to read, update, delete, and create other items. | . | Is &quot;results&quot; an object? How do you know? . Results has data in it, and different types/attributes. | . | Compare create() in both SQL lessons. What is better or worse in the two implementations? . Object-oriented programming is better, because it takes less code, and is therefore more efficient. | . | Explain purpose of SQL INSERT. Is this the same as User init? SQL insert inserts new data into the database. | . | What does the hacked part do? The &#39;hacked&#39; part of the procedure changes the password, if 2 characters or under, to &#39;hacked&#39;. | . | Explain try/except, when would except occur? Try/Except are much like &#39;if/else&#39;, except they prompt the code to take alternative actions if the specifications are not met, unlike elif statements. | . | What code seems to be repeated in each of these examples to point, why is it repeated? All of the code seems to repeat &#39;connect&#39;, &#39;cursor&#39;, and &#39;results&#39;, because each function is necessary for each code block to run different functions. | . | Is DELETE a dangerous operation? Why? Deleting data makes it unrecoverable, and it cannot be retrieved again. | . | What is the &quot;f&quot; and {uid} do? UID is the user ID, which allows for the user to be identified in the program. | . | Why does the menu repeat? The menu repeats because it links each code cell to each other to create options for the user. | . | Could you refactor this menu? Make it work with a List? Yes, the code can be modified so that each command is part of a list, and it can switch each word to initiate the code sequences if they are part of that list. | . | .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object - Backends with APIs | SQLAlchemy object - Sqlite tables | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . class User purpose - The object assigned to the user&#39;s purpose | db.Model inheritance - A parameter of class user, it is being inherited; object-oriented programming | init method - The method used to initialize the database | @property, @.setter - Getter and setter; gets, updates, and reads data between a frontend/backend&lt;/li&gt; additional methods - object vs integrational programming | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object creates the tables/database according to the information input by the user | . | User Object Constructors Constructs a User as an object, based on the input data | . | Try / Except Tells program to try a command, skips to except command if try is not met (a lot like elif) | . | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | Finds user id by using attributes | Runs a check to make sure the id is the same as what is input | Object used to find other object | . user.password | creates a password and checks it to make sure it exists | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except Finds user based on the number in the UID, ensures that the user is there or does a pass if it isn&#39;t | . | user = User(...) The user information, initializes user so it can be pulled up | . | user.dob and try/except If a birthdate is input, it runs try, if no birthdate is input, it runs except | . | user.create() and try/except creates user based on the information that is input | . | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 10, &#39;name&#39;: &#39;test user&#39;, &#39;uid&#39;: &#39;test&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | Searches for users from the sqlite.db | . json_ready assignment | The file used for storing the data | .json files can be converted between different coding languages | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Mao Isara&#39;, &#39;uid&#39;: &#39;mao&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;Ritsu Sakuma&#39;, &#39;uid&#39;: &#39;ritsu&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;mao&#39;, &#39;uid&#39;: &#39;7&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23}, {&#39;id&#39;: 10, &#39;name&#39;: &#39;test user&#39;, &#39;uid&#39;: &#39;test&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . def update(): uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) if (user is None): print(&quot;User &quot;, uid, &quot; NOT found n&quot;) return else: print(&quot;User &quot;, uid, &quot; found n&quot;, user.read()) newName = input(&quot;Update your name or click enter to move to the 1next item.&quot;) if newName != &quot;&quot;: user.name = newName print(&quot;New name cannot be the old name.&quot;) else: pass newPassword = input(&quot;Update your password or click enter to move to the next item.&quot;) if newPassword != &quot;&quot;: user.password = newPassword print(&quot;New password cannot be the old password.&quot;) else: pass newDob = input(&quot;Update your date of birth using &#39;YYYY-MM-DD&#39;or click enter to move to the next item.&quot;) if newDob != &quot;&quot;: user.dob = newDob print(&quot;New date of birth cannot be the old date of birth.&quot;) else: pass # write object to database with app.app_context(): try: object = user.update() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) update() . User 7 found {&#39;id&#39;: 9, &#39;name&#39;: &#39;mao&#39;, &#39;uid&#39;: &#39;7&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23} New name cannot be the old name. Created {&#39;id&#39;: 9, &#39;name&#39;: &#39;Mao Isara&#39;, &#39;uid&#39;: &#39;7&#39;, &#39;dob&#39;: &#39;02-20-2000&#39;, &#39;age&#39;: 23} . def delete(): uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) except: print(&quot;User not found.&quot;) with app.app_context(): try: object = user.delete() print(&quot;User deleted.&quot;) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) if object == None: print(&quot;User deleted successfully.&quot;) else: print(&quot;Error&quot;) delete() . Found {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102} User deleted. User deleted successfully. . Answers, Notes, etc. . class User purpose - The object assigned to the user&#39;s purpose | db.Model inheritance - A parameter of class user, it is being inherited; object-oriented programming | init method - The method used to initialize the database | @property, @.setter - Getter and setter; gets, updates, and reads data between a frontend/backend&lt;/li&gt; additional methods - object vs integrational programming | &lt;/ul&gt; What is a database schema? A blueprint that describes how a database is organized. | . | What is the purpose of identity Column in SQL database? Differentiation between different columns | . | What is the purpose of a primary key in SQL database? The ID of the database; how the table can be accessed. | . | What are the Data Types in SQL table? Integers, strings, bullions, images. | . | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | . | .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd # always put this at the top of the code when pandas is needed . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # - Missing data or words (where the year in school is supposed to be: Junior and 9th grade), because they are not integers # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # - It is good to clean data when incompatible data can cause the program to crash (such as a string where an integer should be, it may mess up a calculation). . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) # prints the max and min of the dataset . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary # data is stored outside of a file (such as a .json, rather than in it) dict = { &quot;calories&quot;: [420, 380, 390, 450], &quot;duration&quot;: [50, 40, 45, 60] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) # prints the diff rows . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 450 60 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 450 60 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) # prints multiple vs 1 row; use row name . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) # imports/retrieves dataset from files, displays column . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; # uses a url to retrieve the dataset fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7352941176470589 LogisticRegression Accuracy: 0.788235294117647 . /home/keira/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( . import pandas as pd dfRandom = pd.read_json(&#39;files/random.json&#39;) print(dfRandom) # created my own .json file, because there is nothing that can be averaged/etc. on my project file. print(&#39;Min--&#39;) print(dfRandom[dfRandom.Age == dfRandom.Age.min()]) print(&#39;--Max--&#39;) print(dfRandom[dfRandom.Age == dfRandom.Age.max()]) print(&#39;--Median--&#39;) print(dfRandom[dfRandom.Age == dfRandom.Age.median()]) print(&#39;--Mean--&#39;) print(dfRandom[dfRandom.Age == dfRandom.Age.mean()]) # print(dfRandom.query(&quot;Age == 10&quot;).mean()) print((dfRandom[[&#39;Jobs&#39;,&#39;Number of Kids&#39;]].to_string(index=False))) . Age Jobs Number of Kids 0 54 2 3 1 65 1 4 2 76 1 2 3 98 3 3 4 65 2 4 5 34 1 3 6 23 4 2 7 54 2 3 8 87 1 3 9 91 1 2 10 45 1 3 11 76 2 2 Min-- Age Jobs Number of Kids 6 23 4 2 --Max-- Age Jobs Number of Kids 3 98 3 3 --Median-- Age Jobs Number of Kids 1 65 1 4 4 65 2 4 --Mean-- Empty DataFrame Columns: [Age, Jobs, Number of Kids] Index: [] Jobs Number of Kids 2 3 1 4 1 2 3 3 2 4 1 3 4 2 2 3 1 3 1 2 1 3 2 2 . 2.3 Notes/Etc. . Invalid, inaccurate, or missing data must be cleaned from the table | Data can be filled in if it is missing | Data should also be cleaned if incorrect data/different types of data (such as a string instead of an integer) could possibly break the code | Outliers should also be taken out | Can use steps before the data is put into the database to prevent incorrect data (ie: only allow integers so no strings can be put into the data) | Python dictionaries can be put into dataframes | . College Board Practice Quiz: . Corrections: . For the first question, I should have answered B instead of A. I thought that a lossless compression would keep the information the same, equating it to keeping the information secure. The answer is actually B, because lossless compression ensures that the data can be reconstructed. . | For the second question, I got confised and assumed that compression was done for both lossy and lossless files, but it was only done for lossless compressions, not both. . |",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Quiz Corrections (3/24)",
            "content": "Quiz Corrections (3/24) . . Question 11 . I answered for the money made from food and drink sales, but the answer should have been average ticket price, because that accounts for each person who came to the concert. I honestly don’t know why I answered this I may have missclicked or assumed that each person decided to get food, which would then present a good view on how many people actually attended the concert. . Question 20 . For this question, I selected A, but my answer should have been B. This is because the expression cannot be equal to both ‘lo’ and ‘med’ cannot be selected at the same time, and it would cause the expression to always be false. Therefore, it would have to be ‘or’ instead of ‘and’. . Question 21 . I chose B and C for this question, and while B was correct, C was not. Instead of C, I should have selected D, because the sequence of steps does not remove any entries with an unknown year, so the entry in the first row of the spreadsheet will have a year value of -1, which would not allow the desired entry. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/03/07/markdown-31.html",
            "relUrl": "/post/2023/03/07/markdown-31.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Test Corrections (3/7)",
            "content": "Test Corrections (3/7) . . Question 19 . For this question, I answered that ‘Only elements that appear in inputList1 but not in inputList2’, but the answer was ‘Only elements that appear in both inputList1 and inputList2’. This is because the list is searched for elements that appear in both lists, not just one list, which I skipped over by accident. . Question 22 . For this question, I didn’t think either grid would make the arrow move correctly, but I think I missinterpreted the way the arrow moves. The answer would have been A, because the sequence the arrow moves in would make it correct. . Question 29 . I answered with 3 true’s, but the answer should have been 3 false’s. This is because A would have been false, and the false value would have made all 3 print values false. I missinterpreted it to set each value to ‘true’ instead of ‘false’, and ignored that the multiple trues would set it to false. . Question 33 . I chose ‘repeat 4 times’, but the answer would be 2 times instead. I miscounted the rotations, so that’s why my answer was off. . Question 38 . For this question, I thought the correct answer would have (num &lt; 0 ) displaying negative would be the same, and I was correct there, but the order of the function is wrong. (num = 0) would have been in a different position than what I selected, as using the parameter num = 0 would allow for something to be assigned to this variable beforehand. . Question 39 . I thought that adding a line towards the end of the code, and using N, would make the count accurate, but adding a line to count between 6 and 7 (where the movement actually is) would make the count go up correctly. This is because the count should count at the end of the movement, not the end of the turn, because it could count the turn as a movement and make the count go up wrong. . Question 44 . I wasn’t quite sure how the function would exactly look when printed, so I got a bit confused as to how it would actually look printed. B would actually be the right answer. . Questoin 45 . I selected one correct answer, but the answer for A was incorrect. This is because procedral abstraction is supposed to allow a larger block of code to be named, so it is easier to access. . Question 50 . I wasn’t sure which algorithm would run the shortest, so I assumed that at least B would work. However, A and D are the shortest, because they can run more steps for the same size list. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/03/07/markdown-30.html",
            "relUrl": "/post/2023/03/07/markdown-30.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? ls, cd (filename) are both commands that can be used in the terminal to access files. | What are the command you use in Windows terminal to access files? cd, dir, and mkdir are some of the commands that can be used in the Windows terminal to access files. | What are some of the major differences? Both are similar, but some of the major differences include the commands themselves, which do different things and access different parts of the device. | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;ghtop_images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Keira&quot;, &#39;label&#39;: &quot;Smiley face&quot;, &#39;file&#39;: &quot;smiley face.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;ghtop_images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Keira&quot;, &#39;label&#39;: &quot;Smiley face&quot;, &#39;file&#39;: &quot;smiley face.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Smiley face Keira PNG RGB Original size: (740, 593) Scaled size: (320, 256) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # This is basically the same as backend/frontend type coding for the project/server class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;ghtop_images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Keira&quot;, &#39;label&#39;: &quot;Smiley face&quot;, &#39;file&#39;: &quot;smiley face.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- Smiley face Keira smiley face.png PNG RGB Original size: (740, 593) Scaled size: (320, 256) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . Notes, Questions/Answers, and etc. . Lossy - Losing data, data that gets lost from the original and cannot be fully recovered; discards some of the image data to achieve smaller file sizes | Lossless - Some data is lost, restores and recovers data; maintain all the original image data but may result in larger file sizes | Grayscale takes the average of the pixel color values and divides them by 3, making the image gray | The metadata is the information about the image, such as the location the image was taken (if it is a picture) or who the creator is | Object-oriented programming using data structures can also be used to display images (as in, frontend/backend with get, update, pull, delete, etc.), this basically pulls the image data from the backend to the frontend | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab - There are different types of image files such as PNG, JPEG, BMP, TIFF, etc. Each file type has its own compression method, level of quality, and compatibility with different platforms. | Size, height and width, number of pixels - These parameters describe the dimensions and number of pixels in an image. More pixels usually mean higher resolution, but also larger file sizes. Size is the amount of disk space an image takes up. Height and width refer to the number of pixels in the vertical and horizontal directions, respectively. | Visual perception, lossy compression - Data compression is a technique used to reduce the size of image files. Lossy compression algorithms discard some of the image data to achieve smaller file sizes. Lossless compression algorithms maintain all the original image data but may result in larger file sizes. Visual perception of an image can be influenced by the amount of pixels in it and how it is compressed. | . What are commands you use in terminal to access files? ls, cd (filename) are both commands that can be used in the terminal to access files. . What are the command you use in Windows terminal to access files? cd, dir, and mkdir are some of the commands that can be used in the Windows terminal to access files. . What are some of the major differences? Both are similar, but some of the major differences include the commands themselves, which do different things and access different parts of the device. . Why is path a big deal when working with images? If the path is wrong, the code won&#39;t be able to locate the image, because it can&#39;t find the right pathway. . How does the meta data source and label relate to Unit 5 topics? Metadata can be used to protect user info by hiding things such as IP addresses to protect user privacy. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython is a command-line shell that is used for Python, and it provides more features. For notebooks, IPython is used as the default kernal to execute cells. For Pandas, it allows the user to view/manipulate large datasets more easily, and for images it allows for images to be displayed in the program. . Translate first 3 letters of your name to Base64. (See below) S2Vp . Where have you been a consumer of buffering? I have been a consumer of buffering in websites that have lots of popups or parts to them. . From your consumer experience, what effects have you experienced from buffering? It&#39;s much harder to have a good consumer experience when things buffer for too long, as it&#39;s difficult to do things on the site. . How do these effects apply to images? When images don&#39;t load, it&#39;s difficult to see what you&#39;re buying, so you&#39;ll have difficulting deciding what to buy. . Does this code seem like a series of steps are being performed? Yes, multiple parts are needed for a final image to be produced. . Describe Grey Scale algorithm in English or Pseudo code? The grayscale algorithm takes the pixels (the numbers for the RGBs) and divides them so that the saturation decreases. The pixels are then averaged to create the full image. . Describe scale image? What is before and after on pixels in three images? A scale image changes the size of an image. The pixels get removed, so the image quality decreases. . Is scale image a type of compression? If so, line it up with College Board terms described? Yes, it can be related to lossy compression, where some information is lost in the process of compression, but the overall image remains recognizable. . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these: . PIL - (Python Imaging Library) A library in Python used for manipulating images. . numpy - (Numerical Python) A Python library that supports large arrays and matrices, and mathmatical functions. . base64 - A binary-to-text encoding scheme that represents binary data in an ASCII string format. . Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. . Lossy . This image is more likely to result in lossy data compression, beacuse it&#39;s an image that has very little detail in it, and it is very simple. Lossy data compression may result in the image losing some of its detail, and making the image much lower quality as a result. | . . Lossless . This image is more likely to result in lossless data compression, because the image is highly realistic and has many details in it, which is difficult for lossless data compression to keep up with. | . . College Board Practice Quiz: . Corrections: . For the first question, I should have answered B instead of A. I thought that a lossless compression would keep the information the same, equating it to keeping the information secure. The answer is actually B, because lossless compression ensures that the data can be reconstructed. . | For the second question, I got confised and assumed that compression was done for both lossy and lossless files, but it was only done for lossless compressions, not both. . | import base64 name = &quot;Kei&quot; translation = base64.b64encode(name.encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;) print(translation) . S2Vp . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from PIL import Image, ImageFilter from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;ghtop_images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Keira&quot;, &#39;label&#39;: &quot;Smiley face&quot;, &#39;file&#39;: &quot;smiley face.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 200 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;redShift_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + 200) # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;redShift_data&#39;].append((average, pixel[1], pixel[2], pixel[3])) # PNG format else: image[&#39;redShift_data&#39;].append((average, pixel[1], pixel[2])) # end for loop for pixels img.putdata(image[&#39;redShift_data&#39;]) image[&#39;html_redShift&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def blurImage(image): img = image[&#39;pil&#39;] #Opens existing image return img.filter(ImageFilter.BoxBlur(5)) # blurs the image that was input # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; redshifted image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_redShift&#39;])) print(&quot; blurred image -&quot;) blur = blurImage(image) display(blur) print() . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (200, 146) -- original image -- . redshifted image - . blurred image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (200, 150) -- original image -- . redshifted image - . blurred image - . - meta data -- Smiley face Keira PNG RGB Original size: (740, 593) Scaled size: (200, 160) -- original image -- . redshifted image - . blurred image - . .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Night at the Museum (11/3)",
            "content": "Night at the Museum 2/16 . . One of the projects I saw at Night at the Museum was from Jiya, Ananya, Noor, and Shruthi’s group. Their project was a food-themed website, like my group, so I was curious as to how they created their project differently as compared to my group’s. One of the features on the website was a recipe finder that could find recipes based on the input time of day and the cuisine type. It would pull up a link to a recipe based on that. There was also a quiz function, which allowed the user to select answers on a quiz, then submit them for a score and recipe based off that score. The score could also be input into a leaderboard by the user. . Some of the other projects I saw were from classes like 3D Animation and Ceramics. There were lots of interesting projects, and seeing other students make the projects I did when I was younger in 3D animation was fun. I really enjoyed the ceramic creations, because it’s always fun to see what creative things people can do when they make 3D objects, since making things with clay can be difficult and time consuming. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/02/17/markdown-29.html",
            "relUrl": "/post/2023/02/17/markdown-29.html",
            "date": " • Feb 17, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Team Review Ticket (Presentation Notes)",
            "content": "Team Review Ticket . Notes from Presentation: . Slideshow with basic visuals | Plans for features on a slide | Full stack features and designs Examples of frontend: | Info about features and usage of website | Viewable database | All pages should have cross compatibility | Separate purpose and function | Control flow for programs | Flow charts of frontend and backend | Timeline for development process | Manifesto of development beliefs | . Part of my own notes/recollection of the presentations: . Many groups did projects based around games or food, with one of the presentations being about a Cat Cafe website | Some groups guided through the project’s basic structure, some included frontend images and some did not | Most groups did not go into backend details, although mine did | One other group had a website very similar to my groups, as its subject matter was food | However, their website was based on finding recipes for people looking for healthy food to eat, whereas ours was more generalized | Many groups had their website structured or parodied off Cool Math Games, and each person in the group would be responsible for creating one game for the website | Some groups linked their games together using a leaderboard, which would rank players based off the scores they received in the games they played. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/30/markdown-28.html",
            "relUrl": "/post/2023/01/30/markdown-28.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "MCQ Practice Corrections",
            "content": "MCQ Practice Corrections . Here are the corrections for my practice MCQ. . Question Number What I Answered What I Got Wrong . 12 | My answer was (A), onFloor1 AND callTo2 + onFloor2 AND callTo1, because I thought calling to floor 2 while the elevator is on 1 would get it to move. | It would be (B), because it uses ‘OR’ instead of ‘AND’, both commans are not required to be correct for the elevator to move. | . 14 | My answer was (D), there is no possible value of A that will cause the circuit to be true. I thought that the false input would make the program false. | The answer would be (A), the input for A would be true, because the input of A would have to be true for the program to function correctly. | . 17 | My answers were (A), and (B). I thought (B) would give the same end result as (A), because they both ended at result (true). | The answer would be (A) and (D), because it marks the results as false, which is the same as the original marking the answer as ‘not true’. | . 21 | My answer was (B), 6. I thought that the program would simply add the numbers and make the answer into 6. | The answer would be (D), an infinite loopm, because the program would actually go in an infinite loop, because the stopping condition cannot be met. | . 27 | My answer was (C), because I thought the arrow would move in the right direction if n + 1 was used. | The answer would have been (D), because the n + 1 should have been added at the end of the cycle to get it to move in the right direction, not before the algorithm. | . 28 | My answers were (B) and (C), because I thought these combinations would get the arrow to move in the correct direction. | My answers should have been (A) and (C), because A would have done much the same as (C), just in a slightly different format. | . 30 | My answers were (A) and (C), where (C) was correct and (A) was not. I thought (A) was very similar to (C) in how it functioned, which is why I chose it. | My answers should have been (B) and (C), because (B) was very similar to (C), but called the function at the very end instead of the beginning. | . 43 | My answer was (A), thought I’m not exactly sure why. | My answer should have been (C), as no simulation can take every single possible factor into account when running. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/30/markdown-27.html",
            "relUrl": "/post/2023/01/30/markdown-27.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Project Blog",
            "content": "Project Blog . I’m not 100% sure what these mean, so I will try my best. . Each individual performs starts “pre-view” outline/write-up of materials required for College Board. . Number on Rubric Category For My Project . 1 | Program Purpose and Function | The program’s main purpose is to provide recipes to the user for convenience. The program functions as a simple tool for calculating recipe portions as well. | . 2 | Data Abstraction | My project will use an API for recipe storing, as well as lists to categorize and store recipes. | . 3 | Managing Complexity | Lists will be used to store the recipe inputs, and what users may input into the portions. | . 4 | Procedural Abstraction | The addRecipe procedure will be used to add recipes to the program (API), and the procedure portionCalc will be used to calculate how much of each ingredient is needed for the recipe, depending on user input. | . 5 | Algorithm Implementation | My program will call each respective algorithm when commanded to by the buttons on the frontend page. | . 6 | Testing | For testing, I will add recipes and use the calculator as normal, and ensure everything is functioning correctly on the backend. | . Describe portion of Project you will use for Create Performance task. For the project, I will use the portion calculator and recipe adding/deleting system for the Create Performance task. . Describe code plan as it is required for CB. As for the code plan, I intend to implement a backend using flask, and connecting it to the frontend, which will be the website. The backend will house the APIs necessary for the program to pull data from, and store/add data to. On the frontend, the algorithms and procedures will be housed and called through the use if input text boxes and buttons. (Not quite sure how to answer this again, I hope this is alright). . Consider what will be demonstrated in video, aka video plan. As for the video of the program, I would show how the program works. First I would go to the top of the page to show the recipes, then I would click on a recipe to pull it up in the program. After the recipe has been pulled up, I would type in how many portions of the recipe I want, and then submit it to the program to calculate how much of each ingredient is needed. I will also demonstrate the frontend and backend create/delete commands, and explain that the delete command is not accessable in the frontend because I do not want users deleting the recipes on the website. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/30/markdown-26.html",
            "relUrl": "/post/2023/01/30/markdown-26.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "5.1 - 5.6 Blog Post",
            "content": "5.1 - 5.6 Blog Post . 5.1 Blog Post Reflection . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing. . Type of Computer Feature Beneficial Effects Harmful Effects . Streaming Sites (Netflix, Hulu, etc.) | Easy to access videos, good entertainment, convenient hub for videos and movies | May cost money to get access, sometimes limits account usage, can be addicting or time consuming. | . Social Media (Twitter, Instagram, etc.) | Easy to connect with people from around the world, can get news quickly, fun to see what other people are doing | Can be addicting, can be harmful to your mental health and self esteem, people may bully you | . Wiki websites (Wikipedia, Wikihow, etc.) | Good for finding ‘how-tos’, good source of information for essays, archieves information for future use | May have false information, can always be deleted, may be missing information if no one decides to add it | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? While it does not affect me much personally, there are plenty of cases where people, especially teens, are harmed by the internet because of negative comments on them or their appearance. . 5.2 Blog Post Reflection – Digital Empowerment . How does someone empower themself in a digital world? A person can empower themselves in a digital world by taking steps to protect themselves from possible threats in the digital world. This can mean protecting your information and not posting it on the internet, or by using other services, such as a VPN, to protect your information. . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. Those who are empowered could help by guiding or protecting those who aren’t. They could also teach those who aren’t empowered to become empowered themselves. For example, I could teach someone how to program or to be more confident in themselves and their programming skills, if they believe they are not good at what they are doing. (Not quite sure if this was the right way to answer, but I tried my best). . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? Yes, things such as paper and red tape do block digital empowerment. Such barriers can be seen in financial differences, where a person cannot acquire a device or otherwise because of financial constraints. This is both prevelent in Del Norte, and outside of it, as this problem can be seen around the world. . Other Questions . Think of three beneficial effects of your projects based on 5.1 Unit. Ease in finding recipes, calculating proportions, and being able to add recipes are all benefits of my project. . Think of a potential harmful effect of your project. A harmful effect of my project could be that it could make users reliant on it for recipe information. (Not really sure if there are any downsides). . Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? The pros of an internet blocker include making sure a person doesn’t see something that is not appropriate for them to see, and keeps them from installing things that could harm a person’s device or other devices at the school. One of the main cons is that these blockers also prevents students from accessing some resources, or installing/using software that they may need, especially in classes such as computer science. . What concerns do you have personally about the digital divide? For yourself or for others. Personally, I’m concerned with how the world will go forward. While those with devices are at an advantage, that often leaves people without access or the ability to purchase devices behind. Since devices are starting to become mandatory for purchases or even for education, it could place those without them at an extreme disadvantage. I’m not too worried about myself, but people without devices struggle a lot, and that is worrisome. . . 5.3 Questions . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. Intentional or Purposeful bias: Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? Virtual assistants may have female voices because women are often seen in a ‘helpful’/’caregiving’ type role, which stereotypically happens to be the role of women. However, this may not have purposeful, as simply choosing the voice that sounded the best would have been the most likely option. This can be a good business move, as it panders to customers when the developers try to choose what they believe would be the most appealing to customers. This may not be corrected, but only if this is truly the case, and the female voice was not chosen because women are seen in service positions only. . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) Algorithms on websites such as Amazon are often used to influence customer purchases. For example, Amazon will often show products that are similar to what the user is buying, because they may want to buy similar items. Amazon algorithms are also used to recommend products that other people have bought along with the product you are trying to buy, for the same reason. . Does the owner of the computer think this was intentional? If yes or no, justify your conclusion. I think the owner of the computer may think it was intentional, as he seems surprised that it does not recognize him. . How do you think this happened? This may have happened due to oversight in the program’s coding. . Is this harmful? Was it intended to be harmful or exclude? Should it be corrected? Yes, it’s harmful and it should be corrected, as it causes a divide in the ways the program can be used. It likely wasn’t intended to be harmful, however, and was likely just an oversight in the program. . What would you or should you do to produce a better outcome? More testing and from a wider population would create a much better outcome. . 5.4 Questions . Think of a use case for crowdsourcing in your project. In my project, crowdsourcing could be used in development of recipes, as my site has a feature in which users can add recipes to the database. . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? Crowdsourcing (if speaking in a general sense) could be used to take results for a survey, such as a customer service survey. This could help with improvements to the project as a whole, as information from others can help make the project better. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? Del Norte crowdsourcing could definitely help with creating more recipes, and improving the site and its functionality. Although crowdsourcing isn’t necessary for the project to function, it does help a lot with creating a good number of recipes that users can access. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. Random recipe data would be interesting to see, as it would take quite a long time to actually implement a whole recipe into the program, instead of just getting portion numbers. . . 5.5 Questions . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. Many licences are very similar, as they cover many of the same things. Patents, copywriting, sharing permissions, private and public use, liability, and warranty are all things covered by these licenses. Licenses can limit how a work is shared and who is able to share it, as well as copyright permissions. . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. You are also able to have external deployment. I think licenses are a good thing. As an artist, I know how important it is to have licenses, so someone can protect their work and prevent it from being stolen. . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. For our repository, we would probably use a MIT license. This is because it has many of the same permissions as an Apache license, and it can be distributed more readily among collaborators. It is a simple license, which is also highly rated by others, which is why my group chose it. Applying the license was simple; all I did was click which license I wanted, click submit, and it changed the LICENSE.md file for me, for each repos. . 5.6 Questions . Describe PII you have seen on project in CompSci Principles. Some PII I’ve seen on other projects include account creation and score tracking from other Compsci projects. . What are your feelings about PII and your personal exposure? PII may be good for business, but it’s also fairly harmful, as having too much of your information out on the internet makes it easier for people to find you. This can be dangerous, as people may wish to harm you. . Describe good and bad passwords? What is another step that is used to assist in authentication. Good passwords usually have many different characters, 16 or more, and lots of variation in what the characters are. Two-factor authentication is another step that can be used to protect accounts. . Try to describe Symmetric and Asymmetric encryption. Symmetric - A private key to encrypts/decrypts an encrypted email Asymmetric - Uses the public key of the recipient to encrypt the message . Provide an example of encryption we used in AWS deployment. In AWS deployment, we used SSH keys to encrypt our websites. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. Phishing schemes such as ads that steal information when clicked are one of the things I’ve been phished by. Other techniques include charity donation phone calls that ask for money, but actually just steal money. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/18/markdown-25.html",
            "relUrl": "/post/2023/01/18/markdown-25.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "College Board Grading Exercise 3",
            "content": "College Board Grading Exercise 3 . Submission 1: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, the program functions as described. | 1, same reasoning, same score. | . 2 | 1, data is stored in a list, named RPS. | 0, RPS list is named, but is not used in the code. | . 3 | 1, list is named and it shows how the list is used to store data. | 0, the written response does not specify the purpose of the program to the overall program. | . 4 | 1, there is a procedure and parameters that can be changed. | 0, the written response does not specify the purpose of the code to the overall program. | . 5 | 1, a loop is used to create a looping procedure. | 1, same reasoning and same score. | . 6 | 1, different calls are given to the procedure, and things change based on what is input. | 1, same reasoning, same score. | . Submission 2: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, clear description of program function/functionality. | 1, same score, same reasoning. | . 2 | 1, shows how the data has been stored in the list for re-usage later on. | 1, same score, same reasoning. | . 3 | 1, offers a list and offers an option to how else the program could be used without the list. | 1, same score, same reasoning. | . 4 | 1, shows the procedure and shows how the parameters can be manipulated to change the procedure. | 1, same score, same reasoning. | . 5 | 1, the program uses sequencing, iteration, and selection to create an output. | 1, same score, same reasoning. | . 6 | 1, two calls are made to the procedure, and the conditions being tested in each cell and the output is identified. | 1, same score, same reasoning. | . Submission 3: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, mentions the program’s functionality. | 1, same score, same reasoning. | . 2 | 1, shows how data is stored in the stateList. | 0, the code does not show the data being utilized in the statelist. | . 3 | 0, does not show how a list is used to store data in the program. | 0, same score, same reasoning. | . 4 | 1, shows and describes a procedure the student developed. | 0, shows a procedure, but does not correctly describe it. | . 5 | 1, includes sequencing, selection, and iteration in a loop and how to recreate the program. | 0, same score, same reasoning. | . 6 | 0, does not calls a procedure but does not have a changeable parameter specified. | 0, same score, same reasoning. | . Submission 4: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, shows the program and states what it is used for. | 1, same score, same reasoning. | . 2 | 1, shows how data has been stored for later use in the fishtypes list. | 1, same score, same reasoning. | . 3 | 1, shows a list and uses it to show complexity by storing the fish caught data. | 1, same score, same reasoning. | . 4 | 1, includes a student developed procedure that can be changed. | 1, same score, same reasoning. | . 5 | 1, a program with procedure is shown, it has iteration, loops, sequencing, and etc. | 1, same score, same reasoning. | . 6 | 1, shows the procedures being used/called and changed. | 0, does not show the procedures being used, or changed. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/18/markdown-24.html",
            "relUrl": "/post/2023/01/18/markdown-24.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "College Board Grading Exercise 2",
            "content": "College Board Grading Exercise 2 . Submission 1: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, the program functions as described. | 0, the written response does not address the program functionality. | . 2 | 1, data is stored in a list (the code remembers what animal has been shown and marks it as correct/incorrect). | 0, animalList is named, but is not used in the code. | . 3 | 1, list is named and it shows how the list is used to store data. | 0, the program does not include a code segment that uses a list. | . 4 | 1, there is a procedure and parameters that can be changed. | 0, the written response does not include a description on how the program functonality contributes to the overall functionality. | . 5 | 1, a loop is used to create a looping procedure. | 0, does not explain the algorithm in enough detail for it to be recreated. | . 6 | 1, different calls are given to the procedure, and things change based on what is input. | 1, same reasoning. | . Submission 2: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, clear description of program function/functionality. | 1, same score, same reasoning. | . 2 | 1, shows how the data has been stored in the list for re-usage later on. | 1, same score, same reasoning. | . 3 | 1, offers a list and offers an option to how else the program could be used without the list. | 1, same score, same reasoning. | . 4 | 1, shows the procedure and shows how the parameters can be manipulated to change the procedure. | 1, same score, same reasoning. | . 5 | 1, the program uses sequencing, iteration, and selection to create an output. | 1, same score, same reasoning. | . 6 | 1, two calls are made to the procedure, and the conditions being tested in each cell and the output is identified. | 1, same score, same reasoning. | . Submission 3: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 0, does not mention program’s functionality. | 1, same score, same reasoning. | . 2 | 1, shows how data is stored in the characterList. | 1, same score, same reasoning. | . 3 | 1, shows how a list is used to store data in the program | 1, same score, same reasoning. | . 4 | 1, shows and describes a procedure the student developed. | 1, same score, same reasoning. | . 5 | 1, includes sequencing, selection, and iteration in a loop and how to recreate the program. | 1, same score, same reasoning. | . 6 | 1, calls a procedure and identifies results of each cell. | 1, same score, same reasoning. | . Submission 4: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, shows the program and states what it is used for. | 1, same score, same reasoning. | . 2 | 2, shows how data has been stored for later use. | 0, stored data is not being used in the program later on. | . 3 | 1, shows a list and uses it to show complexity. | 0, list is not used to show the program’s complexity, though it is present. | . 4 | 1, includes a student developed procedure that can be changed. | 1, same score, same reasoning. | . 5 | 1, a program with procedure is shown, it has iteration, loops, sequencing, and etc. | 1, same score, same reasoning. | . 6 | 1, shows the procedures being used/called and changed. | 0, does not show the procedures being used, or changed. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/11/markdown-23.html",
            "relUrl": "/post/2023/01/11/markdown-23.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, food): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._food = food # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters @property def food(self): return self._food @food.setter def food(self, food): self._food = food # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Tsukasa Suou&#39;, uid=&#39;kasa&#39;, password=&#39;helpMe&#39;, food=&#39;snacks&#39;) u2 = User(name=&#39;Leo Tsukinaga&#39;, uid=&#39;ousama&#39;, password=&#39;izumiMyLove&#39;, food=&#39;coffee&#39;) u3 = User(name=&#39;Izumi Sena&#39;, uid=&#39;sena&#39;, password=&#39;makotoForever&#39;, food=&#39;shrimp&#39;) u4 = User(name=&#39;Arashi Narukami&#39;, uid=&#39;naruchan&#39;, password=&#39;arashi&#39;, food=&#39;chicken karaage&#39;) u5 = User(name=&#39;Ritsu Sakuma&#39;, uid=&#39;kuma&#39;, password=&#39;maoIsara&#39;, food=&#39;soda&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;makotoForever&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;George Washington&quot; u.uid = &quot;jm1021&quot; u.food = &quot;cheese&quot; u.set_password(&quot;washingmachine&quot;) u = tester(users, u.uid, &quot;washingmachine&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Tsukasa Suou&#34;, id: &#34;kasa&#34;, psw: &#34;sha256$fja...&#34; name: &#34;Leo Tsukinaga&#34;, id: &#34;ousama&#34;, psw: &#34;sha256$GIH...&#34; * name: &#34;Izumi Sena&#34;, id: &#34;sena&#34;, psw: &#34;sha256$YJZ...&#34; name: &#34;Arashi Narukami&#34;, id: &#34;naruchan&#34;, psw: &#34;sha256$Lya...&#34; name: &#34;Ritsu Sakuma&#34;, id: &#34;kuma&#34;, psw: &#34;sha256$Ozt...&#34; Test 2, change user 3 name: &#34;Tsukasa Suou&#34;, id: &#34;kasa&#34;, psw: &#34;sha256$fja...&#34; name: &#34;Leo Tsukinaga&#34;, id: &#34;ousama&#34;, psw: &#34;sha256$GIH...&#34; * name: &#34;George Washington&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$6Ha...&#34; name: &#34;Arashi Narukami&#34;, id: &#34;naruchan&#34;, psw: &#34;sha256$Lya...&#34; name: &#34;Ritsu Sakuma&#34;, id: &#34;kuma&#34;, psw: &#34;sha256$Ozt...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Tsukasa Suou&#34;, &#34;_uid&#34;: &#34;kasa&#34;, &#34;_password&#34;: &#34;sha256$fjaGEbHKfN1yofwm$63a250e14579487f9d5f51d9949baf414fb74b401590d2c846e2d0cbf33e402e&#34;, &#34;_food&#34;: &#34;snacks&#34;}, {&#34;_name&#34;: &#34;Leo Tsukinaga&#34;, &#34;_uid&#34;: &#34;ousama&#34;, &#34;_password&#34;: &#34;sha256$GIHyME0SzfI2fU7I$c16866a8a4e6a3495416e5f21c7b5df5b52ba6f8669b7fe5f1ebfe9896c4b55b&#34;, &#34;_food&#34;: &#34;coffee&#34;}, {&#34;_name&#34;: &#34;George Washington&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$6HaqT03lYr6PX5d7$7be4b69496bceb492c79d6924d3ded19566517318d17666ed325ee23741b9d3d&#34;, &#34;_food&#34;: &#34;cheese&#34;}, {&#34;_name&#34;: &#34;Arashi Narukami&#34;, &#34;_uid&#34;: &#34;naruchan&#34;, &#34;_password&#34;: &#34;sha256$LyaBLOZRlbRI2dvC$b7f5dfe3a42935a62bc5146e3ce236759e0e8fa2137f1afce3d64824fcf7c01f&#34;, &#34;_food&#34;: &#34;chicken karaage&#34;}, {&#34;_name&#34;: &#34;Ritsu Sakuma&#34;, &#34;_uid&#34;: &#34;kuma&#34;, &#34;_password&#34;: &#34;sha256$OztWrrfmi2kLp20X$15ed3d947bcb22309ad946ed2c87ab3939079e3cb0d806caf413859daf2e3db3&#34;, &#34;_food&#34;: &#34;soda&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Tsukasa Suou&#34;, &#34;_uid&#34;: &#34;kasa&#34;, &#34;_password&#34;: &#34;sha256$fjaGEbHKfN1yofwm$63a250e14579487f9d5f51d9949baf414fb74b401590d2c846e2d0cbf33e402e&#34;, &#34;_food&#34;: &#34;snacks&#34;}, {&#34;_name&#34;: &#34;Leo Tsukinaga&#34;, &#34;_uid&#34;: &#34;ousama&#34;, &#34;_password&#34;: &#34;sha256$GIHyME0SzfI2fU7I$c16866a8a4e6a3495416e5f21c7b5df5b52ba6f8669b7fe5f1ebfe9896c4b55b&#34;, &#34;_food&#34;: &#34;coffee&#34;}, {&#34;_name&#34;: &#34;George Washington&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$6HaqT03lYr6PX5d7$7be4b69496bceb492c79d6924d3ded19566517318d17666ed325ee23741b9d3d&#34;, &#34;_food&#34;: &#34;cheese&#34;}, {&#34;_name&#34;: &#34;Arashi Narukami&#34;, &#34;_uid&#34;: &#34;naruchan&#34;, &#34;_password&#34;: &#34;sha256$LyaBLOZRlbRI2dvC$b7f5dfe3a42935a62bc5146e3ce236759e0e8fa2137f1afce3d64824fcf7c01f&#34;, &#34;_food&#34;: &#34;chicken karaage&#34;}, {&#34;_name&#34;: &#34;Ritsu Sakuma&#34;, &#34;_uid&#34;: &#34;kuma&#34;, &#34;_password&#34;: &#34;sha256$OztWrrfmi2kLp20X$15ed3d947bcb22309ad946ed2c87ab3939079e3cb0d806caf413859daf2e3db3&#34;, &#34;_food&#34;: &#34;soda&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date day = 31 month = 12 year = 2004 def born(dob): born = (int(day), int(month), int(year)) print (born) def calculate_age(born): today = date.today() ageCalc = today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) print (&quot;You are&quot;, ageCalc, &quot;years old as of&quot;, today,&quot;.&quot;) dob = date(2004, 12, 31) # honestly I was kinda too tired to do this because Disneyland in the rain murdered me but it works so I can&#39;t really argue age = calculate_age(dob) . You are 18 years old as of 2023-01-16 . . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json from datetime import datetime class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf def is_classOf(self, classOf): today = date.today() return today.year - self._classOf.year - ((today.month, today.day) &lt; (self._classOf.month, self._classOf.day)) # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self._classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): # return json.dumps(self.dictionary)def __str__(self): return f&#39;name: &quot;{self._name}&quot;, id: &quot;{self._uid}&quot;, psw: &quot;{self._password}&quot;, dob: &quot;{str(self._dob)}&quot;, classoff: &quot;{str(self._classOf)}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob},classOf={self._classOf})&#39; def set_classOf(self, classOf): self._classOf = classOf class DTEncoder(json.JSONEncoder): def default(self, obj): # 👇️ if passed in object is datetime object # convert it to a string if isinstance(obj, datetime): return str(obj) # 👇️ otherwise use the default behavior return json.JSONEncoder.default(self, obj) if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=date(1990, 2, 2)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) #users = [u1] #json.dumps([user.__dict__ for user in users]) #print(&quot;JSON string: n&quot;, json_string, &quot; n&quot;) . JSON ready string: name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$Frvq7kzdpR7nDzLb$7007a0ad8f3f24b30d7dcfe4165ceec3004ef01698e2d767ce26e0570f159a0f&#34;, dob: &#34;1847-02-11&#34;, classoff: &#34;1990-02-02&#34; Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$Frvq7kzdpR7nDzLb$7007a0ad8f3f24b30d7dcfe4165ceec3004ef01698e2d767ce26e0570f159a0f&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: datetime.date(1990, 2, 2)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_classOf&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_classOf&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$Frvq7kzdpR7nDzLb$7007a0ad8f3f24b30d7dcfe4165ceec3004ef01698e2d767ce26e0570f159a0f,dob=1847-02-11,classOf=1990-02-02) . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json from datetime import datetime class User: def __init__(self, name, uid, password, dob, favFood, favDrink): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._favFood = favFood self._favDrink = favDrink @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob @property def favFood(self): return self._favFood # a setter function, allows name to be updated after initial object creation @favFood.setter def favFood(self, favFood): self._favFood = favFood # check if uid parameter matches user id in object, return boolean def is_favFood(self, favFood): return self._favFood == favFood @property def favDrink(self): return self._favDrink # a setter function, allows name to be updated after initial object creation @favDrink.setter def favDrink(self, favDrink): self._favDrink = favDrink # check if uid parameter matches user id in object, return boolean def is_favDrink(self, favDrink): return self._favDrink == favDrink # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;favFood&quot; : self._favFood, &quot;favDrink&quot; : self.favDrink } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): # return json.dumps(self.dictionary)def __str__(self): return f&#39;name: &quot;{self._name}&quot;, id: &quot;{self._uid}&quot;, psw: &quot;{self._password}&quot;, dob: &quot;{str(self._dob)}&quot;, favFood: &quot;{str(self._favFood)}&quot;,favDrink: &quot;{str(self._favDrink)}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob},favFood={self._favFood},favDrink={self._favDrink})&#39; def set_favFood(self, favFood): self._favFood = favFood class DTEncoder(json.JSONEncoder): def default(self, obj): # 👇️ if passed in object is datetime object # convert it to a string if isinstance(obj, datetime): return str(obj) # 👇️ otherwise use the default behavior return json.JSONEncoder.default(self, obj) if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Kaname Tojou&#39;, uid=&#39;Kana&#39;, password=&#39;bees&#39;, dob=date(2004, 7, 7), favFood=&#39;breath mints&#39;, favDrink=&#39;cola&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) #users = [u1] #json.dumps([user.__dict__ for user in users]) #print(&quot;JSON string: n&quot;, json_string, &quot; n&quot;) print (&quot;Name:&quot;, u1.name) print (&quot;UID:&quot;, u1.uid) print (&quot;Password:&quot;, u1._password) print (&quot;Date of Birth:&quot;, u1.dob) print (&quot;Favorite Food:&quot;, u1._favFood) print (&quot;Favorite Drink:&quot;, u1._favDrink) . JSON ready string: name: &#34;Kaname Tojou&#34;, id: &#34;Kana&#34;, psw: &#34;sha256$Gv9YRb0q2Z25rjnI$aeba6ee3fca33fb71e7831fb664e890fbd51e4b9d3580686fcad12ba1b31cedb&#34;, dob: &#34;2004-07-07&#34;, favFood: &#34;breath mints&#34;,favDrink: &#34;cola&#34; Raw Variables of object: {&#39;_name&#39;: &#39;Kaname Tojou&#39;, &#39;_uid&#39;: &#39;Kana&#39;, &#39;_password&#39;: &#39;sha256$Gv9YRb0q2Z25rjnI$aeba6ee3fca33fb71e7831fb664e890fbd51e4b9d3580686fcad12ba1b31cedb&#39;, &#39;_dob&#39;: datetime.date(2004, 7, 7), &#39;_favFood&#39;: &#39;breath mints&#39;, &#39;_favDrink&#39;: &#39;cola&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_favDrink&#39;, &#39;_favFood&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;favDrink&#39;, &#39;favFood&#39;, &#39;is_favDrink&#39;, &#39;is_favFood&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_favFood&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Kaname Tojou, uid=Kana, password=sha256$Gv9YRb0q2Z25rjnI$aeba6ee3fca33fb71e7831fb664e890fbd51e4b9d3580686fcad12ba1b31cedb,dob=2004-07-07,favFood=breath mints,favDrink=cola) Name: Kaname Tojou UID: Kana Password: sha256$Gv9YRb0q2Z25rjnI$aeba6ee3fca33fb71e7831fb664e890fbd51e4b9d3580686fcad12ba1b31cedb Date of Birth: 07-07-2004 Favorite Food: breath mints Favorite Drink: cola .",
            "url": "https://keiraokimoto.github.io/Fastpages/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Perform Create Performance Task Scoring Blog",
            "content": "Perform Create Performance Task Scoring Blog . Performance Task Description . Row Number Description of Task . 1 | Explain the program’s purpose, input, output, and how it functions. For example, a program may be used for practical things, like calculating taxes, or for entertainment, such as playing a video. | . 2 | The program should show two code segments, one which shows that the data has been stored in a list or another collection type, and that the data in said list is used in the program. | . 3 | The program needs to use the list in a way that shows how complexity can be managed. For example, having a list with a thousand items could be managed by using specific calls to find specific parts of the data. | . 4 | One procedure with at least one parameter that, when changed, changes the functonality of the procedure. Another code segment shows how the procedure is called. | . 5 | An algorithm is used in the code, and it includes sequencing, selection, and iteration. For example, a loop is used as iteration. | . 6 | Two calls made to the procedure pass different arguments into the algorithm to execute, and the result of each call is identified. | . In summary, to exceed Collegeboard standards, I would need to use loops and different algorithms to create a procedure, and call that procedure. I would also need to use if/else statements, as well as dictionaries, lists, and other data collection/recall devices. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/08/markdown-22.html",
            "relUrl": "/post/2023/01/08/markdown-22.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "College Board Grading Exercise 1",
            "content": "College Board Grading Exercise 1 . Submission 1: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, the program works as intended, calculating values based on the given triangle side length numbers. | 0, the program would not receive a 1 in this category because the written response does not describe the input nor output, nor specify the program’s purpose. | . 2 | 0, the program does not show that the inputs have been stored in a list. | 1, there are two code segments provided, and there is a list called ‘sideIndex’ in the program as well, with a correct response along with it. | . 3 | 0, the program, nor does the written response, does not explain how the code manages the complexity of the program using lists or otherwise. | 0, same score, different reasoning; the use of the list does not manage the complexity, as it is inaccurate in the written response, which discusses why lists are beneficial to the program. | . 4 | 1, there is more than one parameter that has an effect on how the prodecure is run, and a procedure is called. | 1, same score, same reasoning. | . 5 | 1, the algorithm being utilized contains sequences, selection, and iteration by manipulating the numbers given to produce results. | 1, same score, same reasoning, but could have added specifics regarding the iterative loop for variable i decreasing by 1 from A, B, or C. | . 6 | 1, in the written response, two calls are made to the selected procedure which allows the program to create an output from the given inputs. | 1, same score, same reasoning, different arguments are called. | . Submission 2: . Row Number My Score + Reasoning College Board Score + Why I Would Change My Score . 1 | 1, the written response states the program’s functionality, and the input and output are shown visually. | 1, same score, same reasoning. | . 2 | 1, there are two program segments provided, and a list is provided for data to be stored. | 1, same score, uses startGrid as the list. | . 3 | 1, complexity is managed through a system of inputs being used to control the program. | 1, same score, stores 10,800 items in a list. | . 4 | 1, two program code segments are used, one where different inputs affect the procedure’s output and another where the procedure is called. | 1, same score, uses replaceList (procedure) with two parameters. | . 5 | 1, the program has multiple steps which are explained in the written portion. | 1, same score, same reasoning, includes sequencing, selection with an if/else statement, and iteration with a repeating loop. | . 6 | 1, there are different arguments passed into the code | 1, same score, same reasoning with inputs/outputs. | . Essentially, a program would need: . Lists that log input data | A loop | More than one procedure that can be called | A way to input something that changes what is output by the procedure | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2023/01/04/markdown-21.html",
            "relUrl": "/post/2023/01/04/markdown-21.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Simulations are used to simplify/modify certain variables | Simulations can contain bias | They can be used to simulate things as tests (ie, launching a bomb) when these actions are too dangerous/impractical to do in the real world | Simulations can also be used to create situations that are too difficult to recreate in the real world (specific weather conditions for example) | Random modules define series of objects that can be generated randomly | Randomization helps simulations, as they can help predict many varying probablilities of a simulation | Abstractions use conditionals to execute one part of the code only when a particular condition is met, repeat looping, simplification, and it does not request input from the user or display output to the user | It is far cheaper to create a simulation than to do said actions in real life | . erm hopefully thats enough notes i cant . Hack #2 - Functions Classwork . import random myclothes = [&quot;red shoes&quot;, &quot;green pants&quot;, &quot;tie&quot;, &quot;belt&quot;] def mycloset(): print(myclothes) def addCloth(): a = input() # tells the code to issue an input function print(&quot;Do you want to add any clothes? Type &#39;No&#39; or the item name.&quot;) if a != &quot;No&quot;: myclothes.append(a) #appends the input to the myclothes list print(&quot;Object&quot;, a, &quot;has been added.&quot;) return myclothes def removeCloth(): r = input() # tells the code to issue an input function print(&quot;Do you want to remove any clothes? Type &#39;No&#39; or the item name.&quot;) if r != &quot;No&quot;: if (r in myclothes): # removes whatever the user types myclothes.remove(r) print(myclothes) print(&quot;Object&quot;, r, &quot;has been removed.&quot;) mycloset() addCloth() print(myclothes) removeCloth() # add myclothes function # trash myclothes function . [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;tie&#39;, &#39;belt&#39;] Do you want to add any clothes? Type &#39;No&#39; or the item name. Object potato has been added. [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;tie&#39;, &#39;belt&#39;, &#39;potato&#39;] Do you want to remove any clothes? Type &#39;No&#39; or the item name. [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;tie&#39;, &#39;potato&#39;] Object belt has been removed. . Hack #3 - Binary Simulation Problem . import random def randomnum(start, end, n=8): # function for generating random int randNumList = [] for i in range(n): # in a range identified in the code randNumList.append(random.randint(start,end)) #randomizes random numbers print (&quot;Randomly generated number list:&quot;, randNumList) return randNumList def converttobin(randNumList): # function for converting decimal to binary divValue = randNumList # input (which is the randNumList) remainder = 1 results = [] #empty results list for whatever is appended for num in randNumList: # convert eah num to binary string and append it to result list divValue = num x = &#39;&#39; # keeps track of 1&#39;s in the loop (so it can go infinitely) while divValue &gt; 0: remainder = divValue % 2 # divides div val divValue = (int)(divValue / 2) # integer x div value/2 x = str(remainder) + x x = x.zfill(8) results.append(x) return results # FIrst, a function for randomizing decimal number 0-255 # Next, a function for converting this to a 8-bit binary number (one bit per person) # Lastly, a function to read the binary bits, and assign each person a label (zombie or naw) based on the position of 0s and 1s def survivors(binary): # function to assign position survivorstatus = [&quot;Kohaku Oukawa&quot;, &quot;Madara Mikejima&quot;, &quot;Kaname Tojou&quot;, &quot;Aira Shiratori&quot; , &quot;Kunikuzushi&quot;, &quot;Kazuha&quot;, &quot;Rook Hunt&quot;, &quot;Rinne Amagi&quot;] # replace the names above with your choice of people in the house i = 0 # index is 0 (empty) zombie = 0 # a zombie is a 0 alive = 1 # an alive person is a 1 resultList = {} # empty list for the results for b in binary: person = survivorstatus[i] # sets a person equal to a survivor status if b == &#39;0&#39;: # if a person&#39;s status is 0 , they are a zombie, if not, they are alive. Yippee !! resultList[person] = &quot;Zombie&quot; else: resultList[person] = &quot;Alive&quot; i = i + 1 # each result gets appended to the list print(resultList) return resultList for r in range(1): ranNums = randomnum(1, 100, 8) # generates numbers from 1-100, and only 8 of them binaryList = converttobin(ranNums) # the binary list is what has been given in the converttobin function print(binaryList) binary = random.choice(binaryList) # a random binary is chosen from the binary list survivors(binary) # calls the survivors binary function to run . Randomly generated number list: [73, 40, 46, 25, 1, 6, 12, 28] [&#39;01001001&#39;, &#39;00101000&#39;, &#39;00101110&#39;, &#39;00011001&#39;, &#39;00000001&#39;, &#39;00000110&#39;, &#39;00001100&#39;, &#39;00011100&#39;] {&#39;Kohaku Oukawa&#39;: &#39;Zombie&#39;, &#39;Madara Mikejima&#39;: &#39;Zombie&#39;, &#39;Kaname Tojou&#39;: &#39;Alive&#39;, &#39;Aira Shiratori&#39;: &#39;Zombie&#39;, &#39;Kunikuzushi&#39;: &#39;Alive&#39;, &#39;Kazuha&#39;: &#39;Zombie&#39;, &#39;Rook Hunt&#39;: &#39;Zombie&#39;, &#39;Rinne Amagi&#39;: &#39;Zombie&#39;} . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . import random def pull(): roll = [] # array for each result from rolling num = int(input()) # how many times the dice is rolled print(&quot;The amount of rolls you want is:&quot;, num) # printing number of rolls that are input for n in range(num): # for the number that was put in the input, start of the for loop result = random.randint(1, 6) # the results are any randomly generated number from 1 - 6 roll.append(result) # appends the randomly generated results to an array return roll #returns function dices = pull() # naming the function print(&quot;Your dice rolls are:&quot;, dices) # final print of the array . The amount of rolls you want is: 30 Your dice rolls are: [2, 1, 4, 5, 2, 1, 2, 3, 2, 3, 2, 1, 3, 4, 4, 3, 4, 3, 1, 6, 3, 6, 3, 6, 5, 1, 2, 4, 2, 6] . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway. Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | Rinne Amagi wants to go to a casino, but Niki Shiina won&#39;t let him because he keeps wasting Niki&#39;s money, which is absolutely fair. He creates a computer simulation after much difficulty and suffering to gamble without Niki knowing, because he has an addiction. While his program is almost perfect, it lacks a good way to simulate a real casino, and the randomization is off. What are some things he could add to improve his simulation? (2 answers) Answer Options Niki Shiina dragging him out of the casino. | A randomization function, where each result has different chances to appear based on a percentage. | More items of different categories/ranks to make a bigger randomized simulation. | Throw his computer against a wall and cry because he&#39;s weak. | | . | Scaramouche has spent years trying to overthrow the Raiden Shogun, but to no avail. He is unfortunately the same element she is, and immunity is evil. He creates a simulation to determine what stance he should take to fight her, but thinks it&#39;s not close enough to reality. What could he add to his simulation to make it more realistic? Answer Options The Raiden Shogun&#39;s personal fox maiden. | He should take into account whether the Shogun is injured or not. | He should take the weather into account. | He should consider his life choices and have an existencial breakdown. | | . | questions = 6 correct = 0 import random questions_list = [ #questions [&quot;A researcher gathers data about the effect of Advanced Placement classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway. Several school administrators are concerned that the simulation contains bias favoring high-income students, however.&quot;], [&quot;Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why?&quot;], [&quot;Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation?&quot;], [&quot;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment?&quot;], [&quot;Rinne Amagi wants to go to a casino, but Niki Shiina won&#39;t let him because he keeps wasting Niki&#39;s money, which is absolutely fair. He creates a computer simulation after much difficulty and suffering to gamble without Niki knowing, because he has an addiction. While his program is almost perfect, it lacks a good way to simulate a real casino, and the randomization is off. What are some things he could add to improve his simulation? (2 answers)&quot;], [&quot;Scaramouche has spent years trying to overthrow the Raiden Shogun, but to no avail. He is unfortunately the same element she is, and immunity is evil. He creates a simulation to determine what stance he should take to fight her, but thinks it&#39;s not close enough to reality. What could he add to his simulation to make it more realistic?&quot;], ] correct = [ # the answers in each list that are correct [&quot;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&quot;], [&quot;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&quot; ], [&quot;Accurate accounting for the effects of wind conditions on the movement of the ball.&quot;], [&quot;The simulation can be run more safely than an actual experiment.&quot;,&quot;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&quot;], [&quot;A randomization function, where each result has different chances to appear based on a percentage.&quot;,&quot;More items of different categories/ranks to make a bigger randomized simulation.&quot;], [&quot;He should take the weather into account.&quot;], ] answerChoices = [ # all answer possibilities for each question [&quot;The simulation is an abstraction and therefore cannot contain any bias.&quot;,&quot;The simulation may accidentally contain bias due to the exclusion of details.&quot;,&quot;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&quot;, &quot;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&quot;], [&quot;No, it&#39;s not a simulation because it does not include a visualization of the results.&quot;, &quot;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&quot;,&quot;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&quot;,&quot;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&quot;], [&quot;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&quot;,&quot;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&quot;,&quot;Accurate accounting for the effects of wind conditions on the movement of the ball.&quot;,&quot;A baseball field that is textured to differentiate between the grass and the dirt.&quot;], [&quot;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&quot;,&quot;The simulation can be run more safely than an actual experiment&quot;,&quot;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&quot;,&quot;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&quot;], [&quot;Niki Shiina dragging him out of the casino.&quot;,&quot;A randomization function, where each result has different chances to appear based on a percentage.&quot;,&quot;More items of different categories/ranks to make a bigger randomized simulation.&quot;,&quot;Throw his computer against a wall and cry because he&#39;s weak.&quot;], [&quot;The Raiden Shogun&#39;s personal fox maiden.&quot;,&quot;He should take into account whether the Shogun is injured or not.&quot;,&quot;He should take the weather into account.&quot;,&quot;He should consider his life choices and have an existencial breakdown.&quot;], ] points = [] #empty string to register points s = &quot;&quot; # i probably don&#39;t need this list because it&#39;s in the loop anyways but i&#39;m scared to break my code so it stays def questionloop(): s = &quot;&quot; # list for inputs count = 0 # starts the number of answered questions at 0 while (s != &quot;quit&quot; and count &lt;= 6): question = random.choice(questions_list) #randomizes questions print(question) print(answerChoices) s = input() # allows user to input answer print(s) if s == &quot;quit&quot;: # exits the quiz print(&quot;Quiz exited.&quot;) else: answercheck(s, question) count = count + 1 # adds to the question count so the loop stops when it hits 6 total = 0 #starts the total score at 0, adds for score in points: total += score print(&quot;Your final score is:&quot;, total) def answercheck(s, question): i = questions_list.index(question) # refers to the index of the question list matchedAnswers = list(filter(lambda item: item == s, correct[i])) # Filters wrong/right, if it&#39;s not in the list it&#39;s wrong, and that makes it appear as &#39;empty&#39; # (Tests, basically shows the len and if the len is &gt;1, the answer is correct) print(matchedAnswers , str(len(matchedAnswers))) if (len(matchedAnswers)) &gt;= 1: # if the length was marked as &#39;none&#39; (0) in the previous line, then it&#39;s measured (using len) and marked as incorrect points.append(1) # appends 1 point to the list of points print (points) print(&quot;Correct.&quot;) else: points.append(0) # appends 0 points to the list of points print(points) print(&quot;Incorrect.&quot;) # function to check if the answer was correct or not questionloop() . [&#34;Scaramouche has spent years trying to overthrow the Raiden Shogun, but to no avail. He is unfortunately the same element she is, and immunity is evil. He creates a simulation to determine what stance he should take to fight her, but thinks it&#39;s not close enough to reality. What could he add to his simulation to make it more realistic?&#34;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] [0] Incorrect. [&#34;Scaramouche has spent years trying to overthrow the Raiden Shogun, but to no avail. He is unfortunately the same element she is, and immunity is evil. He creates a simulation to determine what stance he should take to fight her, but thinks it&#39;s not close enough to reality. What could he add to his simulation to make it more realistic?&#34;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] He should take the weather into account. [0, 1] Correct. [&#34;Scaramouche has spent years trying to overthrow the Raiden Shogun, but to no avail. He is unfortunately the same element she is, and immunity is evil. He creates a simulation to determine what stance he should take to fight her, but thinks it&#39;s not close enough to reality. What could he add to his simulation to make it more realistic?&#34;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] [0, 1, 0] Incorrect. [&#34;Rinne Amagi wants to go to a casino, but Niki Shiina won&#39;t let him because he keeps wasting Niki&#39;s money, which is absolutely fair. He creates a computer simulation after much difficulty and suffering to gamble without Niki knowing, because he has an addiction. While his program is almost perfect, it lacks a good way to simulate a real casino, and the randomization is off. What are some things he could add to improve his simulation? (2 answers)&#34;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] [0, 1, 0, 0] Incorrect. [&#39;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment?&#39;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] [0, 1, 0, 0, 0] Incorrect. [&#34;Rinne Amagi wants to go to a casino, but Niki Shiina won&#39;t let him because he keeps wasting Niki&#39;s money, which is absolutely fair. He creates a computer simulation after much difficulty and suffering to gamble without Niki knowing, because he has an addiction. While his program is almost perfect, it lacks a good way to simulate a real casino, and the randomization is off. What are some things he could add to improve his simulation? (2 answers)&#34;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] [0, 1, 0, 0, 0, 0] Incorrect. [&#34;A researcher gathers data about the effect of Advanced Placement classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway. Several school administrators are concerned that the simulation contains bias favoring high-income students, however.&#34;] [[&#39;The simulation is an abstraction and therefore cannot contain any bias.&#39;, &#39;The simulation may accidentally contain bias due to the exclusion of details.&#39;, &#39;If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation.&#39;, &#39;The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&#39;], [&#34;No, it&#39;s not a simulation because it does not include a visualization of the results.&#34;, &#34;No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment.&#34;, &#34;Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output.&#34;, &#34;Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&#34;], [&#39;Realistic sound effects based on the material of the baseball bat and the velocity of the hit.&#39;, &#39;A depiction of an audience in the stands with lifelike behavior in response to hit accuracy.&#39;, &#39;Accurate accounting for the effects of wind conditions on the movement of the ball.&#39;, &#39;A baseball field that is textured to differentiate between the grass and the dirt.&#39;], [&#39;The simulation will not contain any bias that favors one body type over another, while an experiment will be biased.&#39;, &#39;The simulation can be run more safely than an actual experiment&#39;, &#34;The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design.&#34;, &#39;The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&#39;], [&#39;Niki Shiina dragging him out of the casino.&#39;, &#39;A randomization function, where each result has different chances to appear based on a percentage.&#39;, &#39;More items of different categories/ranks to make a bigger randomized simulation.&#39;, &#34;Throw his computer against a wall and cry because he&#39;s weak.&#34;], [&#34;The Raiden Shogun&#39;s personal fox maiden.&#34;, &#39;He should take into account whether the Shogun is injured or not.&#39;, &#39;He should take the weather into account.&#39;, &#39;He should consider his life choices and have an existencial breakdown.&#39;]] [0, 1, 0, 0, 0, 0, 0] Incorrect. Your final score is: 1 . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... . import random # I kinda wanted to do this but I ran out of time # I wanted to make a gacha simulator so just know that it will sit in this lesson like some sort of memorial. # Rest in peace gacha simulator. In another world I gambled using you. # 3 lists, 3 star 4star 5 star # randint.(0, 100), generate 10 random ints # if randint 0-75, print from the 3 star list, 76-99, print from the 4 star list, 100, print from the 5 star list .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/12/13/hw.html",
            "relUrl": "/2022/12/13/hw.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3 Sections 14-15 Homework",
            "content": "Create a program that asks the user for a day and then gives them a distance in days between that day and another random day in the year. We have provided you with a possible starter, but you are welcome to change it up if you would like. . from datetime import date, timedelta, datetime import random minDate, maxDate = date(1900, 1, 1), date(2022, 12, 31) print(&quot;Date range: &quot; + str(minDate) + &quot; to &quot; + str(maxDate)) dateDays = maxDate - minDate totalDays = dateDays.days randDay = random.randrange(totalDays) randDate = minDate + timedelta(days=randDay) print(randDate) days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } def inputDate(): day = &quot;&quot; month = &quot;&quot; year = &quot;&quot; datestr = &quot;&quot; quit = False # while (datestr != &quot;quit&quot;): while (True): print(&quot; nEnter a day, month, and year in the &#39;dd-mm-yyyy&#39; format or type &#39;quit&#39; to quit.&quot;) # datestr = input() d = input() if (d == &quot;quit&quot;): print (&quot;Loop exited.&quot;) break m = input() if (m == &quot;quit&quot;): print (&quot;Loop exited.&quot;) break y = input() if (y == &quot;quit&quot;): print (&quot;Loop exited.&quot;) break diffDate(int(d), int(m), int(y)) def diffDate(day, month, year): timePass = date(year, month, day) if (timePass &gt; randDate): finalTime = timePass - randDate else: finalTime = randDate - timePass print(randDate, &quot;is&quot;, finalTime, &quot;away from&quot;, month,&quot;-&quot;,day,&quot;-&quot;,year,&quot;.&quot;) def diffDate2(dateStr): splits = dateStr.split(&quot;-&quot;) day = int(splits[0]) print(day) month = int(splits[1]) print(month) year = int(splits[2]) print(year) print(splits) timePass = date(year, month, day) if (timePass &gt; randDate): finalTime = timePass - randDate else: finalTime = randDate - timePass print(finalTime) inputDate() # expected output shown below (or something similar) # Input a day # 13 # Input a month # 7 # Input a year # 2010 # user day: 07/13/2010 # random day: 09/11/2010 # The number of days between the given range of dates is: 60 . Date range: 1900-01-01 to 2022-12-31 1914-11-19 Enter a day, month, and year in the &#39;dd-mm-yyyy&#39; format or type &#39;quit&#39; to quit. 1914-11-19 is 32216 days, 0:00:00 away from 2 - 1 - 2003 . Enter a day, month, and year in the &#39;dd-mm-yyyy&#39; format or type &#39;quit&#39; to quit. Loop exited. .",
            "url": "https://keiraokimoto.github.io/Fastpages/week-13/big-idea-3/2022/12/12/libraries-hw-copy.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/libraries-hw-copy.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 3 Sections 14-15 Homework",
            "content": "Notes: . (From the fill in the blanks) . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick Google search. Methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word &#39;from&#39;, followed by the package name, then the word &#39;import&#39;, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use &#39;*&#39;. . To import a method as an easier name, just do what we did first, add the word &#39;as&#39;, and write the name you would like to use that package as. . Random values - Randomly generated numbers created using a large set of numbers and a mathematical algorithm | Random values are good for randomizing outputs, which can make sure that there are not as many similar outputs | Random values can also be used for anything including probability, which includes gacha, dice rolls, and more | Really not sure what other notes I can add here | Remember to import random before trying to use a randomizer | . Create a program that asks the user for a day and then gives them a distance in days between that day and another random day in the year. We have provided you with a possible starter, but you are welcome to change it up if you would like. . from datetime import date, timedelta, datetime import random minDate, maxDate = date(1900, 1, 1), date(2022, 12, 31) print(&quot;Date range: &quot; + str(minDate) + &quot; to &quot; + str(maxDate)) dateDays = maxDate - minDate totalDays = dateDays.days randDay = random.randrange(totalDays) randDate = minDate + timedelta(days=randDay) print(randDate) def inputDate(): day = &quot;&quot; month = &quot;&quot; year = &quot;&quot; datestr = &quot;&quot; quit = False # while (datestr != &quot;quit&quot;): while (True): print(&quot; nEnter a day, month, and year in the &#39;dd-mm-yyyy&#39; format or type &#39;quit&#39; to quit.&quot;) # datestr = input() d = input() if (d == &quot;quit&quot;): print (&quot;Loop exited.&quot;) break m = input() if (m == &quot;quit&quot;): print (&quot;Loop exited.&quot;) break y = input() if (y == &quot;quit&quot;): print (&quot;Loop exited.&quot;) break diffDate(int(d), int(m), int(y)) def diffDate(day, month, year): timePass = date(year, month, day) if (timePass &gt; randDate): finalTime = timePass - randDate else: finalTime = randDate - timePass print(randDate, &quot;is&quot;, finalTime, &quot;away from&quot;, month,&quot;-&quot;,day,&quot;-&quot;,year,&quot;.&quot;) def diffDate2(dateStr): splits = dateStr.split(&quot;-&quot;) day = int(splits[0]) print(day) month = int(splits[1]) print(month) year = int(splits[2]) print(year) print(splits) timePass = date(year, month, day) if (timePass &gt; randDate): finalTime = timePass - randDate else: finalTime = randDate - timePass print(finalTime) inputDate() # expected output shown below (or something similar) # Input a day # 13 # Input a month # 7 # Input a year # 2010 # user day: 07/13/2010 # random day: 09/11/2010 # The number of days between the given range of dates is: 60 . Date range: 1900-01-01 to 2022-12-31 1983-01-04 Enter a day, month, and year in the &#39;dd-mm-yyyy&#39; format or type &#39;quit&#39; to quit. 1983-01-04 is 7333 days, 0:00:00 away from 2 - 1 - 2003 . Enter a day, month, and year in the &#39;dd-mm-yyyy&#39; format or type &#39;quit&#39; to quit. Loop exited. . Homework . Given a random decimal number convert it into binary. As extra, convert it to hexidecimal as well. . import random def printrandom(randNum): randNum = random.randint(1,100) print (&quot;Randomly generated number:&quot;, randNum) divValue = randNum remainder = 1 binaryConv = &#39;&#39; while divValue &gt; 0: remainder = divValue % 2 divValue = (int)(divValue / 2) binaryConv = str(remainder) + binaryConv print(&quot;Randomly generated number&quot;, randNum ,&quot;is&quot;, binaryConv,&quot;in binary.&quot;) # (binary converter taken from previous homework) printrandom(1) . Randomly generated number: 89 Randomly generated number 89 is 1011001 in binary. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | from datetime import date, timedelta, datetime import random minDate, maxDate = date(1900, 1, 1), date(2022, 12, 31) print(&quot;Date range: &quot; + str(minDate) + &quot; to &quot; + str(maxDate)) dateDays = maxDate - minDate totalDays = dateDays.days randDay = random.randrange(totalDays) randDate = minDate + timedelta(days=randDay) print(randDate) # used this in other assignment as well . Date range: 1900-01-01 to 2022-12-31 1918-10-18 . Challenge 1 . import random def coinflip(): flipCoin = random.choice([&quot;Heads&quot;, &quot;Tails&quot;]) print(flipCoin) coinflip() . Tails . Challenge 2: Turtle . Challenge 3: Math . The math package allows for some really cool mathematical methods! . Methods Action . ceil(x) | Returns whichever number is the next highest integer | . floor(x) | Rounds to largest integer less than or equal to x | . factorial(x) | Returns the factorial | . gcd(x, y) | Returns the greatest common denominator of x and y | . lcm(x, y) | Returns the least common multiple of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . from math import * import math x = &quot;&quot; y = &quot;&quot; while ((x != &quot;quit&quot;) and (y != &quot;quit&quot;)): x = input() if (x == &quot;quit&quot;): break y = input() if (y == &quot;quit&quot;): break # my vscode is giving me an &#39;attribute does not exist&#39; for LCM and I am not fixing that so. just know that i tried xf = float(x) yf = float(y) ceilNumX = math.ceil(xf) floorNumX = math.floor(xf) ceilNumY = math.ceil(yf) floorNumY = math.floor(yf) factNumX = math.factorial(int(xf)) lcmNumXY = math.lcm(int(floorNumX), int(floorNumY)) gcdNumXY = math.gcd(int(ceilNumX), int(ceilNumY)) factNumY = math.factorial(int(yf)) sqrtNumX = math.isqrt(int(floorNumX)) sqrtNumY = math.isqrt(int(floorNumY)) print (&quot;Ceiling of&quot;, x ,&quot;=&quot;, ceilNumX) print (&quot;Floor of&quot;, x ,&quot;=&quot;, floorNumX) print (&quot;Factorial of&quot;, x ,&quot;=&quot;, factNumX) print (&quot;Ceiling of&quot;, y ,&quot;=&quot;, ceilNumY) print (&quot;Floor of&quot;, y ,&quot;=&quot;, floorNumY) print (&quot;LCM of&quot;, y, x ,&quot;=&quot;, lcmNumXY) print (&quot;GCD of&quot;, y, x,&quot;=&quot;, gcdNumXY) print (&quot;Factorial of&quot;, y ,&quot;=&quot;, factNumY) print (&quot;Square root of&quot;, x,&quot;=&quot;, sqrtNumX) print (&quot;Square root of&quot;, y,&quot;=&quot;, sqrtNumY) . Ceiling of 2.34 = 3 Floor of 2.34 = 2 Factorial of 2.34 = 2 Ceiling of 3.45 = 4 Floor of 3.45 = 3 LCM of 3.45 2.34 = 6 GCD of 3.45 2.34 = 1 Factorial of 3.45 = 6 Square root of 2.34 = 1 Square root of 3.45 = 1 . Homework: Putting it all together(complete only after the random values lesson) . Option 1: Create a python program which generates a random number between 1 and 10, and use turtle to draw a regular polygon with that many sides. As a hint, remember that the total sum of all the angles in a polygon is (the number of sides - 2) * 180. Note: a regular polygon has all sides and angles the same size. Paste a screenshot of the code and the drawing from repl.it . Option 2: use the &quot;datetime&quot; package, and looking up documentation, create a program to generate 2 random dates and find the number of days between . Extra ideas: customize the settings, draw a picture, or something else! . Enjoy my creative randition of what I wanted from turtle vs what I got (6 hours of buffering with no results to show). . import random import turtle turns = [] t = turtle.Turtle() randNum = random.randint(1, 10) sideLen = input() print (&quot;Randomly generated number:&quot;, randNum) print (&quot;User input side length:&quot;, sideLen) for c in [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;]: t.color(c) turns = 0 for r in range(randNum): t.forward(sideLen) t.left(360/randNum) turns = turns + 1 if turns == randNum: break # So, my turtle doesn&#39;t like me and doesn&#39;t want to work so I just made this &#39;theoretical&#39; code # Essentially, it&#39;s just supposed to generate a random number, which the code marks as the &#39;randNum&#39;, or in other words, the amount of sides # The user can also choose to input a side length # It then prints the side length and number of sides (these are mostly for testing) # The color is randomly selected # Then the turtle will move in accordance to the numbers it&#39;s been dealt # t.forward is the side lengths, and it will move in accordance to the input # t.left is the corners of the shape; since a full circle is 360 degrees, the turtle will turn in a degree that is 360/the randomly generated number so it can have the right amount of sides # If I actually coded this right, the turtle will end at the same plSpades it started and keep looping forever because I didn&#39;t put an end code. But that&#39;s ok my turtle doesn&#39;t work so you won&#39;t ever have to see its eternal suffering, brought on by the stupidity of none other than my lack of sleep and endless desire to drop school completely # Actually I lied, I added the ending code # There&#39;s a turn counter that adds 1 to a neat little index and if that index = the amount of rotations the turtle will stop (hopefully. It can just keep going if it wants to. Goodbye turtle you will be missed.) . EXTRA: . Create a function that will randomly select 5 playing Cards and check if the 5 cards are a Royal Flush. . import random randCardList = [&quot;Ace Spades&quot;,&quot;King Spades&quot;, &quot;Queen Spades&quot;,&quot;Jack Spades&quot;,&quot;2 Spades&quot;, &quot;3 Spades&quot;,&quot;4 Spades&quot;,&quot;5 Spades&quot;,&quot;6 Spades&quot;,&quot;7 Spades&quot;,&quot;8 Spades&quot;,&quot;9 Spades&quot;,&quot;10 Spades&quot;, &quot;Ace Diamonds&quot;, &quot;King Diamonds&quot;, &quot;Queen Diamonds&quot;,&quot;Jack Diamonds&quot;,&quot;2 Diamonds&quot;, &quot;3 Diamonds&quot;,&quot;4 Diamonds&quot;,&quot;5 Diamonds&quot;,&quot;6 Diamonds&quot;,&quot;7 Diamonds&quot;,&quot;8 Diamonds&quot;,&quot;9 Diamonds&quot;,&quot;10 Diamonds&quot;,&quot;Ace Clubs&quot;,&quot;King Clubs&quot;, &quot;Queen Clubs&quot;,&quot;Jack Clubs&quot;,&quot;2 Clubs&quot;, &quot;3 Clubs&quot;,&quot;4 Clubs&quot;,&quot;5 Clubs&quot;,&quot;6 Clubs&quot;,&quot;7 Clubs&quot;,&quot;8 Clubs&quot;,&quot;9 Clubs&quot;,&quot;10 Clubs&quot;,&quot;Ace Hearts&quot;,&quot;King Hearts&quot;, &quot;Queen Hearts&quot;,&quot;Jack Hearts&quot;,&quot;2 Hearts&quot;, &quot;3 Hearts&quot;,&quot;4 Hearts&quot;,&quot;5 Hearts&quot;,&quot;6 Hearts&quot;,&quot;7 Hearts&quot;,&quot;8 Hearts&quot;,&quot;9 Hearts&quot;,&quot;10 Hearts&quot;,] flushList = [&quot;Ace Spades&quot;,&quot;King Spades&quot;, &quot;Queen Spades&quot;,&quot;Jack Spades&quot;, &quot;10 Spades&quot;] # Honestly I was going to try doing each Royal Flush but it was 12:30am and I was crying so I didn&#39;t but I was able to do one set def randCard(start, end, n = 5): cardListCount = 0 cardList = [] while (cardListCount &lt; n): r = random.randint(start, end-1) if r in cardList: continue cardList.append(r) cardListCount = cardListCount + 1 print (&quot;Randomly generated card list:&quot;, cardList) return cardList def check(cardList): corCount = 0 for cardIndex in cardList: ic = randCardList[cardIndex] if ic in flushList: corCount = corCount + 1 print(corCount,&quot;/5 cards in a Royal Flush&quot;) if corCount == 5: print(&quot;Royal Flush&quot;) cardRand = randCard(0, ((len(randCardList)) ), 5) print(cardRand) check(cardRand) . Randomly generated card list: [38, 45, 15, 25, 3] [38, 45, 15, 25, 3] 0 /5 cards in a Royal Flush 0 /5 cards in a Royal Flush 0 /5 cards in a Royal Flush 0 /5 cards in a Royal Flush 1 /5 cards in a Royal Flush .",
            "url": "https://keiraokimoto.github.io/Fastpages/week-13/big-idea-3/2022/12/12/Unit-3.14-3.15-HW.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/Unit-3.14-3.15-HW.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 3.15 Random Values Student Copy",
            "content": "Purpose/Objectives: Teach student how to implement randomness into their code to make their code simulate real life situations. . In this lesson students will learn: . How to import random to python | How to use random with a list or number range | How to code randomness in everyday scenarios | . ADD YOUR ADDITIONAL NOTES HERE: . What are Random Values? . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring . Each Result from randomization is equally likely to occur Using random number generation in a program means each execution may produce a different result . What are Examples of Random outputs in the world? Add a few you can think of. . Ex: Marbles | . Why do we need Random Values for code? . Random values are good for generating random numbers, which can be used in statistics to generate randomly selected groups that eliminate bias. Random values are also good for generating urls (more specifically, urls for sites such as Youtube where each video needs a random number at the end of its address). . Random values can be used in coding: . import random random_number = random.randint(1,100) print(random_number) . 87 . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . banana . Real Life Examples: Dice Roll . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot; + str(roll)) . Roll 1:4 Roll 2:4 Roll 3:4 . Challenge #1 . Write a function that will a simulate a coinflip and print the output . import random def coinflip(): flipCoin = random.choice([&quot;Heads&quot;, &quot;Tails&quot;]) print(flipCoin) coinflip() . Tails . EXTRA: Create a function that will randomly select 5 playing Cards and check if the 5 cards are a Royal Flush . import random randCardList = &quot;&quot; randCardList = [] def randCard(start, end, n=8): # function for generating random int randCardList = [] for i in range(n): # in a range identified in the code randCardList.append(random.random(start,end)) #randomizes random numbers print (&quot;Randomly generated number list:&quot;, randCardList) return randCardList if randCardList = ????? print(&quot;Royal Flush&quot;) for r in range(1): ranNums = randCardList(1, 100, 5) # generates numbers from 1-100, and only 8 of them binary = random.choice(randCardList) # a random binary is chosen from the binary list . Homework . Given a random decimal number convert it into number. As extra, convert it to hexidecimal as well. . import random def printrandom(randNum): randNum = random.randint(1,100) print (&quot;Randomly generated number:&quot;, randNum) divValue = randNum remainder = 1 binaryConv = &#39;&#39; while divValue &gt; 0: remainder = divValue % 2 divValue = (int)(divValue / 2) binaryConv = str(remainder) + binaryConv print(&quot;Randomly generated number&quot;, randNum ,&quot;is&quot;, binaryConv,&quot;in number.&quot;) # (number converter taken from previous homework) printrandom(1) . Randomly generated number: 36 Randomly generated number 36 is 100100 in binary. .",
            "url": "https://keiraokimoto.github.io/Fastpages/week-13/big-idea-3/2022/12/12/3.15-HW.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/3.15-HW.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 3.14 Libraries Lesson",
            "content": "Purpose: Help students streamline and make their coding experience easier through built in packages and methods from a library Objective: By the end of the lesson, students should be able to fluently use methods from the turtle and math packages, and be able to look up documentation for any python package and us it. . fill in the blanks! . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick Google search. Methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word &#39;from&#39;, followed by the package name, then the word &#39;import&#39;, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use &#39;*&#39;. . To import a method as an easier name, just do what we did first, add the word &#39;as&#39;, and write the name you would like to use that package as. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | from datetime import date, timedelta, datetime import random minDate, maxDate = date(1900, 1, 1), date(2022, 12, 31) print(&quot;Date range: &quot; + str(minDate) + &quot; to &quot; + str(maxDate)) dateDays = maxDate - minDate totalDays = dateDays.days randDay = random.randrange(totalDays) randDate = minDate + timedelta(days=randDay) print(randDate) # used this in other assignment as well . Date range: 1900-01-01 to 2022-12-31 2016-12-29 . Challenge 2: Turtle . Turtle is a python drawing package which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a graphics package to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with vscode. Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Documentation Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn&#39;t mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it . Commands . forward(pixels) | . right(degrees) | . left(degrees) | . setpos(x,y) | . speed(speed) | . pensize(size) | . pencolor(color) | . Note: Color should be within quotes, like &quot;brown&quot;, or &quot;red&quot; . from turtle import * oogway = Turtle() . Challenge 3: Math . The math package allows for some really cool mathematical methods! . Methods Action . ceil(x) | Returns whichever number is the next highest integer | . floor(x) | Rounds to largest integer less than or equal to x | . factorial(x) | Returns the factorial | . gcd(x, y) | Returns the greatest common denominator of x and y | . lcm(x, y) | Returns the least common multiple of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . from math import * import math x = &quot;&quot; y = &quot;&quot; while ((x != &quot;quit&quot;) and (y != &quot;quit&quot;)): x = input() if (x == &quot;quit&quot;): break y = input() if (y == &quot;quit&quot;): break # my vscode is giving me an &#39;attribute does not exist&#39; for LCM and I am not fixing that so. just know that i tried xf = float(x) yf = float(y) ceilNumX = math.ceil(xf) floorNumX = math.floor(xf) ceilNumY = math.ceil(yf) floorNumY = math.floor(yf) factNumX = math.factorial(int(xf)) lcmNumXY = math.lcm(int(floorNumX), int(floorNumY)) gcdNumXY = math.gcd(int(ceilNumX), int(ceilNumY)) factNumY = math.factorial(int(yf)) sqrtNumX = math.isqrt(int(floorNumX)) sqrtNumY = math.isqrt(int(floorNumY)) print (&quot;Ceiling of&quot;, x ,&quot;=&quot;, ceilNumX) print (&quot;Floor of&quot;, x ,&quot;=&quot;, floorNumX) print (&quot;Factorial of&quot;, x ,&quot;=&quot;, factNumX) print (&quot;Ceiling of&quot;, y ,&quot;=&quot;, ceilNumY) print (&quot;Floor of&quot;, y ,&quot;=&quot;, floorNumY) print (&quot;LCM of&quot;, y, x ,&quot;=&quot;, lcmNumXY) print (&quot;GCD of&quot;, y, x,&quot;=&quot;, gcdNumXY) print (&quot;Factorial of&quot;, y ,&quot;=&quot;, factNumY) print (&quot;Square root of&quot;, x,&quot;=&quot;, sqrtNumX) print (&quot;Square root of&quot;, y,&quot;=&quot;, sqrtNumY) . Ceiling of 2.34 = 3 Floor of 2.34 = 2 Factorial of 2.34 = 2 Ceiling of 3.45 = 4 Floor of 3.45 = 3 LCM of 3.45 2.34 = 6 GCD of 3.45 2.34 = 1 Factorial of 3.45 = 6 Square root of 2.34 = 1 Square root of 3.45 = 1 . Homework: Putting it all together(complete only after the random values lesson) . Option 1: Create a python program which generates a random number between 1 and 10, and use turtle to draw a regular polygon with that many sides. As a hint, remember that the total sum of all the angles in a polygon is (the number of sides - 2) * 180. Note: a regular polygon has all sides and angles the same size. Paste a screenshot of the code and the drawing from repl.it . Option 2: use the &quot;datetime&quot; package, and looking up documentation, create a program to generate 2 random dates and find the number of days between . Extra ideas: customize the settings, draw a picture, or something else! . import random import turtle turns = [] t = turtle.Turtle() randNum = random.randint(1, 10) sideLen = input() print (&quot;Randomly generated number:&quot;, randNum) print (&quot;User input side length:&quot;, sideLen) for c in [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;]: t.color(c) turns = 0 for r in range(randNum): t.forward(sideLen) t.left(360/randNum) turns = turns + 1 if turns == randNum: break # So, my turtle doesn&#39;t like me and doesn&#39;t want to work so I just made this &#39;theoretical&#39; code # Essentially, it&#39;s just supposed to generate a random number, which the code marks as the &#39;randNum&#39;, or in other words, the amount of sides # The user can also choose to input a side length # It then prints the side length and number of sides (these are mostly for testing) # The color is randomly selected # Then the turtle will move in accordance to the numbers it&#39;s been dealt # t.forward is the side lengths, and it will move in accordance to the input # t.left is the corners of the shape; since a full circle is 360 degrees, the turtle will turn in a degree that is 360/the randomly generated number so it can have the right amount of sides # If I actually coded this right, the turtle will end at the same place it started and keep looping forever because I didn&#39;t put an end code. But that&#39;s ok my turtle doesn&#39;t work so you won&#39;t ever have to see its eternal suffering, brought on by the stupidity of none other than my lack of sleep and endless desire to drop school completely # Actually I lied, I added the ending code # There&#39;s a turn counter that adds 1 to a neat little index and if that index = the amount of rotations the turtle will stop (hopefully. It can just keep going if it wants to. Goodbye turtle you will be missed.) . TclError Traceback (most recent call last) /mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2022-12-12-3.14-Libraries.ipynb Cell 11 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2022-12-12-3.14-Libraries.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import random &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2022-12-12-3.14-Libraries.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import turtle -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2022-12-12-3.14-Libraries.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; t = turtle.Turtle() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2022-12-12-3.14-Libraries.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; randNum = [] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/Keira/vscode/Fastpages/_notebooks/2022-12-12-3.14-Libraries.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; def printRan(randNum): File ~/anaconda3/lib/python3.9/turtle.py:3814, in Turtle.__init__(self, shape, undobuffersize, visible) 3809 def __init__(self, 3810 shape=_CFG[&#34;shape&#34;], 3811 undobuffersize=_CFG[&#34;undobuffersize&#34;], 3812 visible=_CFG[&#34;visible&#34;]): 3813 if Turtle._screen is None: -&gt; 3814 Turtle._screen = Screen() 3815 RawTurtle.__init__(self, Turtle._screen, 3816 shape=shape, 3817 undobuffersize=undobuffersize, 3818 visible=visible) File ~/anaconda3/lib/python3.9/turtle.py:3664, in Screen() 3660 &#34;&#34;&#34;Return the singleton screen object. 3661 If none exists at the moment, create a new one and return it, 3662 else return the existing one.&#34;&#34;&#34; 3663 if Turtle._screen is None: -&gt; 3664 Turtle._screen = _Screen() 3665 return Turtle._screen File ~/anaconda3/lib/python3.9/turtle.py:3680, in _Screen.__init__(self) 3673 def __init__(self): 3674 # XXX there is no need for this code to be conditional, 3675 # as there will be only a single _Screen instance, anyway 3676 # XXX actually, the turtle demo is injecting root window, 3677 # so perhaps the conditional creation of a root should be 3678 # preserved (perhaps by passing it as an optional parameter) 3679 if _Screen._root is None: -&gt; 3680 _Screen._root = self._root = _Root() 3681 self._root.title(_Screen._title) 3682 self._root.ondestroy(self._destroy) File ~/anaconda3/lib/python3.9/turtle.py:435, in _Root.__init__(self) 434 def __init__(self): --&gt; 435 TK.Tk.__init__(self) File ~/anaconda3/lib/python3.9/tkinter/__init__.py:2270, in Tk.__init__(self, screenName, baseName, className, useTk, sync, use) 2268 baseName = baseName + ext 2269 interactive = False -&gt; 2270 self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use) 2271 if useTk: 2272 self._loadtk() TclError: no display name and no $DISPLAY environment variable .",
            "url": "https://keiraokimoto.github.io/Fastpages/week-13/big-idea-3/2022/12/12/3.14-Libraries.html",
            "relUrl": "/week-13/big-idea-3/2022/12/12/3.14-Libraries.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 3.9 + 3.11 Homework",
            "content": "Notes: . Binary search: . One of the two searches that can be used | Can only be used with sorted arrays | Can be used in a while loop or recursive function | Uses a min/max value, halves it, and tests to see if the selected half value matches a requirement; if it doesn&#39;t, it takes either a higher or lower value (whichever is closer) to retest | . Sequential search: . Usually slower than a Binary Search, as it goes through every element in a list | Can be used in a while loop or recursive function | Should not be used for long calculations unless you want to explode your computer | . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def binarySearch(N): low = 0 high = N while high &gt;= low: mid = (high + low) // 2 if mid * mid == N: return mid elif mid * mid &gt; N: high = mid - 1 else: low = mid + 1 return 0 from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid():0000000 for i in range(len(test_cases)): if binarySearch(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() # ignore def sqrt(N), this was just testing one method of finding the square root def sqrtTest(N): if (N % 2) == 0: index = 2 else: index = 1 divV = index result = 0 while (result != divV): result = N / divV if (divV == result): return result divV = divV + index return 0 r = sqrtTest(100) print( (r),&quot;(Ignore this, it&#39;s just the test method code that runs slower than my PC trying to open Genshin Impact :) )&quot;) def binsearchsqrt(N): if (N % 2) == 0: index = 2 else: index = 1 divV = index result = 0 while (result != divV): result = N / divV if (divV == result): return result divV = divV + index return 0 . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed 10.0 (Ignore this, it&#39;s just the test method code that runs slower than my PC trying to open Genshin Impact :) ) . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid():0000000 for i in range(len(test_cases)): if binarySearch(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed . Unit 3.9 Homework . def calculateNumber(num): result = num if (num == 0): return [] result_list = [result] while result != 1: if (result % 2 == 0): # use mod = remander = 0 -&gt; even. 1 = odd result = result / 2 else: result = result * 3 + 1 result_list.append(int(result)) # appends the result to a string of results so it can be printed later return result_list # Input function s = &quot;&quot; while (s != &quot;q&quot;): print(&quot; nEnter a number or type &#39;q&#39; to quit.&quot;) s = input() try: if s != &quot;q&quot;: num = (int(s)) resultFinal = calculateNumber(num) print(resultFinal) except ValueError: print (&quot;Invalid input.&quot;) . Enter a number or type &#39;q&#39; to quit. [6, 3, 10, 5, 16, 8, 4, 2, 1] Enter a number or type &#39;q&#39; to quit. [1500, 750, 375, 1126, 563, 1690, 845, 2536, 1268, 634, 317, 952, 476, 238, 119, 358, 179, 538, 269, 808, 404, 202, 101, 304, 152, 76, 38, 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Enter a number or type &#39;q&#39; to quit. Invalid input. Enter a number or type &#39;q&#39; to quit. . Developing Algorithms (JavaScript) Challenge . I hope you don&#39;t mind the Javascript Emulator screenshot, but here is the finished challenge: . .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/12/09/Unit-3.9-3.11.html",
            "relUrl": "/2022/12/09/Unit-3.9-3.11.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: A named group of programming instructions that may have parameters and return values; can also be referred as method or function, depending on the language. . Parameters: Input values of a procedure . Arguments: Specify the values of the parameters when a procedure is called . Modularity: Separating a program&#39;s functions into independent blocks that work together to allow a program to function . Procedural Abstraction: The name for a process that allows a procedure to be used while only knowing what it does, and not how the program executes the procedure . What are some other names for procedures?: Processes, operations, modules . Why are procedures effective?: Procedures are effective because they allow for code to be more organized while still retaining functionality . Additional Notes: . Procedures interrupt a series of statements and makes the program execute the procedure instead | The original code will be run after the procedure is executed | Procedures may or may not return values (such as numbers or booleans) | Procedures need names to be called (Ex: &#39;convertDecimalToBinary&#39; for a decimal to binary converter) | Procedures allow for additional cells outside of code to be changed without having to change the code itself | . Challenge 1 below: . Add the command that will call the procedure. . decimal = 7 def convertToBinary(decimal): divValue = decimal remainder = 1 finalBin = &#39;&#39; while divValue &gt; 0: remainder = divValue % 2 divValue = (int)(divValue / 2) finalBin = str(remainder) + finalBin return finalBin binary = convertToBinary(decimal) print(binary) . 111 . Challenge 2 below: . Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . numA = 1000 numB = 1 # Repeat the process, this time creating a procedure called findMin, which will print the parameter with a smaller value. def findMin(numA, numB): if numA &gt; numB: return(numB) else: return(numA) # Within the procedure, write the code to determine which of the two parameters, numberA or numberB, is the larger value. Print that value. def findMax(numA, numB): if numA &lt; numB: return(numB) else: return(numA) findMin(1000, 1) # drivers for min and max findMax(1000, 1) # Call both functions so that the parameters numberA and numberB are given a value. resultMin = findMin(numA, numB) resultMax = findMax(numA, numB) print(&quot;Between&quot;, (numA), &quot;and &quot;, (numB),&quot;,&quot;,(resultMin), &quot;is the smaller number.&quot;) print(&quot;Between&quot;, (numA), &quot;and &quot;, (numB),&quot;,&quot;,(resultMax), &quot;is the bigger number.&quot;) # Optional bonus- create a procedure that can determine the minimum or maximum value out of more than two parameters. # haha... no . . Between 1000 and 1 , 1 is the smaller number. Between 1000 and 1 , 1000 is the bigger number. . // Start by creating a procedure called findMax and set the parameters to numberA and numberB. // Failed javascript attempt ignore this . // Within the procedure, write the code to determine which of the two parameters, numberA or numberB, is the larger value. Print that value. // Repeat the process, this time creating a procedure called findMin, which will print the parameter with a smaller value. // Call both functions so that the parameters numberA and numberB are given a value. // Optional bonus- create a procedure that can determine the minimum or maximum value out of more than two parameters. . Homework/Hacks: . For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . x = &#39;APCSP&#39; def charToBinary(x): byteString = bytearray(x,&#39;utf-8&#39;) # result = [] for byteValue in byteString: result.append(format( byteValue, &#39;b&#39;)) print((x), &#39;in binary is:&#39;, (result)) charToBinary(x) # The output shown below is the output you are supposed to get # &#39;&#39;APCSP&#39;&#39; in binary is # [1000001, 1010000, 1000011, 1010011, 1010000] . APCSP in binary is: [&#39;1000001&#39;, &#39;1010000&#39;, &#39;1000011&#39;, &#39;1010011&#39;, &#39;1010000&#39;] .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/12/08/Unit-3.12-3.13.html",
            "relUrl": "/2022/12/08/Unit-3.12-3.13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . TypeError Traceback (most recent call last) File ~/.local/lib/python3.8/site-packages/IPython/core/display.py:1032, in Image._data_and_metadata(self, always_both) 1031 try: -&gt; 1032 b64_data = b2a_base64(self.data).decode(&#39;ascii&#39;) 1033 except TypeError as e: TypeError: a bytes-like object is required, not &#39;str&#39; The above exception was the direct cause of the following exception: FileNotFoundError Traceback (most recent call last) File ~/.local/lib/python3.8/site-packages/IPython/core/formatters.py:973, in MimeBundleFormatter.__call__(self, obj, include, exclude) 970 method = get_real_method(obj, self.print_method) 972 if method is not None: --&gt; 973 return method(include=include, exclude=exclude) 974 return None 975 else: File ~/.local/lib/python3.8/site-packages/IPython/core/display.py:1022, in Image._repr_mimebundle_(self, include, exclude) 1020 if self.embed: 1021 mimetype = self._mimetype -&gt; 1022 data, metadata = self._data_and_metadata(always_both=True) 1023 if metadata: 1024 metadata = {mimetype: metadata} File ~/.local/lib/python3.8/site-packages/IPython/core/display.py:1034, in Image._data_and_metadata(self, always_both) 1032 b64_data = b2a_base64(self.data).decode(&#39;ascii&#39;) 1033 except TypeError as e: -&gt; 1034 raise FileNotFoundError( 1035 &#34;No such file or directory: &#39;%s&#39;&#34; % (self.data)) from e 1036 md = {} 1037 if self.metadata: FileNotFoundError: No such file or directory: &#39;../images/SequentialSearch.png&#39; . TypeError Traceback (most recent call last) File ~/.local/lib/python3.8/site-packages/IPython/core/display.py:1032, in Image._data_and_metadata(self, always_both) 1031 try: -&gt; 1032 b64_data = b2a_base64(self.data).decode(&#39;ascii&#39;) 1033 except TypeError as e: TypeError: a bytes-like object is required, not &#39;str&#39; The above exception was the direct cause of the following exception: FileNotFoundError Traceback (most recent call last) File ~/.local/lib/python3.8/site-packages/IPython/core/formatters.py:343, in BaseFormatter.__call__(self, obj) 341 method = get_real_method(obj, self.print_method) 342 if method is not None: --&gt; 343 return method() 344 return None 345 else: File ~/.local/lib/python3.8/site-packages/IPython/core/display.py:1054, in Image._repr_png_(self) 1052 def _repr_png_(self): 1053 if self.embed and self.format == self._FMT_PNG: -&gt; 1054 return self._data_and_metadata() File ~/.local/lib/python3.8/site-packages/IPython/core/display.py:1034, in Image._data_and_metadata(self, always_both) 1032 b64_data = b2a_base64(self.data).decode(&#39;ascii&#39;) 1033 except TypeError as e: -&gt; 1034 raise FileNotFoundError( 1035 &#34;No such file or directory: &#39;%s&#39;&#34; % (self.data)) from e 1036 md = {} 1037 if self.metadata: FileNotFoundError: No such file or directory: &#39;../images/SequentialSearch.png&#39; . &lt;IPython.core.display.Image object&gt; . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def binarySearch(N): low = 0 high = N while high &gt;= low: mid = (high + low) // 2 if mid * mid == N: return mid elif mid * mid &gt; N: high = mid - 1 else: low = mid + 1 return 0 from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid():0000000 for i in range(len(test_cases)): if binarySearch(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() # ignore def sqrt(N), this was just testing one method of finding the square root def sqrtTest(N): if (N % 2) == 0: index = 2 else: index = 1 divV = index result = 0 while (result != divV): result = N / divV if (divV == result): return result divV = divV + index return 0 r = sqrtTest(100) print( (r),&quot;(Ignore this, it&#39;s just the test method code that runs slower than my PC trying to open Genshin Impact :) )&quot;) def binsearchsqrt(N): if (N % 2) == 0: index = 2 else: index = 1 divV = index result = 0 while (result != divV): result = N / divV if (divV == result): return result divV = divV + index return 0 . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed 10.0 (Ignore this, it&#39;s just the test method code that runs slower than my PC trying to open Genshin Impact :) ) . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid():0000000 for i in range(len(test_cases)): if binarySearch(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/12/06/searching-introduction.html",
            "relUrl": "/2022/12/06/searching-introduction.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 . // split string using javascript numbs = ip.split(&quot;.&quot;) then use decTobinary for each of the split string). // Might need to convert string to int. Check decTobinary .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/12/06/developing-algorithms-js.html",
            "relUrl": "/2022/12/06/developing-algorithms-js.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. | What if I put in 30 as num and 4 as num2. What would be the output? | Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . What is the output of this algorithm? it looks similar but the output is different! . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = 0 counter = 0 # is counter max to use? so it can be whatever &gt; 9? for i in range (0, 10): if (i % 2 == 1): sum = sum + i counter = counter + 1 if (counter &gt;= 5): break print(sum) . 75 . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 . def calculateNumber(num): result = num if (num == 0): return [] result_list = [result] while result != 1: if (result % 2 == 0): # use mod = remander = 0 -&gt; even. 1 = odd result = result / 2 else: result = result * 3 + 1 result_list.append(int(result)) # appends the result to a string of results so it can be printed later return result_list # Input function s = &quot;&quot; while (s != &quot;q&quot;): print(&quot; nEnter a number or type &#39;q&#39; to quit.&quot;) s = input() try: if s != &quot;q&quot;: num = (int(s)) resultFinal = calculateNumber(num) print(resultFinal) except ValueError: print (&quot;Invalid input.&quot;) . Enter a number or type &#39;q&#39; to quit. [6, 3, 10, 5, 16, 8, 4, 2, 1] Enter a number or type &#39;q&#39; to quit. [100, 50, 25, 76, 38, 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Enter a number or type &#39;q&#39; to quit. [456, 228, 114, 57, 172, 86, 43, 130, 65, 196, 98, 49, 148, 74, 37, 112, 56, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Enter a number or type &#39;q&#39; to quit. .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/12/06/Developing-Algorithms.html",
            "relUrl": "/2022/12/06/Developing-Algorithms.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . i always represents the current index, so an extra index variable is not needed | indexes can be used to make lists of numbers | . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] ← x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1 | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . For Loops - Loops that apply a certain algorithm or function to an entire list of similar things; iterates until told not to/until conditions are met (infinite) | Recursive Loops - Loops that run through the code until reaching a specific break point | While Loops - run until the end of the list (sometimes not in some cases) | . Sorry if there&#39;s not many notes most of it was just the chart :( . . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . import random questions_list = [ #questions go here (remember to make them strings!) &quot;What does a for loop do?&quot;, &quot;What is a while loop?&quot;, &quot;What is a recursive loop?&quot;, &quot;How can you append to a list?&quot;, &quot;Why would you use an index?&quot;, ] answers = [ [ &quot;A loop that iterates until the completion conditions are met&quot;, &quot;Loops that apply a certain algorithm or function to an entire list of similar things&quot;, &quot;Loops that apply a certain algorithm or function to a list until completion conditions are met&quot;], [ &quot;Loops that start with &#39;while&#39;&quot;, &quot;A loop that runs until the end of the list&quot;, &quot;A loop that runs until the end of the list most of the time&quot;], [ &quot;A loop that runs until the code reaches a breakpoint&quot;, &quot;A loop that runs infinitely until it is told to stop&quot;, &quot;A loop that has a limited starting point&quot;], [ &quot;aList.pop(i)&quot;, &quot;aList.remove(value)&quot;, &quot;aList.append(value)&quot;], [ &quot;To make a list of numbers&quot;, &quot;To make numbers on a list easier to organize&quot;, &quot;To categorize data&quot;], ] def questionloop(): s = &quot;&quot; while (s != &quot;q&quot;): question = random.choice(questions_list) print(question) s = input() print(s) answercheck(s, question) #make an iterative function to ask the questions #this can be any loop you want as long as it works! def answercheck(s, question): i = questions_list.index(question) matchedAnswers = list(filter(lambda item: item == s, answers[i])) # Filters wrong/right, if it&#39;s not in the list it&#39;s wrong, and that makes it appear as &#39;empty&#39; # (Tests, basically shows the len and if the len is &gt;1, the answer is correct) print(matchedAnswers , str(len(matchedAnswers))) if (len(matchedAnswers)) &gt;= 1: # if the length was marked as &#39;none&#39; (0) in the previous line, then it&#39;s measured (using len) and marked as incorrect print(&quot;Correct.&quot;) else: print(&quot;Incorrect.&quot;) #make a function to check if the answer was correct or not questionloop() . What is a recursive loop? A loop that runs until the code reaches a breakpoint Correct. What is a while loop? incorrect answer Incorrect. What does a for loop do? Loops that apply a certain algorithm or function to an entire list of similar things Correct. How can you append to a list? q Incorrect. . . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list fourth = grocery_list[3] print(fourth) # Now, assign the fourth item in the list to a variable, x and then print the variable x = fourth print (x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&#39;umbrellas&#39;) grocery_list.append(&#39;artichokes&#39;) # Insert the item eggs as the third item of the list grocery_list.insert(2, &#39;eggs&#39;) # Remove milk from the list grocery_list.remove(&#39;milk&#39;) # Assign the element at the end of the list to index 2. Print index 2 to check index_2 = grocery_list[6] print (index_2) # Print the entire list, does it match ours ? print (grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichokes [&#39;apples&#39;, &#39;eggs&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] def binary_convert(bin): dec, i = 0, 0 # starts at 0 for c in bin: # c = character, bin = numbers in binary list ci = int(c) # convert string to int dec = dec + ci * pow(2,i) # index times power of base 2 = 1 or 0 i += 1 # adds/increases position in the index return(dec) decList = [] for bin in binarylist: dec = binary_convert(bin) decList.append(dec) print (&quot;Binary to decimal conversion of the Binary List:&quot;, decList) filteredList = list(filter(lambda item: item &lt; 100, decList)) # filters list so that ONLY items under 100 appear print(&quot;All values less than 100:&quot;, filteredList) #use this function to convert every binary value in binarylist to decimal #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results . Binary to decimal conversion of the Binary List: [146, 85, 105, 236, 55, 139, 129] All values less than 100: [85, 55] .",
            "url": "https://keiraokimoto.github.io/Fastpages/homework/",
            "relUrl": "/homework/",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Unit 3 Assignment Grades",
            "content": "Unit 3 Assignment Grades . Vocab for Unit 2 and 3 . Unit Number Due Date Grade Received Post Link . 3.1 - 3.2 | 12/2 | 0.8/1 | 3.1 - 3.2 Homework | . 3.3 - 3.4 | 12/2 | 0.8/1 | 3.3 - 3.4 Homework | . 3.5 - 3.7 | 12/7 | 1/1 | 3.5 - 3.7 Homework | . 3.8 + 3.10 | 12/7 | 0.95/1 | 3.8 + 3.10 Homework | . 3.9 + 3.11 | 12/15 | 0.87/1 | 3.9 + 3.11 Homework | . 3.12 + 3.13 | 12/15 | 0.8/1 | 3.12 + 3.13 Homework | . 3.14 + 3.15 | 12/15 | 0.88/1 | 3.4 + 3.15 Homework | . 3.16 | 12/15 | 0.97/1 | 3.16 Homework | . 3.17 - 3.18 | Taught this lesson | 12/16 | Grading | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/12/02/markdown-20.html",
            "relUrl": "/markdown%20posts/2022/12/02/markdown-20.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Homework",
            "content": ". Practice Problem . cookies = 5467; freeCookies = 5 if cookies &gt;= 10: print(&quot;Wow that&#39;s a lot of cookies.&quot;); else: print(&quot;. i&quot;); if freeCookies &gt;= 24: print(&quot;Surely you have to have extras. Can I have one?&quot;); else: print(&quot;froth froth froth froth froth froth froth&quot;); . Wow that&#39;s a lot of cookies. froth froth froth froth froth froth froth . Homework/Hacks . Our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): return(strs[::-1]) def ReverseNumber(num): return reverse(DecimalToBinary(num)) # Driver Code s = &quot;&quot; while (s != &quot;q&quot;): print(&quot; nEnter a number or type &#39;q&#39; to quit.&quot;) s = input() try: if s != &quot;q&quot;: num = (int(s)) result = ReverseNumber(num) print(&quot;Binary of&quot;, (num), &quot;is:&quot;, (result)) print (&quot;The length of&quot;, (result) , &quot;is:&quot;, (str(len(result)))) if (len(result)) &gt;= 10: print (&quot;Stream Crazy:B「指先のアリアドネ」 あんさんぶるスターズ！！ Music ゲームサイズMV&quot;) else: print (&quot;Stream Crazy:B &amp; UNDEAD「U.S.A.」あんさんぶるスターズ！！ Music ゲームサイズMV&quot;) except ValueError: print (&quot;Invalid input.&quot;) # my additions to the code that i accidently deleted twice but it&#39;s ok i screenshotted # ignore how i only have like 1 commit I did this all on a python emulator because I didn&#39;t want to get my laptop . Enter a number or type &#39;q&#39; to quit. Binary of 23125 is: 101101001010101 The length of 101101001010101 is: 15 Stream Crazy:B「指先のアリアドネ」 あんさんぶるスターズ！！ Music ゲームサイズMV Enter a number or type &#39;q&#39; to quit. Binary of 4 is: 100 The length of 100 is: 3 Stream Crazy:B &amp; UNDEAD「U.S.A.」あんさんぶるスターズ！！ Music ゲームサイズMV Enter a number or type &#39;q&#39; to quit. Invalid input. Enter a number or type &#39;q&#39; to quit. . . Notes . Boolean - 2 options (ex: true/false, yes/no, 0/1) | Relational Operator - Operators that can work between any two values of the same type | Logical Operator - Operators that work on operands to produce a single boolean result (such as and or not) | Relational operators go first, then logical . | All programs have conditionals . | Conditionals drive selection; they dictate what happens in a program based on whether something is true or false | Usually lots of if/else statements | Algorithm - A set of instructions that accomplish a task | Selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false | If/else statements change based on what has occured before | Nested Conditionals are like conditionals within conditionals | (Ex: If condtion 1 is met, condition 2 will occur, and if condition 2 occurs, condition 3 can occur) | .",
            "url": "https://keiraokimoto.github.io/Fastpages/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is ^ the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is * the symbol for division is / the symbol for modulus is % an algorithm is a sequence of steps that accomplishes a specific task . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1/10; 1 #step 1 value3 = value2*2; 2 #step 2 value4 = value3-4; 6 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for i in range(len(numlist)): xyz = int(numlist[i]) if xyz % 3 == 0: print( numlist[i] + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(decNo): divValue = decNo remainder = 1 x = &#39;&#39; while divValue &gt; 0: remainder = divValue % 2 divValue = (int)(divValue / 2) x = str(remainder) + x print(x) convert(4) # 100 convert(255) # 11111111 convert(15) # 1111 convert(39) # 100111 convert(1000) #1111101000 convert (5456) #1010101010000 . 100 11111111 1111 100111 1111101000 1010101010000 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is when two strings are combined with each other. Length is the amount of items in a string. A substring is a part of a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; x = string[0:5] y = string[5:8] print(x) print(y) . hello bye . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;Jaden&quot;,&quot;Max&quot;,&quot;Dylan&quot;,&quot;Orlando&quot;] def getStringLength(namelist): print(&#39;Name List Length = &#39;+ str(len(namelist))) for name in namelist: s = name + &#39; - &#39; + str(len(name)) + &#39; letters.&#39; print(s) getStringLength(names) . Name List Length = 4 Jaden - 5 letters. Max - 3 letters. Dylan - 5 letters. Orlando - 7 letters. . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | . . Unit 3.3 and 3.4 Notes . Not many notes here since most were on the document itself! | Will still be adding some notes here anyways, for convenience . | Length - the number of characters/item in a string . | Addition, subtraction, and division are all represented by their respective symbols | The only differences are multiplication and exponents (* and ^) | Concatenation (which I cannot spell) is essentially adding 2 strings together | Substrings are parts of strings | The length of a string is the amount of items or numbers in it | &#39;Str&#39; can be used to initialize something for printing | &#39;len&#39; tells the code to consider the entirety of the string&#39;s length | .",
            "url": "https://keiraokimoto.github.io/Fastpages/week-13/big-idea-3/2022/11/29/Unit-3.3-3.4-Homework.html",
            "relUrl": "/week-13/big-idea-3/2022/11/29/Unit-3.3-3.4-Homework.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 3.1 and 3.2",
            "content": ". title: Unit 3.1 and 3.2 Homework toc: true layout: post . categories: [post] . The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value for i in range(len(data)): if data[i] &gt; max_valid: print(i, data[i]) elif data[i] &lt; min_valid: print(i, data[i]) . 2 4 4 308 6 5 9 306 . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album = int(input(&quot;{Please select an album.&quot;)) song = int(input(&quot;Please select a song.&quot;)) print(&quot;Playing &quot;{0} &quot; from album &quot;{1} &quot;&quot;.format(albums[album-1][3][song-1][1],albums[album-1][0])) . Playing &#34;Don&#39;t Let Me Down&#34; from album &#34;Bad Company&#34; . .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/11/28/Unit-3.1-3.2-Homework.html",
            "relUrl": "/2022/11/28/Unit-3.1-3.2-Homework.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Character Octal Hexadecimal Decimal Minus . +1 | 00000000 | | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://keiraokimoto.github.io/Fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Introduction to Finance 1 Final Exam Study Guide",
            "content": "Introduction to Finance 1 Final Exam Study Guide . Net Income - The money a person has available after taxes and other deductions have been taken out of their paycheck . Gross Income - A person’s total income before taxes and other deductions . Balanced Budget - A budget in which the revenues and expenditures are equal (import/export are equal) . W-4 - A form that is filled by an employee to let employers know how much to withhold from the employee’s paycheck based on marital status, number of exemptions, and dependents . Checking Account - A liquid type of account with a bank or other financial institution that allows a person to deposit and withdraw money . Mutual Fund - An investment program funded by shareholders that has trades in diversified holdings and is managed professionally . Low Risk Investments: . Money market mutual fund - A fund where investments are made on short-term debt securities such as US treasury bills with the goal of creating a stable asset value through liquid investments | Treasury bond - A debt issued by the government to support government spending that pays back after a certain amount of time | Treasury note - A marketable US government debt security with a fixed interest rate and a maturity between 2 and 10 years | Treasury bill - A short-dated government security, yielding no interest but issued at a discount on its redemption price | Annuities - A fixed sum of money paid to someone each year, typically for the rest of their life or a form of insurance or investment entitling the investor to a series of annual sums | . Medium Risk Investments - Crowdfunded real estate, fundraising, dividend-paying stocks, corporate bonds, municipal bonds, preferred stocks are all medium risk investments . High Risk Investments - . Junk Bonds - bonds that carry a higher risk of default than most bonds issued by corporations and governments | Speculative Bonds - describes securities deemed to not be of investment quality by a credit rating agency | Penny Stocks - a common stock valued at less than one dollar, and therefore highly speculative | Rule of 72 - a simplified formula that calculates how long it’ll take for an investment to double in value, based on its rate of return (t = 72/r, t = number of periods required to double an investment’s value, r = interest rate per period, as a percentage) | . Depreciation - When something decreases in value over time . Appreciation - When something gains in value over time . Adjustable Rate Mortgage - an interest rate that may change periodically depending on changes in a corresponding financial index that’s associated with the loan . Fixed Rate Mortgage - an installment loan that has a fixed interest rate for the entire term of the loan . Amortization - a financial term that refers to your home loan pay off process . Dividend Income - a reward given to shareholders who have invested in a company’s equity, usually originating from the company’s net profits . Interest Income - Earnings generated by investments such as savings accounts and certificates of deposit . Benefits - a reduction in the cost of finance, including interest, finance charges, costs, fees and discounts on a redemption amount . Savings Account - a bank account that earns interest . Certificate of Deposit - a savings account that holds a fixed amount of money for a fixed period of time, such as six months, one year, or five years, and in exchange, the issuing bank pays interest . FDIC Insurance - a bank or thrift account that is covered or insured by the Federal Deposit Insurance Corporation (FDIC) . Simple Interest - the straightforward crediting of cash flows associated with some investment or deposit . Compound Interest - that the interest associated with a bank account, loan, or investment increases exponentially over time . Bond - a fixed-income instrument that represents a loan made by an investor to a borrower . Dividend - the distribution of a company’s earnings to its shareholders and is determined by the company’s board of directors . Index - a group or basket of securities, derivatives, or other financial instruments that represents and measures the performance of a specific market, asset class, market sector, or investment strategy . Market Price - the current price at which an asset or service can be bought or sold . Rate of return - the percentage change in the value of an investment . Credit limit - the maximum amount of money a lender will allow you to spend on a credit card or a line of credit . MSRP - the price that the manufacturer suggests that the dealer ask for the vehicle . Invoice Price - the initial price that the manufacturer charges the dealer . Down payment - an initial payment made when something is bought on credit. . Leasing - contract outlining the terms under which one party agrees to rent an asset owned by another party . Renters insurance - property insurance that provides coverage for a policyholder’s belongings, liabilities, and possibly living expenses in case of a loss event . Security deposit - money that is given to a landlord, lender, or seller of a home or apartment as proof of intent to move in and care for the domicile .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/11/10/markdown-19.html",
            "relUrl": "/markdown%20posts/2022/11/10/markdown-19.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Statistics Unit II Vocabulary",
            "content": "Statistics Unit II Vocabulary . Population - An entire group of which information is being collected | Sample - A subset of the population which data is collected from | Sampling Frame - The actual set of units from which a sample has been drawn/a list of selected units in a set | Voluntary Response Sample - Response taken from subjects who volunteer their answers | Convenience Sample - A sample taken from the most easily accessible population | Bias - A skew towards a specific result due to favoritism or otherwise that would not typically be present in the data | Undercoverage - When some members of a population are misrepresented or not represented at all in a sample | Systemic Random Sample - A sample with a random starting point, with equal intervals to select more subjects | Simple Random Sample - When the sampling method ensures every individual/group is equally likely to be chosen for a sample | Stratified Random Sample - Meaningful groups created from a population, with a random sample taken from each group | Cluster Sample - Naturally occurring diverse groups where all the individuals in the selected groups are sampled | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/11/10/markdown-18.html",
            "relUrl": "/markdown%20posts/2022/11/10/markdown-18.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Test Corrections 11/07",
            "content": "Test Corrections 11/07 . Question 1 . In this question, I answered C because I assumed the ‘*’ symbol was referring to putting the result to the power of 5, but the * symbol was actually meant to symbolize multiplication. That is why the answer would be D instead of C. . Question 2 . In this question, I selected B, which says that the code displays nothing if x is negative and false if otherwise. However, the answer would actually be C, because the code tells the variable x to display as nothing if the value of X is negative, because it has no code to tell the value to display as true or false. . Question 11 . For this question, I answered A because I assumed that the ‘repeat until’ command told the code that it needed to iterate through the entire list and compare each element to the others in the list. However, the answer is actually B, because it compares each element to the elements that follow it in the list. This is because it iterates through j/k + 1, which tells the code to do the element after the one that has just looped. . Question 24 . For this question, I answered C but the answer is actually A. This is because I miscalculated the binary and instead of binary 1101 being after 12, I put it before 12. Binary 1101 is supposed to be equivelent to 13, which comes after decimal 12. . Question 32 . In this question, you are supposed to change yourList into the string from myList after the code is run through, but I added both the lists together instead, so the answer would actually be A because this answer simply says that the result of yourList is the same as the data from myList. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/11/07/markdown-17.html",
            "relUrl": "/post/2022/11/07/markdown-17.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Night at the Museum (11/3)",
            "content": "Night at the Museum 11/3 . When I went to Night at the Museum on Thursday, I saw a lot of projects from this class and a few others. One of the projects I saw from this class was from Noor and her group, where they used a search function that could use emotions (and synonyms of the provided emotion words) to provide a song that went with the given emotion. The program also featured an API that had each song on it, as well as a way for the user to vote for which emotion the song represented. The program would register the users’ votes for each song, for example, a Mitski song being voted as sad. The program would then take this information and match it to an emotion, so it would appear when that emotion was added in the search function. . I also went to one of my other classes, which is AP Studio Art, to look at the work from my friends in that class. There were no descriptions of the works, but they were displayed on the projecter for the class to see. The images there were progress shots of our works, and it was very interesting to see how the works progressed from bare minimum sketches to fully finished works. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/11/04/markdown-16.html",
            "relUrl": "/post/2022/11/04/markdown-16.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "AP Classroom Completed Assignments (10/17)",
            "content": "AP Classroom Completed Assignments (10/17) . The AP Classroom Completed Assignments for this week. . 4.1 . Computers used to be very large, and take up full rooms because of how big they were | Computers got smaller as time progressed | Computers needed to connect to each other in order to work | Routers were created to help computers work faster and connect to each other | Routers also help information find its way from the sender to the receiver | Packets are small amounts of data sent over a network, which include data, source information, and destination information | Packets are sent by the sender and received by the receiver | Computer systems are groups of computers working together to achieve a common goal | Computer networks are a group of interconnected devices that send and receive data | Packet switching is when a message/file is broken up into packets and sent in any order, then reassembled by the receiving device | A path is the network between two computing devices, and is a sequence of directly connected computing devices | Bandwidth (measured in bits per second (BPS)) is the maximum amount of data that can be sent in a fixed amount of time on a computer network | . . 4.2 . OSI (Open Systems Interconnect) - The layers needed to go through to communicate (Application, Presentation, Session, Transport, Network, Data Link, Physical) | TCP (Transmission Control Protocol) - Establishes a common standard for how to send messages between devices on the internet (Application, Transport, Internet, Network Access) | There are many different protocols, standards, and etc. used in the Application/Transport levels, such as HTTP and DNS (OSI layers 3-7) | Internet Engineering Task Force (IETF) manages the development of internet standards via written technical discussions (Requests for Comments, RFC) in an open and collaborative process | Network Access Layer: Pulls the 1’s and 0’s from a wire or radio wave, focused on hardware and protocols that carry 1’s or 0’s | Each NIC has a unique address associated with it (Media Access Control (MAC) Address), used for local hops | . | Network Access/Internet Layer Data Transmission: A packet contains data that is being transmitted as well as metadata containing iniformation used for routing information | . | Internet Layer: Internet was designed to be scalable/able to change in size and scale to meet new demands | Local Area Network (LAN) physically connects, limited by hardware and physics, 1 to hundreds of systems | Intranet - LANs connected by routers within an organization, hundreds to thousands of systems | Autonomous Systems (AS) - Large intranets linked together under the control and policies of major organizations, tens of thousands of systems | The internet, millions of systems made of Autonomous Systems linked together | . | Transport Layer: TCP does error checking and error recovery, so it is slower | UDP performs error checking, but discards erroneous packets | Open standards and protocols enable different manufacturers and developers to build hardware/software that can communicate with the hardware/software on the rest of the internet | . | Internet/Transport Layers: Reliability - Reliability - Sender gets a receipt back, can be resended as needed | Transport Control Protocol (TCP) | Unreliability - Send and forget, User Datagram Protocol (UDP) | . | Purpose “Port” - Number assigned to an application or survice | 3 targets can be addressed using IP: Unicast - A specific device, internet wifde access; TCP is used | Multicast - A group of devices, it is specific range of IP addresses with internet wide access, UDP is used | Broadcast - All devices, LAN-wide, data stops at the router, and a UDP is used | . | . | Application Layer: Web servers - programs running on machines connected to the internet; provides web pages to clients, links to other pages using Uniform Resource Locations (URLs) | Domain Name Service (DNS) - Applications that translate a human readable url to an IP address, holds a database of mapping of names to IPs | . | Ethernet is the most popular way to access a network | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/16/markdown-15.html",
            "relUrl": "/post/2022/10/16/markdown-15.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "AP Classroom Completed Assignments",
            "content": "AP Classroom Completed Assignments . The AP Classroom Completed Assignments for this week. Can’t open the assignment because it hasn’t been graded, but here is the proof that it is completed. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/09/markdown-14.html",
            "relUrl": "/post/2022/10/09/markdown-14.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "College Board Program Design",
            "content": "College Board Program Design . Program Purpose and Function . Our program’s purpose is to provide vocabulary for math (AP Calc and AP Statistics), as well as physics, and provide quizzes to test skills. | The program’s function will be to use dictionaries, inputs, and outputs, to show information. | . Data Abstraction . Dictionaries can be used to store data; data can be backlogged using a ‘console.log’ command (or something similar). | Lists/dictionaries can also be used for search functions (ie; if ‘Statistics’ is searched, a list of words related to ‘Statistics’ will be run, and those items will appear. | . Managing Complexity . Multiple lists can be used to map data, and dictionaries can be used to map certain data to lists | Ex: If a term for the name of a list is searched, it can bring up those terms, and when a term is clicked, a dictionary can direct to different links. | . Procedural Abstraction . We will have a function to administer our quiz that references to a dictionary for the questions and answers, and has a score tracker that when the quiz is finished, outputs different phrases according to how well they did. | We are also considering a functionality in which it will take the type of answers failed and relate it to either outside resources for it or something in our program | . Algorithm Implementation . An algorithm we will have will first ask someone for their current math/science class, then look through dictionary to see the level it would be at in high school (eg. integraded 1a: low, pre-cal: mid, ap calc: high), if the class they state is not given the program will ask if they are taking something outside of school or if they misspelled, then give a chance to clarify. If they are taking something outside of school the program will tell them to try and relate it to one of or school’s courses through provided internet materials. After figuring out their class, our program will ask how much they are struggling, and show a correlated amount of related material to support them. | . Testing . We will institute a reward for quizzes, which will test if there are high scores in the quizzes that the user took, which were stored in a dictionary made, and if there are enough decently high scores they will be redirected to a page that either has a game or links to something enjoyable. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/09/markdown-13.html",
            "relUrl": "/post/2022/10/09/markdown-13.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Python RapidAPI",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;e819277188msh68a6f7af77fad4dp172d06jsnc2bc1f8ab152&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . import requests import json url = &quot;https://shazam.p.rapidapi.com/search&quot; querystring = {&quot;term&quot;:&quot;kiss the rain&quot;,&quot;locale&quot;:&quot;en-US&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;limit&quot;:&quot;5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;e819277188msh68a6f7af77fad4dp172d06jsnc2bc1f8ab152&quot;, &quot;X-RapidAPI-Host&quot;: &quot;shazam.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) print(&quot;Track_Name&quot;) tracks = response.json().get(&#39;tracks&#39;) hits = tracks.get(&#39;hits&#39;) for track in hits: if track [&quot;track&quot;][&#39;key&#39;] == &#39;40099833&#39;: json_formatted_str = json.dumps(track [&quot;track&quot;], indent=4) print (json_formatted_str) . Track_Name { &#34;layout&#34;: &#34;5&#34;, &#34;type&#34;: &#34;MUSIC&#34;, &#34;key&#34;: &#34;40099833&#34;, &#34;title&#34;: &#34;Kiss The Rain&#34;, &#34;subtitle&#34;: &#34;Yiruma&#34;, &#34;share&#34;: { &#34;subject&#34;: &#34;Kiss The Rain - Yiruma&#34;, &#34;text&#34;: &#34;I used Shazam to discover Kiss The Rain by Yiruma.&#34;, &#34;href&#34;: &#34;https://www.shazam.com/track/40099833/kiss-the-rain&#34;, &#34;image&#34;: &#34;https://is3-ssl.mzstatic.com/image/thumb/Music115/v4/0a/d1/e8/0ad1e89c-df29-a43e-9852-eb6ece2dd556/21UMGIM24785.rgb.jpg/400x400cc.jpg&#34;, &#34;twitter&#34;: &#34;I used @Shazam to discover Kiss The Rain by Yiruma.&#34;, &#34;html&#34;: &#34;https://www.shazam.com/snippets/email-share/40099833?lang=en-US&amp;country=US&#34;, &#34;avatar&#34;: &#34;https://is4-ssl.mzstatic.com/image/thumb/Features115/v4/3f/84/4e/3f844e97-8c23-b64d-87f1-d536e99f80e9/mzl.rsxdpqqq.jpg/800x800cc.jpg&#34;, &#34;snapchat&#34;: &#34;https://www.shazam.com/partner/sc/track/40099833&#34; }, &#34;images&#34;: { &#34;background&#34;: &#34;https://is4-ssl.mzstatic.com/image/thumb/Features115/v4/3f/84/4e/3f844e97-8c23-b64d-87f1-d536e99f80e9/mzl.rsxdpqqq.jpg/800x800cc.jpg&#34;, &#34;coverart&#34;: &#34;https://is3-ssl.mzstatic.com/image/thumb/Music115/v4/0a/d1/e8/0ad1e89c-df29-a43e-9852-eb6ece2dd556/21UMGIM24785.rgb.jpg/400x400cc.jpg&#34;, &#34;coverarthq&#34;: &#34;https://is3-ssl.mzstatic.com/image/thumb/Music115/v4/0a/d1/e8/0ad1e89c-df29-a43e-9852-eb6ece2dd556/21UMGIM24785.rgb.jpg/400x400cc.jpg&#34;, &#34;joecolor&#34;: &#34;b:0f1513p:f6f1ees:d7d6d1t:c7c5c2q:afafab&#34; }, &#34;hub&#34;: { &#34;type&#34;: &#34;APPLEMUSIC&#34;, &#34;image&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/applemusic_{scalefactor}.png&#34;, &#34;actions&#34;: [ { &#34;name&#34;: &#34;apple&#34;, &#34;type&#34;: &#34;applemusicplay&#34;, &#34;id&#34;: &#34;1576663126&#34; }, { &#34;name&#34;: &#34;apple&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;https://audio-ssl.itunes.apple.com/itunes-assets/AudioPreview112/v4/b5/71/fd/b571fdea-62b9-64e8-1531-3d845cf6ee58/mzaf_8999534599011571502.plus.aac.ep.m4a&#34; } ], &#34;options&#34;: [ { &#34;caption&#34;: &#34;OPEN&#34;, &#34;actions&#34;: [ { &#34;name&#34;: &#34;hub:applemusic:deeplink&#34;, &#34;type&#34;: &#34;applemusicopen&#34;, &#34;uri&#34;: &#34;https://music.apple.com/us/album/kiss-the-rain/1576662868?i=1576663126&amp;mttnagencyid=s2n&amp;mttnsiteid=125115&amp;mttn3pid=Apple-Shazam&amp;mttnsub1=Shazam_ios&amp;mttnsub2=5348615A-616D-3235-3830-44754D6D5973&amp;itscg=30201&amp;app=music&amp;itsct=Shazam_ios&#34; }, { &#34;name&#34;: &#34;hub:applemusic:deeplink&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;https://music.apple.com/us/album/kiss-the-rain/1576662868?i=1576663126&amp;mttnagencyid=s2n&amp;mttnsiteid=125115&amp;mttn3pid=Apple-Shazam&amp;mttnsub1=Shazam_ios&amp;mttnsub2=5348615A-616D-3235-3830-44754D6D5973&amp;itscg=30201&amp;app=music&amp;itsct=Shazam_ios&#34; } ], &#34;beacondata&#34;: { &#34;type&#34;: &#34;open&#34;, &#34;providername&#34;: &#34;applemusic&#34; }, &#34;image&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/overflow-open-option_{scalefactor}.png&#34;, &#34;type&#34;: &#34;open&#34;, &#34;listcaption&#34;: &#34;Open in Apple Music&#34;, &#34;overflowimage&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/applemusic-overflow_{scalefactor}.png&#34;, &#34;colouroverflowimage&#34;: false, &#34;providername&#34;: &#34;applemusic&#34; }, { &#34;caption&#34;: &#34;BUY&#34;, &#34;actions&#34;: [ { &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;https://itunes.apple.com/us/album/kiss-the-rain/1576662868?i=1576663126&amp;mttnagencyid=s2n&amp;mttnsiteid=125115&amp;mttn3pid=Apple-Shazam&amp;mttnsub1=Shazam_ios&amp;mttnsub2=5348615A-616D-3235-3830-44754D6D5973&amp;itscg=30201&amp;app=itunes&amp;itsct=Shazam_ios&#34; } ], &#34;beacondata&#34;: { &#34;type&#34;: &#34;buy&#34;, &#34;providername&#34;: &#34;itunes&#34; }, &#34;image&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/itunes-overflow-buy_{scalefactor}.png&#34;, &#34;type&#34;: &#34;buy&#34;, &#34;listcaption&#34;: &#34;Buy on iTunes&#34;, &#34;overflowimage&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/itunes-overflow-buy_{scalefactor}.png&#34;, &#34;colouroverflowimage&#34;: false, &#34;providername&#34;: &#34;itunes&#34; } ], &#34;providers&#34;: [ { &#34;caption&#34;: &#34;Open in Spotify&#34;, &#34;images&#34;: { &#34;overflow&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/spotify-overflow_{scalefactor}.png&#34;, &#34;default&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/spotify_{scalefactor}.png&#34; }, &#34;actions&#34;: [ { &#34;name&#34;: &#34;hub:spotify:searchdeeplink&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;spotify:search:Kiss%20The%20Rain%20Yiruma&#34; } ], &#34;type&#34;: &#34;SPOTIFY&#34; }, { &#34;caption&#34;: &#34;Open in Deezer&#34;, &#34;images&#34;: { &#34;overflow&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/deezer-overflow_{scalefactor}.png&#34;, &#34;default&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/deezer_{scalefactor}.png&#34; }, &#34;actions&#34;: [ { &#34;name&#34;: &#34;hub:deezer:searchdeeplink&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;deezer-query://www.deezer.com/play?query=%7Btrack%3A%27Kiss+The+Rain%27%20artist%3A%27Yiruma%27%7D&#34; } ], &#34;type&#34;: &#34;DEEZER&#34; } ], &#34;explicit&#34;: false, &#34;displayname&#34;: &#34;APPLE MUSIC&#34; }, &#34;artists&#34;: [ { &#34;id&#34;: &#34;42&#34;, &#34;adamid&#34;: &#34;73406786&#34; } ], &#34;url&#34;: &#34;https://www.shazam.com/track/40099833/kiss-the-rain&#34; } .",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 1 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter t is the 0 letter in the alphabet . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . from dataclasses import FrozenInstanceError from logging.handlers import BufferingHandler menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; n front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) def menuloop(): total = 0 choice = &#39;&#39; while choice != &#39;done&#39;: choice = input(&#39;Please select an item from the menu.&#39;) if choice != &#39;done&#39;: if choice in menu : print(&#39;Selected:&#39;, choice , &#39;. Price:&#39;, menu[choice]) total += menu [choice] else: print (&#39;This item does not exist. Please select another item.&#39;) return total total = menuloop() print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Selected: burger . Price: 3.99 This item does not exist. Please select another item. Selected: fries . Price: 1.99 Selected: drink . Price: 0.99 Selected: drink . Price: 0.99 7.960000000000001 .",
            "url": "https://keiraokimoto.github.io/Fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "AP Prep Questions",
            "content": "AP Prep Questions . . I got most of the questions correct, except for the fourth and fifth questions on 1.2. . . For question 4, I selected C, but the answer was supposed to be B. This is because the information about which restaurants Brandon and Cynthia visited would not be needed to calculate a restaurant, only allergies and dietary restrictions. . . For question 5, I selected C, but the answer was supposed to be B. This is because the list compares each element to the all elements following it, not just one element immediately following the previous element. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/02/markdown-12.html",
            "relUrl": "/post/2022/10/02/markdown-12.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "HTML Bootstraps Table",
            "content": "Javascript Tutorial Table Link . &lt;!doctype html&gt; . Insert title here . Insert title here . . Bread Cheese Milk Sourdough Parmasan Rice Wheat Chedder Almond Potato Swiss Coconut",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/09/26/markdown-11.html",
            "relUrl": "/post/2022/09/26/markdown-11.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Groupwork",
            "content": "Scrum Team Roles and Project . Our Scrum team is made up of Ellie, Zeen, Keira, and Giannina. . Roles . Frontend: Ellie | Backend: Giannina | Scrum Master: Keira | DevOps: Zeen | . Project . Our project is a website largely focused on helping students with school activities with a side of sports. This is to help people who were struggling in the same position as us and make their lives the tiniest bit easier. . Sprint . First we will set up our website for the first two or so days, allowing Ellie to set up the CSS and other base background stuff. This will take us around 3 days through our usual schedule. Afterwards we will work on our volleyball section, probably taking the rest of our 7 days, first laying out the text of volleyball terms and strategies, and then adding in the visual element. If we finish early on this, we will start on the math section’s definition and terms section. .",
            "url": "https://keiraokimoto.github.io/Fastpages/group/2022/09/26/markdown-10.html",
            "relUrl": "/group/2022/09/26/markdown-10.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "HTML Table",
            "content": "Javascript Tutorial Table Link . &lt;!doctype html&gt; . Insert title here . Insert title here . . Bread Cheese Milk Sourdough Parmasan Rice Wheat Chedder Almond Potato Swiss Coconut",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/HTML_Table",
            "relUrl": "/techtalk/HTML_Table",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Team Project Plan",
            "content": "Team Project Plan . This is the plan for our team project. .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/25/markdown-9.html",
            "relUrl": "/markdown%20posts/2022/09/25/markdown-9.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var leader = new Person(&quot;Eichi Tenshouin&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;leader&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, age, year, unit) { this.name = name; this.age = age; this.year = year; this.unit = unit; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, age: this.age, year: this.year, unit: this.unit, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable leader var leader = new Person(&quot;Eichi Tenshouin&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;fine&quot;); leader.setRole(&quot;Leader&quot;); // output of Object and JSON/string associated with Leader logItType(leader); // object type is easy to work with in JavaScript logItType(leader.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Eichi Tenshouin&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Leader&#39; } string ; {&#34;name&#34;:&#34;Eichi Tenshouin&#34;,&#34;age&#34;:&#34;19&#34;,&#34;year&#34;:&#34;Graduated&#34;,&#34;unit&#34;:&#34;fine&#34;,&#34;role&#34;:&#34;Leader&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var members&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a member Array of Person(s) var members = [ new Person(&quot;Wataru Hibiki&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;fine&quot;), new Person(&quot;Kaoru Hakaze&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;UNDEAD&quot;), new Person(&quot;Midori Takamine&quot;, &quot;17&quot;, &quot;Third Year&quot;, &quot;Ryuseitai&quot;), new Person(&quot;Niki Shiina&quot;, &quot;19&quot;, &quot;Dropped Out&quot;, &quot;Crazy:B&quot;), new Person(&quot;Tsukasa Suou&quot;, &quot;17&quot;, &quot;Second Year&quot;, &quot;Knights&quot;), new Person(&quot;Tsumugi Aoba&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;Switch&quot;) ]; // define a classroom and build Classroom objects and json function Classroom(leader, members){ // 1 leader, many member // start Classroom with Leader leader.setRole(&quot;Leader&quot;); this.leader = leader; this.classroom = [leader]; // add each Member to Classroom this.members = members; this.members.forEach(member =&gt; { member.setRole(&quot;Member&quot;); this.classroom.push(member); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined leader and members compsci = new Classroom(leader, members); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Eichi Tenshouin&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Leader&#39; }, Person { name: &#39;Wataru Hibiki&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Member&#39; }, Person { name: &#39;Kaoru Hakaze&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;UNDEAD&#39;, role: &#39;Member&#39; }, Person { name: &#39;Midori Takamine&#39;, age: &#39;17&#39;, year: &#39;Third Year&#39;, unit: &#39;Ryuseitai&#39;, role: &#39;Member&#39; }, Person { name: &#39;Niki Shiina&#39;, age: &#39;19&#39;, year: &#39;Dropped Out&#39;, unit: &#39;Crazy:B&#39;, role: &#39;Member&#39; }, Person { name: &#39;Tsukasa Suou&#39;, age: &#39;17&#39;, year: &#39;Second Year&#39;, unit: &#39;Knights&#39;, role: &#39;Member&#39; }, Person { name: &#39;Tsumugi Aoba&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;Switch&#39;, role: &#39;Member&#39; } ] string ; Eichi Tenshouin string ; {&#34;name&#34;:&#34;Eichi Tenshouin&#34;,&#34;age&#34;:&#34;19&#34;,&#34;year&#34;:&#34;Graduated&#34;,&#34;unit&#34;:&#34;fine&#34;,&#34;role&#34;:&#34;Leader&#34;} object ; { name: &#39;Eichi Tenshouin&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Leader&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Year&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Unit&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.year + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.unit + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameAgeYearUnitRole . Eichi Tenshouin | 19 | Graduated | fine | Leader | Wataru Hibiki | 19 | Graduated | fine | Member | Kaoru Hakaze | 19 | Graduated | UNDEAD | Member | Midori Takamine | 17 | Third Year | Ryuseitai | Member | Niki Shiina | 19 | Dropped Out | Crazy:B | Member | Tsukasa Suou | 17 | Second Year | Knights | Member | Tsumugi Aoba | 19 | Graduated | Switch | Member | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Fastpages Blog Post",
            "content": "Fastpages Blog Post . Collab Work + Collab Quiz . . As the video explained, happiness comes from living in the moment, rather than in the past or the future, and because of this I am going to start doing daily things that make me happy, even if it takes a lot of effort. . What I want to try doing: . I’ll try to spend more time with friends and making connections among people, as well as joining communities. | I’ll always remind the people I love of how much I appreciate them, and foster my relationships and community, and I’ll stop carrying about money that brings me food. | I’ll focus on the present moment and what I can do now, all the possibiliies and the actions I can make right now to make me happy and live a more fulfilling life, and I won’t focus specifically on the future, only what’s in the present. | I’ll spend more time resting, so I’m able to have a clearer mind as well | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/18/markdown-7.html",
            "relUrl": "/markdown%20posts/2022/09/18/markdown-7.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Planning For the Performance Task",
            "content": "Performance Task Planning . Main Concept: . Website will be mostly school based | There will be a Math, Physics, Volleyball, and Gacha section | . For Math Section: . Will have AP Calculus as well as AP Statistics | Calculators, both for equations as well as normal calculations | Will have definitions as well as equations | For quizzes, there will be some for both AP Statistics and AP Calculus Both will have the page format: Start -&gt; Question -&gt; Incorrect page with how to solve/Correct page -&gt; Repeats until last page | . | . For Physics Section: . Very similar to the Math Section, but with Physics | Calculators for physics equations will be included, as well as definitions/terms | Will also have quizzes with the same format | . For Volleyball Section . Mostly volleyball terms, strategies, and etc. | Will also have images explaining terms/strategies | . For Gacha Section . Essentially a gacha calculator that gives random character pulls at a precent chance (likely using a print function) | Mostly just a ‘For fun’ section, may or may not get to this but it would be fun to include | . Requirements . Knowledge of math | Knowledge of python math functions | Knowledge on quizzes | Knowledge of liquid for automation of certain portions | Probably other things as we flesh out the concept (will be decided later) | . Current Ability . At this point in time, we can already do the design and quiz portions, however the calculator for the math section and the gacha section will require us to learn more aspects of Python and Liquid There are probably other minute details we haven’t noticed that we don’t know how to do yet | . Resources . We have Github, Google, VSCode, Youtube, Khan Academy, and the APCSP homepage to support us | . The reasoning we have for our website is that the math and science sections will support us in our studying and school lives, and hopefully help others students struggling in school by providing them with resources and learning materials. Volleyball stats will help us explore our interests while expanding our knowledge on computer science and its possibilities in many fields, and the gacha sections will help us learn more on probability and output for the end user, as well as being something fun to do. to encourage us. .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/11/markdown-6.html",
            "relUrl": "/markdown%20posts/2022/09/11/markdown-6.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Planning for Applab Quiz",
            "content": "Planning for Applab Quiz . . AppLab Code Plan . Page Order: | Start | Question 1 | If correct -&gt; Correct page | If incorrect -&gt; Incorrect page | For both incorrect and correct pages: click continue, continues to next question (repeat until all questions are finished) | Endpage . | Dictionaries are added for storing keys/values, keys being the questions/page names and the values being the correct answers | Dictionaries are added into functions, which change depending on the question (ie: Question1 will have the ‘correct’ value as ‘button3’, whereas Question2 will have the ‘correct’ value as ‘ans1’) | A wrong answer will direct to the incorrect_page, which is the same page for every incorrect | The same goes for correct answers, a correct answer will direct to the correct_page | Both the incorrect and correct pages have a ‘Continue’ button, which will change to the next question (question1, then question2, then question3, and the endpage) | . Successes/Discoveries . I was able to get the code to work using many dictionaries, lists, events, and other commands | Buttons, correct answers, and incorrect answers were all assigned using dictionaries | Dictionaries + keys + values tell the program which code belongs to which | Dictionaries + functions work as commands, which the program uses to determine which page to move to | “Question(number)” : (value) -&gt; The number of events/button clicks that can take place; used later in the code, which the code uses to move to a different page | Essentially, dictionaries and lists can be used with loops to move to different pages | . Challenges . Could not finish the dictionaries for the incorrect/correct pages | Each page has an ‘onEvent’ command which sends it to the next page | Could add a dictionary + loop for the ‘incorrect/correct’ pages that changes, and sends to a different question after being clicked | . Applab AP Stats Quiz . Applab AP Stats Quiz .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/11/markdown-5.html",
            "relUrl": "/markdown%20posts/2022/09/11/markdown-5.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Theme Changing Bugs",
            "content": "Theme Changing Bugs . . Bugs . Tags disappeared | Home button disappeared | Tables lack columns | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/05/markdown-4.html",
            "relUrl": "/markdown%20posts/2022/09/05/markdown-4.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Time Box Fragments",
            "content": ". Time Box Fragments . Week Date Links Description . Week 0 | August 21, 2022 | Review Ticket 0 | First week, mostly just setup. | . Week 1 | August 28, 2022 | Review Ticket 1 | Second week, personalizing pages and adding more features, such as a quiz and other tabs. | . Week 2 | September 05, 2022 | Review Ticket 2 | Third week, modifying lists and dictionaries, as well as modifying the theme. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/05/markdown-3.html",
            "relUrl": "/markdown%20posts/2022/09/05/markdown-3.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Keira&quot;, &quot;LastName&quot;: &quot;Okimoto&quot;, &quot;DOB&quot;: &quot;December 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;keiraokimoto@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;], &quot;Owns_Cheese&quot;: &quot;None&quot;, &quot;Hobbies&quot;: [&quot;Swimming&quot;, &quot;Drawing&quot;, &quot;Playing games&quot;, &quot;Sleeping&quot;], }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;George&quot;, &quot;LastName&quot;: &quot;Washington&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Some cemetary somewhere&quot;, &quot;Email&quot;: &quot;georgewashington@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;], &quot;Owns_Cheese&quot;: &quot;Parmasan&quot;, &quot;Hobbies&quot;: [&quot;Swimming&quot;, &quot;Horseback riding&quot;, &quot;Hunting&quot;], }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Keira&#39;, &#39;LastName&#39;: &#39;Okimoto&#39;, &#39;DOB&#39;: &#39;December 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;keiraokimoto@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;None&#39;], &#39;Owns_Cheese&#39;: &#39;None&#39;, &#39;Hobbies&#39;: [&#39;Swimming&#39;, &#39;Drawing&#39;, &#39;Playing games&#39;, &#39;Sleeping&#39;]}, {&#39;FirstName&#39;: &#39;George&#39;, &#39;LastName&#39;: &#39;Washington&#39;, &#39;DOB&#39;: &#39;May 12&#39;, &#39;Residence&#39;: &#39;Some cemetary somewhere&#39;, &#39;Email&#39;: &#39;georgewashington@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;None&#39;], &#39;Owns_Cheese&#39;: &#39;Parmasan&#39;, &#39;Hobbies&#39;: [&#39;Swimming&#39;, &#39;Horseback riding&#39;, &#39;Hunting&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Cheese: &quot;, d_rec[&quot;Owns_Cheese&quot;]) print(&quot; t&quot;, &quot;Hobbies:&quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Keira Okimoto Residence: San Diego Birth Day: December 21 Cars: None Cheese: None Hobbies:Swimming, Drawing, Playing games, Sleeping George Washington Residence: Some cemetary somewhere Birth Day: May 12 Cars: None Cheese: Parmasan Hobbies:Swimming, Horseback riding, Hunting . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Keira Okimoto Residence: San Diego Birth Day: December 21 Cars: None Cheese: None Hobbies:Swimming, Drawing, Playing games, Sleeping George Washington Residence: Some cemetary somewhere Birth Day: May 12 Cars: None Cheese: Parmasan Hobbies:Swimming, Horseback riding, Hunting . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Keira Okimoto Residence: San Diego Birth Day: December 21 Cars: None Cheese: None Hobbies:Swimming, Drawing, Playing games, Sleeping George Washington Residence: Some cemetary somewhere Birth Day: May 12 Cars: None Cheese: Parmasan Hobbies:Swimming, Horseback riding, Hunting . . List Loops . Yeet variable is a list of strings, storing random words. The while loop is used to iterate through the list. Each item in the list is printed in the order added. The index is started at 0 and increment by 1 for each time. . yeet = [&quot;woo&quot;, &quot;wee&quot;, &quot;hee&quot;, &quot;hoo&quot;, &quot;yee&quot;, &quot;yoo&quot;] # while loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(yeet): print(yeet[i]) i += 1 return while_loop() . While loop output woo wee hee hoo yee yoo . For Loop for Lists . For a For Loop, the name of the list is defined and placed into the code. It is defined as d_yeet. . def print_data(d_yeet): print(d_yeet) def for_loop(): print(&quot;For loop output n&quot;) for record in yeet: print_data(record) for_loop() # Prints data in the d_yeet list . For loop output woo wee hee hoo yee yoo . Reverse Loop for Lists . For the reversed list, the code is defined the same as the original loop, but the reverse command is added to reverse the list. . yeet = [&quot;woo&quot;, &quot;wee&quot;, &quot;hee&quot;, &quot;hoo&quot;, &quot;yee&quot;, &quot;yoo&quot;] #yeet is the variable and it is equal to the string def print_data(d_yeet): print(d_yeet) #&#39;d_yeet&#39; is used to replace the name &#39;yeet&#39; as a definition def reverse_for_loop(): print (&quot;Reverse for loop using reversed n&quot;) for record in reversed(yeet): print_data(record) reverse_for_loop() #reversed command reverses the list def reverse_for_loop_2(): print (&quot;Reverse for loop using range n&quot;) for index in range(len(yeet) -1, -1, -1): print_data(yeet[index ]) reverse_for_loop_2() #reversing the data using a range - &#39;len&#39; = the length. -1 subtracts from the list/makes it reverse . Reverse for loop using reversed yoo yee hoo hee wee woo Reverse for loop using range yoo yee hoo hee wee woo . Recursive Loop for Lists . For a recursive loop with a list, the list name is added to the code. . yeet = [&quot;woo&quot;, &quot;wee&quot;, &quot;hee&quot;, &quot;hoo&quot;, &quot;yee&quot;, &quot;yoo&quot;] # recursive loop essentially continues endlessly until the exit condition is met (which ends at (i + 1)) def recursive_loop(i): if i &lt; len(yeet): record = yeet[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output woo wee hee hoo yee yoo . Dictionary/List Quiz . import getpass, sys EnstarsUnits = [&quot;ALKALOID&quot;, &quot;Trickstar&quot;, &quot;fine&quot;, &quot;Eden&quot;, &quot;Knights&quot;] EnstarsCharacters = [&quot;Hiiro&quot;, &quot;Mao&quot;, &quot;Wataru&quot;, &quot;Nagisa&quot;, &quot;Ritsu&quot;] # Lists (ignore these they aren&#39;t used in the code) Enstars = { &quot;ALKALOID&quot;: &quot;Hiiro Amagi&quot;, &quot;Trickstar&quot;: &quot;Mao Isara&quot;, &quot;fine&quot;: &quot;Wataru Hibiki&quot;, &quot;Eden&quot;: &quot;Nagisa Ran&quot;, &quot;Knights&quot;: &quot;Ritsu Sakuma&quot;, } # The dictionary/list dictionary CorrectList = {} IncorrectList = {} # Empty dictionaries used to store data def question_with_response(unit): print(&quot;What is your favorite &quot; + unit + &quot; character?&quot;) msg = input () return msg # defines and prints question; asks for input def question(): for unit in EnstarsUnits: rsp = question_with_response(unit) if (rsp != Enstars [unit]): print (rsp + &quot; is incorrect.&quot;) IncorrectList [unit] = rsp else: print (rsp + &quot; is correct.&quot;) CorrectList [unit] = rsp # defines unit as one of the keys in the dictionary # answers are marked as incorrect if they do not match the values that go with the keys question() . What is your favorite ALKALOID character? Hiiro Amagi is correct. What is your favorite Trickstar character? Mao Isara is correct. What is your favorite fine character? Wataru Hibiki is correct. What is your favorite Eden character? Nagisa Ran is correct. What is your favorite Knights character? Ritsu Sakuma is correct. . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://keiraokimoto.github.io/Fastpages/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Second Markdown Post with Image",
            "content": "Second Markdown Post . . Pretty sure I’m only supposed to put an image here so here’s an image . Images . Enjoy the snail I drew on MSPaint specifically for this page . .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/08/28/markdown-2.html",
            "relUrl": "/markdown%20posts/2022/08/28/markdown-2.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "AP Stats Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;What is the best reason for choosing a stemplot rather than a histogram to display the distribution of a quantitative variable?&quot;) if rsp == &quot;Stemplots make it easier to determine the shape of a distribution&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;The scores on a statistics test had a mean of 25 and a standard deviation of 3. If a score of 28 was added to the distribution of scores, what would happen to the mean and standard deviation?&quot;) if rsp == &quot;The mean will increase, and standard deviation will decrease&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;There are many houses ranging from $200,000 to $500,000 in price. The few houses on the water, however, are priced up to $15 million. The distribution of house prices will be...?&quot;) if rsp == &quot;Skewed to the right&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, keira running /home/keira/anaconda3/bin/python You will be asked 3 questions. Question: What is the best reason for choosing a stemplot rather than a histogram to display the distribution of a quantitative variable? Stemplots make it easier to determine the shape of a distribution is correct! Question: The scores on a statistics test had a mean of 25 and a standard deviation of 3. If a score of 28 was added to the distribution of scores, what would happen to the mean and standard deviation? The mean will increase, and standard deviation will decrease is correct! Question: There are many houses ranging from $200,000 to $500,000 in price. The few houses on the water, however, are priced up to $15 million. The distribution of house prices will be...? Skewed to the right is correct! keira you scored 3/3 .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/08/28/TP110-python_hello.html",
            "relUrl": "/2022/08/28/TP110-python_hello.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/keira/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/keira/.local/share/jupyter/kernels/bash javascript /home/keira/.local/share/jupyter/kernels/javascript python3 /home/keira/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/keira/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Docx Post1",
            "content": "Graph Description Notes: . Context - Use variable/group names . | Shape (Roughly symmetric, double peaked binomial, single peaked unimodal, right or left skew) . | Outliers - Any unusual observations . | Center - The average/typical values . | Spread - Variability . | If comparing, use comparative language for center/spread (higher, lower, etc.) . | . Center: . Median - the middle point if a distribution . | Use with skewed data . | . Mean: . m = sum of terms/number of terms . | . Use with symmetric data . | . Variability: . Range = Maximum - Minimum . | ‘The context typically varies by sx from the mean of x.’ . | . Non-Resistant Measures: . Greatly affected by extreme values . | Example: Mean, standard deviation, range . | .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/08/26/Docx-Post1.html",
            "relUrl": "/2022/08/26/Docx-Post1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "First Markdown Post",
            "content": "First Markdown Post . . Hi uhhh I’m not sure what to put here. My name is Keira Okimoto and I’m a senior. That’s about it. . Lists . Just some lists about me. . Here’s a list of countries I’ve been to: . England | Japan | Vietnam | Italy | France | Germany | . And a numbered list of birds I’ve had: . Comet | Star | Matcha | Blue | Mochi | Images . Enjoy the hedgehog I drew on MSPaint . . Code . Random code because why not . # Prints &#39;hello there&#39; print(hello there) . Tables . A random table . Column 1 Column 2 . Table | Chair | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/08/21/markdown-1.html",
            "relUrl": "/markdown%20posts/2022/08/21/markdown-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "First Notebook Post",
            "content": "print(&#39;Hello world!&#39;) . Hello world! .",
            "url": "https://keiraokimoto.github.io/Fastpages/jupyter%20posts/2022/08/21/Notebook1.html",
            "relUrl": "/jupyter%20posts/2022/08/21/Notebook1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- hide: true - branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://keiraokimoto.github.io/Fastpages/example/2020/02/20/test.html",
            "relUrl": "/example/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post63": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://keiraokimoto.github.io/Fastpages/example/2020/01/14/test-markdown-post.html",
            "relUrl": "/example/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Notes",
          "content": "Unit 3 Notes . (I’ve basically copy pasted these from the lessons for ease of access) . Unit 3.1 and 3.2 . Variables and Assignments Notes . I did my best. Ya’ll were speedrunning I am NOT a speedrunner. . Python: . Variables - Name/define; other functions can be done after naming = - Will set something equal to something else, usually a word and number or list, etc Functions can be performed when names are applied (it tells the function to apply to things with the same name) Floats - Decimals that can be used to do math/whatever a function asks for Dictionaries assign keys and values . Javascript: . ‘var xyz’ is a variable assignment (ie; variables can be assigned using var) Booleen is true/false Strings are words, such as ‘let’ Lists - const (name) = . Data Abstraction: . For APs, indexes start at 1 rather than 0 | . Python: . Lists look like: name = [“word”, “word”] | Lists are often used to store data | Lists can also be used to make more lists by using the format: list = [“Strawberry - Fruit”, “Brocolli - Vegetable”] And add: fruit = [] and vegetable = [] Code such as ‘for fruit in list’ can be used to specify what the program is supposed to do with the items under this category in the list | Split [split()] function can be used to split a string into a list | Join [join()] method takes all items in an iterable and joins them into one string; a string must be specified as a seperator | . Javascript: . this.(name) can be used to specify different types of data, (name) can be used to make a category for the data to go in | data can be displayed using var (variable name) = [ new (variable name)(“Name”, “Date”, “Age”), etc etc.]; | A function can be used afterwards to store the data, using: function (function name)(name, (variable name)) name.setRole(“Name”); this.name = name; this.variable name = [Name]; Etc., etc. | . . Unit 3.3 and 3.4 Notes . Vocab: fill in the blanks . The symbol for exponent is ^ The symbol for addition is + The symbol for subtraction is - The symbol for multiplication is * The symbol for division is / The symbol for modulus is % An algorithm is a sequence of steps that accomplishes a specific task . Index is a number representing a position, like a character’s position in a string or a string’s position in a list. Concatenation is when two strings are combined with each other. Length is the amount of items in a string. A substring is a part of a string. . Length - the number of characters/item in a string | Addition, subtraction, and division are all represented by their respective symbols | The only differences are multiplication and exponents (* and ^) | Concatenation (which I cannot spell) is essentially adding 2 strings together | Substrings are parts of strings | The length of a string is the amount of items or numbers in it | ‘Str’ can be used to initialize something for printing | ‘len’ tells the code to consider the entirety of the string’s length . Unit 3.5, 3.6, and 3.7 Notes . | Boolean - 2 options (ex: true/false, yes/no, 0/1) | Relational Operator - Operators that can work between any two values of the same type | Logical Operator - Operators that work on operands to produce a single boolean result (such as and or not) | Relational operators go first, then logical . | All programs have conditionals | Conditionals drive selection; they dictate what happens in a program based on whether something is true or false | Usually lots of if/else statements | Algorithm - A set of instructions that accomplish a task | Selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false | If/else statements change based on what has occured before | Nested Conditionals are like conditionals within conditionals | (Ex: If condtion 1 is met, condition 2 will occur, and if condition 2 occurs, condition 3 can occur) . Unit 3.8 and 3.10 Notes . | Pseudocode Operation | Python Syntax | Description | |:———————–:|—————|:——————————————————————————————————————————:| | aList[i] | aList[i] | Accesses the element of aList at index i | | x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable ‘x’ | | aList[i] ← x | aList(i) = x | Assigns the value of a variable ‘x’ to the element of a List at index i | | aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | | INSERT(aList, i, value) | aList.insert(i, value) | _value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. _ | | APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1 | | REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | _Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. _ | . | For Loops - Loops that apply a certain algorithm or function to an entire list of similar things; iterates until told not to/until conditions are met (infinite) | Recursive Loops - Loops that run through the code until reaching a specific break point | While Loops - run until the end of the list (sometimes not in some cases) | . . Unit 3.9 and 3.11 Notes . Binary search: . One of the two searches that can be used | Can only be used with sorted arrays | Can be used in a while loop or recursive function | Uses a min/max value, halves it, and tests to see if the selected half value matches a requirement; if it doesn’t, it takes either a higher or lower value (whichever is closer) to retest | . Sequential search: . Usually slower than a Binary Search, as it goes through every element in a list | Can be used in a while loop or recursive function | Should not be used for long calculations unless you want to explode your computer . Unit 3.12 and 3.13 Notes . | . Procedure: A named group of programming instructions that may have parameters and return values; can also be referred as method or function, depending on the language. . Parameters: Input values of a procedure . Arguments: Specify the values of the parameters when a procedure is called . Modularity: Separating a program’s functions into independent blocks that work together to allow a program to function . Procedural Abstraction: The name for a process that allows a procedure to be used while only knowing what it does, and not how the program executes the procedure . What are some other names for procedures?: Processes, operations, modules . Why are procedures effective?: Procedures are effective because they allow for code to be more organized while still retaining functionality . Additional Notes: . Procedures interrupt a series of statements and makes the program execute the procedure instead | The original code will be run after the procedure is executed | Procedures may or may not return values (such as numbers or booleans) | Procedures need names to be called (Ex: ‘convertDecimalToBinary’ for a decimal to binary converter) | Procedures allow for additional cells outside of code to be changed without having to change the code itself . Unit 3.14 and 3.15 Notes . | . Packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick Google search. Methods are used with the following: . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word ‘from’, followed by the package name, then the word ‘import’, then the method. This will alllow you to use the method without mentioning the package’s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use ‘*’. . To import a method as an easier name, just do what we did first, add the word ‘as’, and write the name you would like to use that package as. . Random values - Randomly generated numbers created using a large set of numbers and a mathematical algorithm | Random values are good for randomizing outputs, which can make sure that there are not as many similar outputs | Random values can also be used for anything including probability, which includes gacha, dice rolls, and more | Really not sure what other notes I can add here | Remember to import random before trying to use a randomizer . Unit 3.16 Notes . | Simulations are used to simplify/modify certain variables | Simulations can contain bias | They can be used to simulate things as tests (ie, launching a bomb) when these actions are too dangerous/impractical to do in the real world | Simulations can also be used to create situations that are too difficult to recreate in the real world (specific weather conditions for example) | Random modules define series of objects that can be generated randomly | Randomization helps simulations, as they can help predict many varying probablilities of a simulation | Abstractions use conditionals to execute one part of the code only when a particular condition is met, repeat looping, simplification, and it does not request input from the user or display output to the user | It is far cheaper to create a simulation than to do said actions in real life . Taught Unit 3.17 and 3.18, no notes for these units. . | .",
          "url": "https://keiraokimoto.github.io/Fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Bootstraps Table + Table Link",
          "content": "| Javascript Table | Extra Statistics Unit II Vocabulary | Team Project Plan | Groupwork | HTML Bootstraps Table | API | . Javascript Tutorial Table Link . &lt;!doctype html&gt; . Insert title here . Insert title here . . Bread Cheese Milk Sourdough Parmasan Rice Wheat Chedder Almond Potato Swiss Coconut",
          "url": "https://keiraokimoto.github.io/Fastpages/categories/",
          "relUrl": "/categories/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "Hello! My name is Keira Okimoto and I’m a senior going to Del Norte High School. I have two birds, Blue (male) and Mochi (female). I like to spend my time drawing, sleeping, eating, or playing games. That’s…. Pretty much it. .",
          "url": "https://keiraokimoto.github.io/Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "API",
          "content": "| Customer Service Survey | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://keiraokimoto.github.io/Fastpages/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Vocab",
          "content": "Compsci Vocab . Unit 2 Binary/Data Terms . Bits - the smallest unit of data that a computer can process and store | Bytes - A unit of data that is eight binary digits long | Hexadecimal/Nibbles - A base-16 numbering system that uses the digits 0 through 9 and the letters A through F to represent data, including nibbles and bytes | . Binary Numbers: . Unsigned Integer - Integers that have the property that they don’t have a + or - sign associated with them | Signed Integer - Integers that can be positive or negative | Floating Point - A variable type that is used to store floating-point number values | . Binary Data Abstractions: . Boolean - A logical data type that can have only the values true or false (Ex:) | . | ASCII - A standard data-encoding format for electronic communication between computers | Unicode - The universal character representation standard for text in computer processing | RGB - A system for representing the colors to be used on a computer display | . Data Compression: . Lossy - A data encoding and compression technique that deliberately discards some data in the compression process | Lossless - A type of compression that restores and rebuilds file data in its original form after the file is decompressed | . Unit 3 Algorithm/Programming Terms . Variables - an abstract storage location paired with an associated symbolic name | Data Types - Strings, Characters,Integers, Floats, or Booleans | Assignment Operators - An assignment statement that sets aor re-sets the value sto- - red in the storage location(s) denoted by a variable name | . Managing Complexity with Variables: . Lists - An abstract data type that represents a finite number of ordered values, where the same value may occur more than once | 2D Lists - A list used to store objects (Ex: List = [“Item 1”, “Item 2”, “Item 3”,]) | . | Dictionaries - An abstract data type that defines an unordered collection of data as a set of key-value pairs (Ex: variable1: A, variable2: B, variable3: C) | . | Class - A template definition of the method s and variable s in a particular kind of object | Algorithms - A specific procedure for solving a well-defined computational problem (Ex: def convertDecToBinary being stated then recalled later in the code using only ‘convertDecToBinary’) | . | Sequence - When your computer will run your code in order, one line at a time from the top to the bottom of your program | Selection - A programming construct where a section of code is run only if a condition is met | Iteration - A process where a set of instructions or structures are repeated in a sequence a specified number of times or until a condition is met (Ex: if x &gt; y: print x, else: (etc., etc.)) | . | Expressions - A computer program statement that evaluates to some value (Ex: * = Multiply, + = Add) | . | Comparison Operators - Operators that compare values and return true or false (Ex: if x &gt; y: print true, else: false) | . | Booleans Expressions and Selection - When one of two options are selected: True or False, Yes or No, etc. (Ex: if x &gt; y: print true, else: end loop) | . | Booleans Expressions and Iteration - When one of two options are selected: True or False, Yes or No, etc. in a repeating loop (Ex: if x &gt; y: print true, else: false) | . | Truth Tables - A table that shows all possible combinations of inputs and, for each combination, the output that the circuit will produce (Ex: alist.append appends, alist.remove removes, etc.) | . | Characters - A display unit of information equivalent to one alphabetic letter or symbol (Ex: A, B, C, = 1, 2, 3 (but binary is probably better)) | . | Strings - An array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding (Ex: String = [‘Item 1’, ‘Item 2’, ‘Item 3’]) | . | Length - The length of characters a computer’s processor can handle (Ex: 8-bit, 16-bit, etc.) | . | Concatenation - The operation of joining two strings together (Ex: string3 = string1 + string2) | . | Upper - A value that is greater than or equal to every element of a set of data | Lower - A value that is lesser than or equal to every element of a set of data | Traversing Strings - Accessing all the elements of the string one after the other by using the subscript (Ex: if/else statement that evaluates each element in a string) | . | . Python: . If, Elif, Else conditionals - Conditional statements that provide you with the decision making that is required when you want to execute code based on a particular condition (Ex: if x &gt; y: print x, else: (etc., etc.)) | . | Nested Selection Statements - Structures are used when more than one decision must be made before carrying out a task (Ex: if x &gt; y:, if x &gt; 10, print x, else: print y, else: (etc., etc.)) | . | For, While loops with Range, with List - Loops used to repeat a section of code an unknown number of times until a specific condition is met | Combining loops with conditionals to Break - Loops that stop when a specific condition is met, when they would normally continue forever otherwise (Ex: while loop with an if/else print that will end the loop) | . | Continue - A statement that forces the next iteration of the loop to take place, skipping any code in between | Procedural Abstraction - Sections of code that have variable parameters | Python Def procedures - Procedures that allow us to group a block of code under a name, known as a procedure name | Parameters - A special kind of variable used in a function to refer to one of the pieces of data provided as input to the function | Return Values - A value that a function returns to the calling script or function when it completes its task (Ex: return example) | . | .",
          "url": "https://keiraokimoto.github.io/Fastpages/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://keiraokimoto.github.io/Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}