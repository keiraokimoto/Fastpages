{
  
    
        "post0": {
            "title": "AP Classroom Completed Assignments",
            "content": "AP Classroom Completed Assignments . The AP Classroom Completed Assignments for this week. Can’t open the assignment because it hasn’t been graded, but here is the proof that it is completed. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/09/markdown-14.html",
            "relUrl": "/post/2022/10/09/markdown-14.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board Program Design",
            "content": "College Board Program Design . Program Purpose and Function . Our program’s purpose is to provide vocabulary for math (AP Calc and AP Statistics), as well as physics, and provide quizzes to test skills. | The program’s function will be to use dictionaries, inputs, and outputs, to show information. | . Data Abstraction . Dictionaries can be used to store data; data can be backlogged using a ‘console.log’ command (or something similar). | Lists/dictionaries can also be used for search functions (ie; if ‘Statistics’ is searched, a list of words related to ‘Statistics’ will be run, and those items will appear. | . Managing Complexity . Multiple lists can be used to map data, and dictionaries can be used to map certain data to lists | Ex: If a term for the name of a list is searched, it can bring up those terms, and when a term is clicked, a dictionary can direct to different links. | . Procedural Abstraction . We will have a function to administer our quiz that references to a dictionary for the questions and answers, and has a score tracker that when the quiz is finished, outputs different phrases according to how well they did. | We are also considering a functionality in which it will take the type of answers failed and relate it to either outside resources for it or something in our program | . Algorithm Implementation . An algorithm we will have will first ask someone for their current math/science class, then look through dictionary to see the level it would be at in high school (eg. integraded 1a: low, pre-cal: mid, ap calc: high), if the class they state is not given the program will ask if they are taking something outside of school or if they misspelled, then give a chance to clarify. If they are taking something outside of school the program will tell them to try and relate it to one of or school’s courses through provided internet materials. After figuring out their class, our program will ask how much they are struggling, and show a correlated amount of related material to support them. | . Testing . We will institute a reward for quizzes, which will test if there are high scores in the quizzes that the user took, which were stored in a dictionary made, and if there are enough decently high scores they will be redirected to a page that either has a game or links to something enjoyable. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/09/markdown-13.html",
            "relUrl": "/post/2022/10/09/markdown-13.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python RapidAPI",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;e819277188msh68a6f7af77fad4dp172d06jsnc2bc1f8ab152&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . import requests import json url = &quot;https://shazam.p.rapidapi.com/search&quot; querystring = {&quot;term&quot;:&quot;kiss the rain&quot;,&quot;locale&quot;:&quot;en-US&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;limit&quot;:&quot;5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;e819277188msh68a6f7af77fad4dp172d06jsnc2bc1f8ab152&quot;, &quot;X-RapidAPI-Host&quot;: &quot;shazam.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) print(&quot;Track_Name&quot;) tracks = response.json().get(&#39;tracks&#39;) hits = tracks.get(&#39;hits&#39;) for track in hits: if track [&quot;track&quot;][&#39;key&#39;] == &#39;40099833&#39;: json_formatted_str = json.dumps(track [&quot;track&quot;], indent=4) print (json_formatted_str) . Track_Name { &#34;layout&#34;: &#34;5&#34;, &#34;type&#34;: &#34;MUSIC&#34;, &#34;key&#34;: &#34;40099833&#34;, &#34;title&#34;: &#34;Kiss The Rain&#34;, &#34;subtitle&#34;: &#34;Yiruma&#34;, &#34;share&#34;: { &#34;subject&#34;: &#34;Kiss The Rain - Yiruma&#34;, &#34;text&#34;: &#34;I used Shazam to discover Kiss The Rain by Yiruma.&#34;, &#34;href&#34;: &#34;https://www.shazam.com/track/40099833/kiss-the-rain&#34;, &#34;image&#34;: &#34;https://is3-ssl.mzstatic.com/image/thumb/Music115/v4/0a/d1/e8/0ad1e89c-df29-a43e-9852-eb6ece2dd556/21UMGIM24785.rgb.jpg/400x400cc.jpg&#34;, &#34;twitter&#34;: &#34;I used @Shazam to discover Kiss The Rain by Yiruma.&#34;, &#34;html&#34;: &#34;https://www.shazam.com/snippets/email-share/40099833?lang=en-US&amp;country=US&#34;, &#34;avatar&#34;: &#34;https://is4-ssl.mzstatic.com/image/thumb/Features115/v4/3f/84/4e/3f844e97-8c23-b64d-87f1-d536e99f80e9/mzl.rsxdpqqq.jpg/800x800cc.jpg&#34;, &#34;snapchat&#34;: &#34;https://www.shazam.com/partner/sc/track/40099833&#34; }, &#34;images&#34;: { &#34;background&#34;: &#34;https://is4-ssl.mzstatic.com/image/thumb/Features115/v4/3f/84/4e/3f844e97-8c23-b64d-87f1-d536e99f80e9/mzl.rsxdpqqq.jpg/800x800cc.jpg&#34;, &#34;coverart&#34;: &#34;https://is3-ssl.mzstatic.com/image/thumb/Music115/v4/0a/d1/e8/0ad1e89c-df29-a43e-9852-eb6ece2dd556/21UMGIM24785.rgb.jpg/400x400cc.jpg&#34;, &#34;coverarthq&#34;: &#34;https://is3-ssl.mzstatic.com/image/thumb/Music115/v4/0a/d1/e8/0ad1e89c-df29-a43e-9852-eb6ece2dd556/21UMGIM24785.rgb.jpg/400x400cc.jpg&#34;, &#34;joecolor&#34;: &#34;b:0f1513p:f6f1ees:d7d6d1t:c7c5c2q:afafab&#34; }, &#34;hub&#34;: { &#34;type&#34;: &#34;APPLEMUSIC&#34;, &#34;image&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/applemusic_{scalefactor}.png&#34;, &#34;actions&#34;: [ { &#34;name&#34;: &#34;apple&#34;, &#34;type&#34;: &#34;applemusicplay&#34;, &#34;id&#34;: &#34;1576663126&#34; }, { &#34;name&#34;: &#34;apple&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;https://audio-ssl.itunes.apple.com/itunes-assets/AudioPreview112/v4/b5/71/fd/b571fdea-62b9-64e8-1531-3d845cf6ee58/mzaf_8999534599011571502.plus.aac.ep.m4a&#34; } ], &#34;options&#34;: [ { &#34;caption&#34;: &#34;OPEN&#34;, &#34;actions&#34;: [ { &#34;name&#34;: &#34;hub:applemusic:deeplink&#34;, &#34;type&#34;: &#34;applemusicopen&#34;, &#34;uri&#34;: &#34;https://music.apple.com/us/album/kiss-the-rain/1576662868?i=1576663126&amp;mttnagencyid=s2n&amp;mttnsiteid=125115&amp;mttn3pid=Apple-Shazam&amp;mttnsub1=Shazam_ios&amp;mttnsub2=5348615A-616D-3235-3830-44754D6D5973&amp;itscg=30201&amp;app=music&amp;itsct=Shazam_ios&#34; }, { &#34;name&#34;: &#34;hub:applemusic:deeplink&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;https://music.apple.com/us/album/kiss-the-rain/1576662868?i=1576663126&amp;mttnagencyid=s2n&amp;mttnsiteid=125115&amp;mttn3pid=Apple-Shazam&amp;mttnsub1=Shazam_ios&amp;mttnsub2=5348615A-616D-3235-3830-44754D6D5973&amp;itscg=30201&amp;app=music&amp;itsct=Shazam_ios&#34; } ], &#34;beacondata&#34;: { &#34;type&#34;: &#34;open&#34;, &#34;providername&#34;: &#34;applemusic&#34; }, &#34;image&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/overflow-open-option_{scalefactor}.png&#34;, &#34;type&#34;: &#34;open&#34;, &#34;listcaption&#34;: &#34;Open in Apple Music&#34;, &#34;overflowimage&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/applemusic-overflow_{scalefactor}.png&#34;, &#34;colouroverflowimage&#34;: false, &#34;providername&#34;: &#34;applemusic&#34; }, { &#34;caption&#34;: &#34;BUY&#34;, &#34;actions&#34;: [ { &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;https://itunes.apple.com/us/album/kiss-the-rain/1576662868?i=1576663126&amp;mttnagencyid=s2n&amp;mttnsiteid=125115&amp;mttn3pid=Apple-Shazam&amp;mttnsub1=Shazam_ios&amp;mttnsub2=5348615A-616D-3235-3830-44754D6D5973&amp;itscg=30201&amp;app=itunes&amp;itsct=Shazam_ios&#34; } ], &#34;beacondata&#34;: { &#34;type&#34;: &#34;buy&#34;, &#34;providername&#34;: &#34;itunes&#34; }, &#34;image&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/itunes-overflow-buy_{scalefactor}.png&#34;, &#34;type&#34;: &#34;buy&#34;, &#34;listcaption&#34;: &#34;Buy on iTunes&#34;, &#34;overflowimage&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/itunes-overflow-buy_{scalefactor}.png&#34;, &#34;colouroverflowimage&#34;: false, &#34;providername&#34;: &#34;itunes&#34; } ], &#34;providers&#34;: [ { &#34;caption&#34;: &#34;Open in Spotify&#34;, &#34;images&#34;: { &#34;overflow&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/spotify-overflow_{scalefactor}.png&#34;, &#34;default&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/spotify_{scalefactor}.png&#34; }, &#34;actions&#34;: [ { &#34;name&#34;: &#34;hub:spotify:searchdeeplink&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;spotify:search:Kiss%20The%20Rain%20Yiruma&#34; } ], &#34;type&#34;: &#34;SPOTIFY&#34; }, { &#34;caption&#34;: &#34;Open in Deezer&#34;, &#34;images&#34;: { &#34;overflow&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/deezer-overflow_{scalefactor}.png&#34;, &#34;default&#34;: &#34;https://images.shazam.com/static/icons/hub/ios/v5/deezer_{scalefactor}.png&#34; }, &#34;actions&#34;: [ { &#34;name&#34;: &#34;hub:deezer:searchdeeplink&#34;, &#34;type&#34;: &#34;uri&#34;, &#34;uri&#34;: &#34;deezer-query://www.deezer.com/play?query=%7Btrack%3A%27Kiss+The+Rain%27%20artist%3A%27Yiruma%27%7D&#34; } ], &#34;type&#34;: &#34;DEEZER&#34; } ], &#34;explicit&#34;: false, &#34;displayname&#34;: &#34;APPLE MUSIC&#34; }, &#34;artists&#34;: [ { &#34;id&#34;: &#34;42&#34;, &#34;adamid&#34;: &#34;73406786&#34; } ], &#34;url&#34;: &#34;https://www.shazam.com/track/40099833/kiss-the-rain&#34; } .",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 1 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter t is the 0 letter in the alphabet . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . from dataclasses import FrozenInstanceError from logging.handlers import BufferingHandler menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; n front of it? #ideally the code should prompt the user multiple times print(&quot;Please select an item from the menu.&quot;) def menuloop(): total = 0 choice = &#39;&#39; while choice != &#39;done&#39;: choice = input(&#39;Please select an item from the menu.&#39;) if choice != &#39;done&#39;: if choice in menu : print(&#39;Selected:&#39;, choice , &#39;. Price:&#39;, menu[choice]) total += menu [choice] else: print (&#39;Incorrect&#39;) return total total = menuloop() print(total) . Menu burger $3.99 fries $1.99 drink $0.99 Please select an item from the menu. Selected: drink . Price: 0.99 Selected: fries . Price: 1.99 2.98 .",
            "url": "https://keiraokimoto.github.io/Fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "AP Prep Questions",
            "content": "AP Prep Questions . . I got most of the questions correct, except for the fourth and fifth questions on 1.2. . . For question 4, I selected C, but the answer was supposed to be B. This is because the information about which restaurants Brandon and Cynthia visited would not be needed to calculate a restaurant, only allergies and dietary restrictions. . . For question 5, I selected C, but the answer was supposed to be B. This is because the list compares each element to the all elements following it, not just one element immediately following the previous element. .",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/10/02/markdown-12.html",
            "relUrl": "/post/2022/10/02/markdown-12.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "HTML Bootstraps Table",
            "content": "Javascript Tutorial Table Link . &lt;!doctype html&gt; . Insert title here . Insert title here . . Bread Cheese Milk Sourdough Parmasan Rice Wheat Chedder Almond Potato Swiss Coconut",
            "url": "https://keiraokimoto.github.io/Fastpages/post/2022/09/26/markdown-11.html",
            "relUrl": "/post/2022/09/26/markdown-11.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Groupwork",
            "content": "Scrum Team Roles and Project . Our Scrum team is made up of Ellie, Zeen, Keira, and Giannina. . Roles . Frontend: Ellie | Backend: Giannina | Scrum Master: Keira | DevOps: Zeen | . Project . Our project is a website largely focused on helping students with school activities with a side of sports. This is to help people who were struggling in the same position as us and make their lives the tiniest bit easier. . Sprint . First we will set up our website for the first two or so days, allowing Ellie to set up the CSS and other base background stuff. This will take us around 3 days through our usual schedule. Afterwards we will work on our volleyball section, probably taking the rest of our 7 days, first laying out the text of volleyball terms and strategies, and then adding in the visual element. If we finish early on this, we will start on the math section’s definition and terms section. .",
            "url": "https://keiraokimoto.github.io/Fastpages/group/2022/09/26/markdown-10.html",
            "relUrl": "/group/2022/09/26/markdown-10.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "HTML Table",
            "content": "Javascript Tutorial Table Link . &lt;!doctype html&gt; . Insert title here . Insert title here . . Bread Cheese Milk Sourdough Parmasan Rice Wheat Chedder Almond Potato Swiss Coconut",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/HTML_Table",
            "relUrl": "/techtalk/HTML_Table",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Team Project Plan",
            "content": "Team Project Plan . This is the plan for our team project. .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/25/markdown-9.html",
            "relUrl": "/markdown%20posts/2022/09/25/markdown-9.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Statistics Unit II Vocabulary",
            "content": "Statistics Unit II Vocabulary . Population - An entire group of which information is being collected | Sample - A subset of the population which data is collected from | Sampling Frame - The actual set of units from which a sample has been drawn/a list of selected units in a set | Voluntary Response Sample - Response taken from subjects who volunteer their answers | Convenience Sample - A sample taken from the most easily accessible population | Bias - A skew towards a specific result due to favoritism or otherwise that would not typically be present in the data | Undercoverage - When some members of a population are misrepresented or not represented at all in a sample | Systemic Random Sample - A sample with a random starting point, with equal intervals to select more subjects | Simple Random Sample - When the sampling method ensures every individual/group is equally likely to be chosen for a sample | Stratified Random Sample - Meaningful groups created from a population, with a random sample taken from each group | Cluster Sample - Naturally occurring diverse groups where all the individuals in the selected groups are sampled | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/25/markdown-8.html",
            "relUrl": "/markdown%20posts/2022/09/25/markdown-8.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var leader = new Person(&quot;Eichi Tenshouin&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;leader&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, age, year, unit) { this.name = name; this.age = age; this.year = year; this.unit = unit; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, age: this.age, year: this.year, unit: this.unit, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable leader var leader = new Person(&quot;Eichi Tenshouin&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;fine&quot;); leader.setRole(&quot;Leader&quot;); // output of Object and JSON/string associated with Leader logItType(leader); // object type is easy to work with in JavaScript logItType(leader.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Eichi Tenshouin&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Leader&#39; } string ; {&#34;name&#34;:&#34;Eichi Tenshouin&#34;,&#34;age&#34;:&#34;19&#34;,&#34;year&#34;:&#34;Graduated&#34;,&#34;unit&#34;:&#34;fine&#34;,&#34;role&#34;:&#34;Leader&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var members&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a member Array of Person(s) var members = [ new Person(&quot;Wataru Hibiki&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;fine&quot;), new Person(&quot;Kaoru Hakaze&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;UNDEAD&quot;), new Person(&quot;Midori Takamine&quot;, &quot;17&quot;, &quot;Third Year&quot;, &quot;Ryuseitai&quot;), new Person(&quot;Niki Shiina&quot;, &quot;19&quot;, &quot;Dropped Out&quot;, &quot;Crazy:B&quot;), new Person(&quot;Tsukasa Suou&quot;, &quot;17&quot;, &quot;Second Year&quot;, &quot;Knights&quot;), new Person(&quot;Tsumugi Aoba&quot;, &quot;19&quot;, &quot;Graduated&quot;, &quot;Switch&quot;) ]; // define a classroom and build Classroom objects and json function Classroom(leader, members){ // 1 leader, many member // start Classroom with Leader leader.setRole(&quot;Leader&quot;); this.leader = leader; this.classroom = [leader]; // add each Member to Classroom this.members = members; this.members.forEach(member =&gt; { member.setRole(&quot;Member&quot;); this.classroom.push(member); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined leader and members compsci = new Classroom(leader, members); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Eichi Tenshouin&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Leader&#39; }, Person { name: &#39;Wataru Hibiki&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Member&#39; }, Person { name: &#39;Kaoru Hakaze&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;UNDEAD&#39;, role: &#39;Member&#39; }, Person { name: &#39;Midori Takamine&#39;, age: &#39;17&#39;, year: &#39;Third Year&#39;, unit: &#39;Ryuseitai&#39;, role: &#39;Member&#39; }, Person { name: &#39;Niki Shiina&#39;, age: &#39;19&#39;, year: &#39;Dropped Out&#39;, unit: &#39;Crazy:B&#39;, role: &#39;Member&#39; }, Person { name: &#39;Tsukasa Suou&#39;, age: &#39;17&#39;, year: &#39;Second Year&#39;, unit: &#39;Knights&#39;, role: &#39;Member&#39; }, Person { name: &#39;Tsumugi Aoba&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;Switch&#39;, role: &#39;Member&#39; } ] string ; Eichi Tenshouin string ; {&#34;name&#34;:&#34;Eichi Tenshouin&#34;,&#34;age&#34;:&#34;19&#34;,&#34;year&#34;:&#34;Graduated&#34;,&#34;unit&#34;:&#34;fine&#34;,&#34;role&#34;:&#34;Leader&#34;} object ; { name: &#39;Eichi Tenshouin&#39;, age: &#39;19&#39;, year: &#39;Graduated&#39;, unit: &#39;fine&#39;, role: &#39;Leader&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Year&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Unit&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.year + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.unit + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameAgeYearUnitRole . Eichi Tenshouin | 19 | Graduated | fine | Leader | Wataru Hibiki | 19 | Graduated | fine | Member | Kaoru Hakaze | 19 | Graduated | UNDEAD | Member | Midori Takamine | 17 | Third Year | Ryuseitai | Member | Niki Shiina | 19 | Dropped Out | Crazy:B | Member | Tsukasa Suou | 17 | Second Year | Knights | Member | Tsumugi Aoba | 19 | Graduated | Switch | Member | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Fastpages Blog Post",
            "content": "Fastpages Blog Post . Collab Work + Collab Quiz . . As the video explained, happiness comes from living in the moment, rather than in the past or the future, and because of this I am going to start doing daily things that make me happy, even if it takes a lot of effort. . What I want to try doing: . I’ll try to spend more time with friends and making connections among people, as well as joining communities. | I’ll always remind the people I love of how much I appreciate them, and foster my relationships and community, and I’ll stop carrying about money that brings me food. | I’ll focus on the present moment and what I can do now, all the possibiliies and the actions I can make right now to make me happy and live a more fulfilling life, and I won’t focus specifically on the future, only what’s in the present. | I’ll spend more time resting, so I’m able to have a clearer mind as well | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/18/markdown-7.html",
            "relUrl": "/markdown%20posts/2022/09/18/markdown-7.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Planning For the Performance Task",
            "content": "Performance Task Planning . Main Concept: . Website will be mostly school based | There will be a Math, Physics, Volleyball, and Gacha section | . For Math Section: . Will have AP Calculus as well as AP Statistics | Calculators, both for equations as well as normal calculations | Will have definitions as well as equations | For quizzes, there will be some for both AP Statistics and AP Calculus Both will have the page format: Start -&gt; Question -&gt; Incorrect page with how to solve/Correct page -&gt; Repeats until last page | . | . For Physics Section: . Very similar to the Math Section, but with Physics | Calculators for physics equations will be included, as well as definitions/terms | Will also have quizzes with the same format | . For Volleyball Section . Mostly volleyball terms, strategies, and etc. | Will also have images explaining terms/strategies | . For Gacha Section . Essentially a gacha calculator that gives random character pulls at a precent chance (likely using a print function) | Mostly just a ‘For fun’ section, may or may not get to this but it would be fun to include | . Requirements . Knowledge of math | Knowledge of python math functions | Knowledge on quizzes | Knowledge of liquid for automation of certain portions | Probably other things as we flesh out the concept (will be decided later) | . Current Ability . At this point in time, we can already do the design and quiz portions, however the calculator for the math section and the gacha section will require us to learn more aspects of Python and Liquid There are probably other minute details we haven’t noticed that we don’t know how to do yet | . Resources . We have Github, Google, VSCode, Youtube, Khan Academy, and the APCSP homepage to support us | . The reasoning we have for our website is that the math and science sections will support us in our studying and school lives, and hopefully help others students struggling in school by providing them with resources and learning materials. Volleyball stats will help us explore our interests while expanding our knowledge on computer science and its possibilities in many fields, and the gacha sections will help us learn more on probability and output for the end user, as well as being something fun to do. to encourage us. .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/11/markdown-6.html",
            "relUrl": "/markdown%20posts/2022/09/11/markdown-6.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Planning for Applab Quiz",
            "content": "Planning for Applab Quiz . . AppLab Code Plan . Page Order: | Start | Question 1 | If correct -&gt; Correct page | If incorrect -&gt; Incorrect page | For both incorrect and correct pages: click continue, continues to next question (repeat until all questions are finished) | Endpage . | Dictionaries are added for storing keys/values, keys being the questions/page names and the values being the correct answers | Dictionaries are added into functions, which change depending on the question (ie: Question1 will have the ‘correct’ value as ‘button3’, whereas Question2 will have the ‘correct’ value as ‘ans1’) | A wrong answer will direct to the incorrect_page, which is the same page for every incorrect | The same goes for correct answers, a correct answer will direct to the correct_page | Both the incorrect and correct pages have a ‘Continue’ button, which will change to the next question (question1, then question2, then question3, and the endpage) | . Successes/Discoveries . I was able to get the code to work using many dictionaries, lists, events, and other commands | Buttons, correct answers, and incorrect answers were all assigned using dictionaries | Dictionaries + keys + values tell the program which code belongs to which | Dictionaries + functions work as commands, which the program uses to determine which page to move to | “Question(number)” : (value) -&gt; The number of events/button clicks that can take place; used later in the code, which the code uses to move to a different page | Essentially, dictionaries and lists can be used with loops to move to different pages | . Challenges . Could not finish the dictionaries for the incorrect/correct pages | Each page has an ‘onEvent’ command which sends it to the next page | Could add a dictionary + loop for the ‘incorrect/correct’ pages that changes, and sends to a different question after being clicked | . Applab AP Stats Quiz . Applab AP Stats Quiz .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/11/markdown-5.html",
            "relUrl": "/markdown%20posts/2022/09/11/markdown-5.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Theme Changing Bugs",
            "content": "Theme Changing Bugs . . Bugs . Tags disappeared | Home button disappeared | Tables lack columns | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/05/markdown-4.html",
            "relUrl": "/markdown%20posts/2022/09/05/markdown-4.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Time Box Fragments",
            "content": ". Time Box Fragments . Week Date Links Description . Week 0 | August 21, 2022 | Review Ticket 0 | First week, mostly just setup. | . Week 1 | August 28, 2022 | Review Ticket 1 | Second week, personalizing pages and adding more features, such as a quiz and other tabs. | . Week 2 | September 05, 2022 | Review Ticket 2 | Third week, modifying lists and dictionaries, as well as modifying the theme. | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/09/05/markdown-3.html",
            "relUrl": "/markdown%20posts/2022/09/05/markdown-3.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Keira&quot;, &quot;LastName&quot;: &quot;Okimoto&quot;, &quot;DOB&quot;: &quot;December 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;keiraokimoto@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;], &quot;Owns_Cheese&quot;: &quot;None&quot;, &quot;Hobbies&quot;: [&quot;Swimming&quot;, &quot;Drawing&quot;, &quot;Playing games&quot;, &quot;Sleeping&quot;], }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;George&quot;, &quot;LastName&quot;: &quot;Washington&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Some cemetary somewhere&quot;, &quot;Email&quot;: &quot;georgewashington@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;], &quot;Owns_Cheese&quot;: &quot;Parmasan&quot;, &quot;Hobbies&quot;: [&quot;Swimming&quot;, &quot;Horseback riding&quot;, &quot;Hunting&quot;], }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Keira&#39;, &#39;LastName&#39;: &#39;Okimoto&#39;, &#39;DOB&#39;: &#39;December 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;keiraokimoto@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;None&#39;], &#39;Owns_Cheese&#39;: &#39;None&#39;, &#39;Hobbies&#39;: [&#39;Swimming&#39;, &#39;Drawing&#39;, &#39;Playing games&#39;, &#39;Sleeping&#39;]}, {&#39;FirstName&#39;: &#39;George&#39;, &#39;LastName&#39;: &#39;Washington&#39;, &#39;DOB&#39;: &#39;May 12&#39;, &#39;Residence&#39;: &#39;Some cemetary somewhere&#39;, &#39;Email&#39;: &#39;georgewashington@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;None&#39;], &#39;Owns_Cheese&#39;: &#39;Parmasan&#39;, &#39;Hobbies&#39;: [&#39;Swimming&#39;, &#39;Horseback riding&#39;, &#39;Hunting&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Cheese: &quot;, d_rec[&quot;Owns_Cheese&quot;]) print(&quot; t&quot;, &quot;Hobbies:&quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Keira Okimoto Residence: San Diego Birth Day: December 21 Cars: None Cheese: None Hobbies:Swimming, Drawing, Playing games, Sleeping George Washington Residence: Some cemetary somewhere Birth Day: May 12 Cars: None Cheese: Parmasan Hobbies:Swimming, Horseback riding, Hunting . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Keira Okimoto Residence: San Diego Birth Day: December 21 Cars: None Cheese: None Hobbies:Swimming, Drawing, Playing games, Sleeping George Washington Residence: Some cemetary somewhere Birth Day: May 12 Cars: None Cheese: Parmasan Hobbies:Swimming, Horseback riding, Hunting . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Keira Okimoto Residence: San Diego Birth Day: December 21 Cars: None Cheese: None Hobbies:Swimming, Drawing, Playing games, Sleeping George Washington Residence: Some cemetary somewhere Birth Day: May 12 Cars: None Cheese: Parmasan Hobbies:Swimming, Horseback riding, Hunting . . List Loops . Yeet variable is a list of strings, storing random words. The while loop is used to iterate through the list. Each item in the list is printed in the order added. The index is started at 0 and increment by 1 for each time. . yeet = [&quot;woo&quot;, &quot;wee&quot;, &quot;hee&quot;, &quot;hoo&quot;, &quot;yee&quot;, &quot;yoo&quot;] # while loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(yeet): print(yeet[i]) i += 1 return while_loop() . While loop output woo wee hee hoo yee yoo . For Loop for Lists . For a For Loop, the name of the list is defined and placed into the code. It is defined as d_yeet. . def print_data(d_yeet): print(d_yeet) def for_loop(): print(&quot;For loop output n&quot;) for record in yeet: print_data(record) for_loop() # Prints data in the d_yeet list . For loop output woo wee hee hoo yee yoo . Reverse Loop for Lists . For the reversed list, the code is defined the same as the original loop, but the reverse command is added to reverse the list. . yeet = [&quot;woo&quot;, &quot;wee&quot;, &quot;hee&quot;, &quot;hoo&quot;, &quot;yee&quot;, &quot;yoo&quot;] #yeet is the variable and it is equal to the string def print_data(d_yeet): print(d_yeet) #&#39;d_yeet&#39; is used to replace the name &#39;yeet&#39; as a definition def reverse_for_loop(): print (&quot;Reverse for loop using reversed n&quot;) for record in reversed(yeet): print_data(record) reverse_for_loop() #reversed command reverses the list def reverse_for_loop_2(): print (&quot;Reverse for loop using range n&quot;) for index in range(len(yeet) -1, -1, -1): print_data(yeet[index ]) reverse_for_loop_2() #reversing the data using a range - &#39;len&#39; = the length. -1 subtracts from the list/makes it reverse . Reverse for loop using reversed yoo yee hoo hee wee woo Reverse for loop using range yoo yee hoo hee wee woo . Recursive Loop for Lists . For a recursive loop with a list, the list name is added to the code. . yeet = [&quot;woo&quot;, &quot;wee&quot;, &quot;hee&quot;, &quot;hoo&quot;, &quot;yee&quot;, &quot;yoo&quot;] # recursive loop essentially continues endlessly until the exit condition is met (which ends at (i + 1)) def recursive_loop(i): if i &lt; len(yeet): record = yeet[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output woo wee hee hoo yee yoo . Dictionary/List Quiz . import getpass, sys EnstarsUnits = [&quot;ALKALOID&quot;, &quot;Trickstar&quot;, &quot;fine&quot;, &quot;Eden&quot;, &quot;Knights&quot;] EnstarsCharacters = [&quot;Hiiro&quot;, &quot;Mao&quot;, &quot;Wataru&quot;, &quot;Nagisa&quot;, &quot;Ritsu&quot;] # Lists (ignore these they aren&#39;t used in the code) Enstars = { &quot;ALKALOID&quot;: &quot;Hiiro Amagi&quot;, &quot;Trickstar&quot;: &quot;Mao Isara&quot;, &quot;fine&quot;: &quot;Wataru Hibiki&quot;, &quot;Eden&quot;: &quot;Nagisa Ran&quot;, &quot;Knights&quot;: &quot;Ritsu Sakuma&quot;, } # The dictionary/list dictionary CorrectList = {} IncorrectList = {} # Empty dictionaries used to store data def question_with_response(unit): print(&quot;What is your favorite &quot; + unit + &quot; character?&quot;) msg = input () return msg # defines and prints question; asks for input def question(): for unit in EnstarsUnits: rsp = question_with_response(unit) if (rsp != Enstars [unit]): print (rsp + &quot; is incorrect.&quot;) IncorrectList [unit] = rsp else: print (rsp + &quot; is correct.&quot;) CorrectList [unit] = rsp # defines unit as one of the keys in the dictionary # answers are marked as incorrect if they do not match the values that go with the keys question() . What is your favorite ALKALOID character? Hiiro Amagi is correct. What is your favorite Trickstar character? Mao Isara is correct. What is your favorite fine character? Wataru Hibiki is correct. What is your favorite Eden character? Nagisa Ran is correct. What is your favorite Knights character? Ritsu Sakuma is correct. . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://keiraokimoto.github.io/Fastpages/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Second Markdown Post with Image",
            "content": "Second Markdown Post . . Pretty sure I’m only supposed to put an image here so here’s an image . Images . Enjoy the snail I drew on MSPaint specifically for this page . .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/08/28/markdown-2.html",
            "relUrl": "/markdown%20posts/2022/08/28/markdown-2.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "AP Stats Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;What is the best reason for choosing a stemplot rather than a histogram to display the distribution of a quantitative variable?&quot;) if rsp == &quot;Stemplots make it easier to determine the shape of a distribution&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;The scores on a statistics test had a mean of 25 and a standard deviation of 3. If a score of 28 was added to the distribution of scores, what would happen to the mean and standard deviation?&quot;) if rsp == &quot;The mean will increase, and standard deviation will decrease&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;There are many houses ranging from $200,000 to $500,000 in price. The few houses on the water, however, are priced up to $15 million. The distribution of house prices will be...?&quot;) if rsp == &quot;Skewed to the right&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, keira running /home/keira/anaconda3/bin/python You will be asked 3 questions. Question: What is the best reason for choosing a stemplot rather than a histogram to display the distribution of a quantitative variable? Stemplots make it easier to determine the shape of a distribution is correct! Question: The scores on a statistics test had a mean of 25 and a standard deviation of 3. If a score of 28 was added to the distribution of scores, what would happen to the mean and standard deviation? The mean will increase, and standard deviation will decrease is correct! Question: There are many houses ranging from $200,000 to $500,000 in price. The few houses on the water, however, are priced up to $15 million. The distribution of house prices will be...? Skewed to the right is correct! keira you scored 3/3 .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/08/28/TP110-python_hello.html",
            "relUrl": "/2022/08/28/TP110-python_hello.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/keira/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/keira/.local/share/jupyter/kernels/bash javascript /home/keira/.local/share/jupyter/kernels/javascript python3 /home/keira/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/keira/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://keiraokimoto.github.io/Fastpages/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Docx Post1",
            "content": "Graph Description Notes: . Context - Use variable/group names . | Shape (Roughly symmetric, double peaked binomial, single peaked unimodal, right or left skew) . | Outliers - Any unusual observations . | Center - The average/typical values . | Spread - Variability . | If comparing, use comparative language for center/spread (higher, lower, etc.) . | . Center: . Median - the middle point if a distribution . | Use with skewed data . | . Mean: . m = sum of terms/number of terms . | . Use with symmetric data . | . Variability: . Range = Maximum - Minimum . | ‘The context typically varies by sx from the mean of x.’ . | . Non-Resistant Measures: . Greatly affected by extreme values . | Example: Mean, standard deviation, range . | .",
            "url": "https://keiraokimoto.github.io/Fastpages/2022/08/26/Docx-Post1.html",
            "relUrl": "/2022/08/26/Docx-Post1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "First Markdown Post",
            "content": "First Markdown Post . . Hi uhhh I’m not sure what to put here. My name is Keira Okimoto and I’m a senior. That’s about it. . Lists . Just some lists about me. . Here’s a list of countries I’ve been to: . England | Japan | Vietnam | Italy | France | Germany | . And a numbered list of birds I’ve had: . Comet | Star | Matcha | Blue | Mochi | Images . Enjoy the hedgehog I drew on MSPaint . . Code . Random code because why not . # Prints &#39;hello there&#39; print(hello there) . Tables . A random table . Column 1 Column 2 . Table | Chair | .",
            "url": "https://keiraokimoto.github.io/Fastpages/markdown%20posts/2022/08/21/markdown-1.html",
            "relUrl": "/markdown%20posts/2022/08/21/markdown-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "First Notebook Post",
            "content": "print(&#39;Hello world!&#39;) . Hello world! .",
            "url": "https://keiraokimoto.github.io/Fastpages/jupyter%20posts/2022/08/21/Notebook1.html",
            "relUrl": "/jupyter%20posts/2022/08/21/Notebook1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- hide: true - branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://keiraokimoto.github.io/Fastpages/example/2020/02/20/test.html",
            "relUrl": "/example/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://keiraokimoto.github.io/Fastpages/example/2020/01/14/test-markdown-post.html",
            "relUrl": "/example/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Notes",
          "content": "Here is where I will be storing notes for the year. Will they be organized nicely? Only time will tell. . Compsci Notes: . Add prefixes to make an order | Dashes -&gt; don’t take them out they mess up the syntax and etc | Key + value -&gt; gets response | If ‘root’ pops up, just uninstall/reinstall | Adding images: Drag/drop file into ‘_images’ folder | Copy paste image file name into code | Pray it works | If not, good luck | . | .",
          "url": "https://keiraokimoto.github.io/Fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Bootstraps Table + Table Link",
          "content": "| Javascript Table | Extra Statistics Unit II Vocabulary | Team Project Plan | Groupwork | HTML Bootstraps Table | API | . Javascript Tutorial Table Link . &lt;!doctype html&gt; . Insert title here . Insert title here . . Bread Cheese Milk Sourdough Parmasan Rice Wheat Chedder Almond Potato Swiss Coconut",
          "url": "https://keiraokimoto.github.io/Fastpages/categories/",
          "relUrl": "/categories/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "Hello! My name is Keira Okimoto and I’m a senior going to Del Norte High School. I have two birds, Blue (male) and Mochi (female). I like to spend my time drawing, sleeping, eating, or playing games. That’s…. Pretty much it. .",
          "url": "https://keiraokimoto.github.io/Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://keiraokimoto.github.io/Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}